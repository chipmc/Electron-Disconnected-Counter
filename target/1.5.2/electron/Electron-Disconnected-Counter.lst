
/Users/chipmc/Documents/Maker/Particle/Projects/Electron-Disconnected-Counter/target/1.5.2/electron/Electron-Disconnected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006670  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08086690  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  20000000  08086694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000860  20000134  20000134  00040134  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  080867c8  080867c8  000367c8  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  080867f4  080867f4  000367f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d50ea  00000000  00000000  000367f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012983  00000000  00000000  0010b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a004  00000000  00000000  0011e265  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002730  00000000  00000000  00138269  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004288  00000000  00000000  0013a999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000289bb  00000000  00000000  0013ec21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b755  00000000  00000000  001675dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b1b0b  00000000  00000000  00192d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d358  00000000  00000000  0024483c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f005 f8b1 	bl	8085198 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f005 f8b6 	bl	80851ae <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08086694 	.word	0x08086694
 8080050:	20000134 	.word	0x20000134
 8080054:	20000134 	.word	0x20000134
 8080058:	20000994 	.word	0x20000994
 808005c:	20000994 	.word	0x20000994

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f003 fd47 	bl	8083af4 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	0808664c 	.word	0x0808664c
 8080088:	08086684 	.word	0x08086684

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 b9f4 	b.w	8081478 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 ffd9 	bl	8081048 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f003 bced 	b.w	8083a78 <_post_loop>

0808009e <_Znwj>:
 808009e:	f002 b8b9 	b.w	8082214 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f002 b8bf 	b.w	8082224 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr
	...

080800b8 <_Z11watchdogISRv>:
  else frontTireFlag = true;
}

void watchdogISR()
{
  watchdogFlag = true;
 80800b8:	4b01      	ldr	r3, [pc, #4]	; (80800c0 <_Z11watchdogISRv+0x8>)
 80800ba:	2201      	movs	r2, #1
 80800bc:	701a      	strb	r2, [r3, #0]
 80800be:	4770      	bx	lr
 80800c0:	200001ec 	.word	0x200001ec

080800c4 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
 80800c4:	b538      	push	{r3, r4, r5, lr}
 80800c6:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
 80800c8:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
 80800ca:	b128      	cbz	r0, 80800d8 <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
 80800cc:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
 80800ce:	210c      	movs	r1, #12
 80800d0:	f003 fe7d 	bl	8083dce <_ZdlPvj>
            wakeupSource = next;
 80800d4:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
 80800d6:	e7f8      	b.n	80800ca <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
 80800d8:	4620      	mov	r0, r4
 80800da:	bd38      	pop	{r3, r4, r5, pc}

080800dc <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
 80800dc:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800de:	4904      	ldr	r1, [pc, #16]	; (80800f0 <_Z9resetFRAM6String+0x14>)
 80800e0:	f003 f896 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800e4:	b118      	cbz	r0, 80800ee <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
 80800e6:	4803      	ldr	r0, [pc, #12]	; (80800f4 <_Z9resetFRAM6String+0x18>)
 80800e8:	f001 fc86 	bl	80819f8 <_ZN6MB85RC5eraseEv>
    return 1;
 80800ec:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800ee:	bd08      	pop	{r3, pc}
 80800f0:	08086019 	.word	0x08086019
 80800f4:	200001b4 	.word	0x200001b4

080800f8 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 80800f8:	b510      	push	{r4, lr}
 80800fa:	4604      	mov	r4, r0
 80800fc:	4b02      	ldr	r3, [pc, #8]	; (8080108 <_ZN8MB85RC64D1Ev+0x10>)
 80800fe:	6003      	str	r3, [r0, #0]
 8080100:	f001 fc42 	bl	8081988 <_ZN6MB85RCD1Ev>
 8080104:	4620      	mov	r0, r4
 8080106:	bd10      	pop	{r4, pc}
 8080108:	08085b30 	.word	0x08085b30

0808010c <_ZN8MB85RC64D0Ev>:
 808010c:	b510      	push	{r4, lr}
 808010e:	4604      	mov	r4, r0
 8080110:	f7ff fff2 	bl	80800f8 <_ZN8MB85RC64D1Ev>
 8080114:	4620      	mov	r0, r4
 8080116:	2110      	movs	r1, #16
 8080118:	f003 fe59 	bl	8083dce <_ZdlPvj>
 808011c:	4620      	mov	r0, r4
 808011e:	bd10      	pop	{r4, pc}

08080120 <_ZN10CloudClass12syncTimeDoneEv.isra.15>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8080120:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8080122:	2000      	movs	r0, #0
 8080124:	f002 f816 	bl	8082154 <spark_sync_time_pending>
 8080128:	b128      	cbz	r0, 8080136 <_ZN10CloudClass12syncTimeDoneEv.isra.15+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808012a:	f001 fffb 	bl	8082124 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808012e:	f080 0001 	eor.w	r0, r0, #1
 8080132:	b2c0      	uxtb	r0, r0
 8080134:	bd08      	pop	{r3, pc}
 8080136:	2001      	movs	r0, #1
    }
 8080138:	bd08      	pop	{r3, pc}
	...

0808013c <_Z9sensorISRv>:
  return current.temperature;
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
 808013c:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.sensorType == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
 808013e:	4b21      	ldr	r3, [pc, #132]	; (80801c4 <_Z9sensorISRv+0x88>)
 8080140:	781a      	ldrb	r2, [r3, #0]
 8080142:	4619      	mov	r1, r3
 8080144:	b922      	cbnz	r2, 8080150 <_Z9sensorISRv+0x14>
 8080146:	4a20      	ldr	r2, [pc, #128]	; (80801c8 <_Z9sensorISRv+0x8c>)
 8080148:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 808014c:	2a01      	cmp	r2, #1
 808014e:	d115      	bne.n	808017c <_Z9sensorISRv+0x40>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
 8080150:	4b1e      	ldr	r3, [pc, #120]	; (80801cc <_Z9sensorISRv+0x90>)
 8080152:	2201      	movs	r2, #1
 8080154:	701a      	strb	r2, [r3, #0]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
 8080156:	4b1e      	ldr	r3, [pc, #120]	; (80801d0 <_Z9sensorISRv+0x94>)
 8080158:	e853 2f00 	ldrex	r2, [r3]
 808015c:	3201      	adds	r2, #1
 808015e:	e843 2000 	strex	r0, r2, [r3]
 8080162:	2800      	cmp	r0, #0
 8080164:	d1f8      	bne.n	8080158 <_Z9sensorISRv+0x1c>
 8080166:	4b1b      	ldr	r3, [pc, #108]	; (80801d4 <_Z9sensorISRv+0x98>)
 8080168:	e853 2f00 	ldrex	r2, [r3]
 808016c:	3201      	adds	r2, #1
 808016e:	e843 2000 	strex	r0, r2, [r3]
 8080172:	2800      	cmp	r0, #0
 8080174:	d1f8      	bne.n	8080168 <_Z9sensorISRv+0x2c>
    hourlyAtomic.fetch_add(1, std::memory_order_relaxed);
    dailyAtomic.fetch_add(1, std::memory_order_relaxed);
    frontTireFlag = false;
 8080176:	2300      	movs	r3, #0
 8080178:	700b      	strb	r3, [r1, #0]
 808017a:	bd10      	pop	{r4, pc}
  }
  else if (sysStatus.sensorType == 2) {
 808017c:	2a02      	cmp	r2, #2
 808017e:	d11e      	bne.n	80801be <_Z9sensorISRv+0x82>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080180:	f001 fdc6 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
    static long unsigned lastCountMillis = 0;
    if (millis() - lastCountMillis >= 700) {                          // Set a standard 700mSec debounce
 8080184:	4c14      	ldr	r4, [pc, #80]	; (80801d8 <_Z9sensorISRv+0x9c>)
 8080186:	6823      	ldr	r3, [r4, #0]
 8080188:	1ac0      	subs	r0, r0, r3
 808018a:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
 808018e:	d318      	bcc.n	80801c2 <_Z9sensorISRv+0x86>
      sensorDetect = true;                                            // sets the sensor flag for the main loop
 8080190:	4b0e      	ldr	r3, [pc, #56]	; (80801cc <_Z9sensorISRv+0x90>)
 8080192:	2201      	movs	r2, #1
 8080194:	701a      	strb	r2, [r3, #0]
 8080196:	4b0e      	ldr	r3, [pc, #56]	; (80801d0 <_Z9sensorISRv+0x94>)
 8080198:	e853 2f00 	ldrex	r2, [r3]
 808019c:	3201      	adds	r2, #1
 808019e:	e843 2100 	strex	r1, r2, [r3]
 80801a2:	2900      	cmp	r1, #0
 80801a4:	d1f8      	bne.n	8080198 <_Z9sensorISRv+0x5c>
 80801a6:	4b0b      	ldr	r3, [pc, #44]	; (80801d4 <_Z9sensorISRv+0x98>)
 80801a8:	e853 2f00 	ldrex	r2, [r3]
 80801ac:	3201      	adds	r2, #1
 80801ae:	e843 2100 	strex	r1, r2, [r3]
 80801b2:	2900      	cmp	r1, #0
 80801b4:	d1f8      	bne.n	80801a8 <_Z9sensorISRv+0x6c>
 80801b6:	f001 fdab 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
      hourlyAtomic.fetch_add(1, std::memory_order_relaxed);
      dailyAtomic.fetch_add(1, std::memory_order_relaxed);
      lastCountMillis = millis(); 
 80801ba:	6020      	str	r0, [r4, #0]
 80801bc:	bd10      	pop	{r4, pc}
    }
  }
  else frontTireFlag = true;
 80801be:	2201      	movs	r2, #1
 80801c0:	701a      	strb	r2, [r3, #0]
 80801c2:	bd10      	pop	{r4, pc}
 80801c4:	20000260 	.word	0x20000260
 80801c8:	200002a0 	.word	0x200002a0
 80801cc:	200001a8 	.word	0x200001a8
 80801d0:	200001e0 	.word	0x200001e0
 80801d4:	200001dc 	.word	0x200001dc
 80801d8:	2000028c 	.word	0x2000028c

080801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80801dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80801de:	4605      	mov	r5, r0
 80801e0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80801e4:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80801e6:	f88d 3000 	strb.w	r3, [sp]
 80801ea:	233c      	movs	r3, #60	; 0x3c
 80801ec:	f002 fb3c 	bl	8082868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80801f0:	4628      	mov	r0, r5
 80801f2:	b003      	add	sp, #12
 80801f4:	bd30      	pop	{r4, r5, pc}

080801f6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80801f6:	b510      	push	{r4, lr}
 80801f8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80801fa:	6800      	ldr	r0, [r0, #0]
 80801fc:	b108      	cbz	r0, 8080202 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80801fe:	f002 f811 	bl	8082224 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080202:	4620      	mov	r0, r4
 8080204:	bd10      	pop	{r4, pc}

08080206 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 8080206:	6803      	ldr	r3, [r0, #0]
 8080208:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
 808020a:	b120      	cbz	r0, 8080216 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
 808020c:	8883      	ldrh	r3, [r0, #4]
 808020e:	428b      	cmp	r3, r1
 8080210:	d001      	beq.n	8080216 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
 8080212:	6880      	ldr	r0, [r0, #8]
 8080214:	e7f9      	b.n	808020a <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
 8080216:	4770      	bx	lr

08080218 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 8080218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
 808021c:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 808021e:	4605      	mov	r5, r0
 8080220:	460f      	mov	r7, r1
 8080222:	4616      	mov	r6, r2
        if (valid_) {
 8080224:	b33b      	cbz	r3, 8080276 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
 8080226:	2101      	movs	r1, #1
 8080228:	f7ff ffed 	bl	8080206 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
 808022c:	b150      	cbz	r0, 8080244 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
 808022e:	8983      	ldrh	r3, [r0, #12]
 8080230:	42bb      	cmp	r3, r7
 8080232:	d104      	bne.n	808023e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
 8080234:	7386      	strb	r6, [r0, #14]
                    return *this;
 8080236:	e01e      	b.n	8080276 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
 8080238:	8883      	ldrh	r3, [r0, #4]
 808023a:	2b01      	cmp	r3, #1
 808023c:	d0f6      	beq.n	808022c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
 808023e:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
 8080240:	2800      	cmp	r0, #0
 8080242:	d1f9      	bne.n	8080238 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
 8080244:	490d      	ldr	r1, [pc, #52]	; (808027c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
 8080246:	2010      	movs	r0, #16
 8080248:	f003 fdcc 	bl	8083de4 <_ZnwjRKSt9nothrow_t>
 808024c:	4604      	mov	r4, r0
 808024e:	b188      	cbz	r0, 8080274 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
 8080250:	f04f 0810 	mov.w	r8, #16
 8080254:	4642      	mov	r2, r8
 8080256:	2100      	movs	r1, #0
 8080258:	f004 ffa9 	bl	80851ae <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
 808025c:	2302      	movs	r3, #2
 808025e:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 8080260:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
 8080262:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 8080266:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 8080268:	692b      	ldr	r3, [r5, #16]
            wakeupSource->pin = pin;
 808026a:	81a7      	strh	r7, [r4, #12]
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
 808026c:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
 808026e:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080270:	612c      	str	r4, [r5, #16]
 8080272:	e000      	b.n	8080276 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
 8080274:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
 8080276:	4628      	mov	r0, r5
 8080278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808027c:	080863f4 	.word	0x080863f4

08080280 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
 8080280:	b510      	push	{r4, lr}
 8080282:	4604      	mov	r4, r0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
 8080284:	b139      	cbz	r1, 8080296 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x16>
 8080286:	3901      	subs	r1, #1
 8080288:	f7ff fffa 	bl	8080280 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
 808028c:	4601      	mov	r1, r0
 808028e:	4620      	mov	r0, r4
 8080290:	f004 fc54 	bl	8084b3c <__aeabi_fmul>
 8080294:	bd10      	pop	{r4, pc}
 8080296:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
}
 808029a:	bd10      	pop	{r4, pc}

0808029c <_Z11recordCountv>:
    hourliesCountsWriteNeeded = false;
  }
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
 808029c:	b570      	push	{r4, r5, r6, lr}
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808029e:	4d1d      	ldr	r5, [pc, #116]	; (8080314 <_Z11recordCountv+0x78>)
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
 80802a0:	4e1d      	ldr	r6, [pc, #116]	; (8080318 <_Z11recordCountv+0x7c>)
 80802a2:	682b      	ldr	r3, [r5, #0]
 80802a4:	7834      	ldrb	r4, [r6, #0]
 80802a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80802aa:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80802ae:	8313      	strh	r3, [r2, #24]
 80802b0:	f003 f9d2 	bl	8083658 <_ZN9TimeClass6minuteEv>
 80802b4:	4284      	cmp	r4, r0
 80802b6:	4c19      	ldr	r4, [pc, #100]	; (808031c <_Z11recordCountv+0x80>)
 80802b8:	d004      	beq.n	80802c4 <_Z11recordCountv+0x28>
    currentMinutePeriod = Time.minute();                            // Reset period
 80802ba:	f003 f9cd 	bl	8083658 <_ZN9TimeClass6minuteEv>
    current.maxMinValue = 1;                                        // Reset for the new minute
 80802be:	2301      	movs	r3, #1
  static byte currentMinutePeriod;                                    // Current minute

  pinSetFast(blueLED);                                                // Turn on the blue LED

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
    currentMinutePeriod = Time.minute();                            // Reset period
 80802c0:	7030      	strb	r0, [r6, #0]
    current.maxMinValue = 1;                                        // Reset for the new minute
 80802c2:	61a3      	str	r3, [r4, #24]
  }
  current.maxMinValue++;
 80802c4:	69a3      	ldr	r3, [r4, #24]
 80802c6:	3301      	adds	r3, #1
 80802c8:	61a3      	str	r3, [r4, #24]

  current.lastCountTime = Time.now();
 80802ca:	f003 f9b4 	bl	8083636 <_ZN9TimeClass3nowEv>
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_and(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }
 80802ce:	4914      	ldr	r1, [pc, #80]	; (8080320 <_Z11recordCountv+0x84>)
 80802d0:	60e0      	str	r0, [r4, #12]
 80802d2:	2300      	movs	r3, #0
 80802d4:	e851 2f00 	ldrex	r2, [r1]
 80802d8:	e841 3000 	strex	r0, r3, [r1]
 80802dc:	2800      	cmp	r0, #0
 80802de:	d1f9      	bne.n	80802d4 <_Z11recordCountv+0x38>
  current.hourlyCount += hourlyAtomic.fetch_and(0,std::memory_order_relaxed);   // Increment the hourlyCount from the atomic variable
 80802e0:	6821      	ldr	r1, [r4, #0]
 80802e2:	440a      	add	r2, r1
 80802e4:	490f      	ldr	r1, [pc, #60]	; (8080324 <_Z11recordCountv+0x88>)
 80802e6:	6022      	str	r2, [r4, #0]
 80802e8:	e851 2f00 	ldrex	r2, [r1]
 80802ec:	e841 3000 	strex	r0, r3, [r1]
 80802f0:	2800      	cmp	r0, #0
 80802f2:	d1f9      	bne.n	80802e8 <_Z11recordCountv+0x4c>
  current.dailyCount += dailyAtomic.fetch_and(0,std::memory_order_relaxed);    // Increment the dailyCount from the atomic vairable
 80802f4:	68a1      	ldr	r1, [r4, #8]
 80802f6:	440a      	add	r2, r1
 80802f8:	60a2      	str	r2, [r4, #8]

  currentCountsWriteNeeded = true;                                    // Write updated values to FRAM
 80802fa:	4a0b      	ldr	r2, [pc, #44]	; (8080328 <_Z11recordCountv+0x8c>)
 80802fc:	2101      	movs	r1, #1
 80802fe:	7011      	strb	r1, [r2, #0]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8080300:	682a      	ldr	r2, [r5, #0]
 8080302:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
 8080306:	f8b2 20c8 	ldrh.w	r2, [r2, #200]	; 0xc8
 808030a:	834a      	strh	r2, [r1, #26]
  pinResetFast(blueLED);                                              // Turn off the blue LED
  sensorDetect = false;                                               // Reset the flag
 808030c:	4a07      	ldr	r2, [pc, #28]	; (808032c <_Z11recordCountv+0x90>)
 808030e:	7013      	strb	r3, [r2, #0]
 8080310:	bd70      	pop	{r4, r5, r6, pc}
 8080312:	bf00      	nop
 8080314:	20000218 	.word	0x20000218
 8080318:	200001e4 	.word	0x200001e4
 808031c:	20000270 	.word	0x20000270
 8080320:	200001e0 	.word	0x200001e0
 8080324:	200001dc 	.word	0x200001dc
 8080328:	20000268 	.word	0x20000268
 808032c:	200001a8 	.word	0x200001a8

08080330 <_Z16recordHourlyDatav>:
  writeToDataLog();
  */
  // End diagnostic code
}

void recordHourlyData() {
 8080330:	b510      	push	{r4, lr}
  if (sysStatus.stateOfCharge > hourlies.maxStateOfCharge) hourlies.maxStateOfCharge = sysStatus.stateOfCharge;
 8080332:	4b10      	ldr	r3, [pc, #64]	; (8080374 <_Z16recordHourlyDatav+0x44>)
 8080334:	4c10      	ldr	r4, [pc, #64]	; (8080378 <_Z16recordHourlyDatav+0x48>)
 8080336:	689b      	ldr	r3, [r3, #8]
 8080338:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 808033a:	4293      	cmp	r3, r2
  if (sysStatus.stateOfCharge < hourlies.minStateOfCharge) hourlies.minStateOfCharge = sysStatus.stateOfCharge;
 808033c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  */
  // End diagnostic code
}

void recordHourlyData() {
  if (sysStatus.stateOfCharge > hourlies.maxStateOfCharge) hourlies.maxStateOfCharge = sysStatus.stateOfCharge;
 808033e:	bfc8      	it	gt
 8080340:	66e3      	strgt	r3, [r4, #108]	; 0x6c
  if (sysStatus.stateOfCharge < hourlies.minStateOfCharge) hourlies.minStateOfCharge = sysStatus.stateOfCharge;
 8080342:	4293      	cmp	r3, r2
 8080344:	bfbc      	itt	lt
 8080346:	4a0c      	ldrlt	r2, [pc, #48]	; (8080378 <_Z16recordHourlyDatav+0x48>)
 8080348:	6693      	strlt	r3, [r2, #104]	; 0x68
  hourlies.hourlyCount[Time.hour()] = current.hourlyCount;
 808034a:	f003 f97b 	bl	8083644 <_ZN9TimeClass4hourEv>
 808034e:	4b0b      	ldr	r3, [pc, #44]	; (808037c <_Z16recordHourlyDatav+0x4c>)
 8080350:	3002      	adds	r0, #2
 8080352:	681a      	ldr	r2, [r3, #0]
 8080354:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
  current.hourlyCount = 0;                                            // reset each hour
 8080358:	2200      	movs	r2, #0
 808035a:	601a      	str	r2, [r3, #0]
  hourlies.dailyCount = current.dailyCount;
 808035c:	689b      	ldr	r3, [r3, #8]
  hourliesCountsWriteNeeded = true;
 808035e:	4a08      	ldr	r2, [pc, #32]	; (8080380 <_Z16recordHourlyDatav+0x50>)
void recordHourlyData() {
  if (sysStatus.stateOfCharge > hourlies.maxStateOfCharge) hourlies.maxStateOfCharge = sysStatus.stateOfCharge;
  if (sysStatus.stateOfCharge < hourlies.minStateOfCharge) hourlies.minStateOfCharge = sysStatus.stateOfCharge;
  hourlies.hourlyCount[Time.hour()] = current.hourlyCount;
  current.hourlyCount = 0;                                            // reset each hour
  hourlies.dailyCount = current.dailyCount;
 8080360:	6063      	str	r3, [r4, #4]
  hourliesCountsWriteNeeded = true;
 8080362:	2301      	movs	r3, #1
 8080364:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
 8080366:	4a07      	ldr	r2, [pc, #28]	; (8080384 <_Z16recordHourlyDatav+0x54>)
 8080368:	7013      	strb	r3, [r2, #0]
  currentHourlyPeriod = Time.hour();
 808036a:	f003 f96b 	bl	8083644 <_ZN9TimeClass4hourEv>
 808036e:	4b06      	ldr	r3, [pc, #24]	; (8080388 <_Z16recordHourlyDatav+0x58>)
 8080370:	6018      	str	r0, [r3, #0]
 8080372:	bd10      	pop	{r4, pc}
 8080374:	200002a0 	.word	0x200002a0
 8080378:	20000138 	.word	0x20000138
 808037c:	20000270 	.word	0x20000270
 8080380:	200001d7 	.word	0x200001d7
 8080384:	20000268 	.word	0x20000268
 8080388:	200001e8 	.word	0x200001e8

0808038c <_Z14writeToDataLogv>:
}

void writeToDataLog() {
 808038c:	b570      	push	{r4, r5, r6, lr}
  char data[256];
  snprintf(data, sizeof(data), "%i/%i, %i, %i, %i", Time.month(hourlies.startingTimeStamp), Time.day(hourlies.startingTimeStamp), hourlies.dailyCount, hourlies.maxStateOfCharge, hourlies.minStateOfCharge);
 808038e:	4c1a      	ldr	r4, [pc, #104]	; (80803f8 <_Z14writeToDataLogv+0x6c>)
  hourliesCountsWriteNeeded = true;
  currentCountsWriteNeeded = true;
  currentHourlyPeriod = Time.hour();
}

void writeToDataLog() {
 8080390:	b0c8      	sub	sp, #288	; 0x120
  char data[256];
  snprintf(data, sizeof(data), "%i/%i, %i, %i, %i", Time.month(hourlies.startingTimeStamp), Time.day(hourlies.startingTimeStamp), hourlies.dailyCount, hourlies.maxStateOfCharge, hourlies.minStateOfCharge);
 8080392:	6820      	ldr	r0, [r4, #0]
 8080394:	f003 f8ae 	bl	80834f4 <_ZN9TimeClass5monthEl>
 8080398:	4625      	mov	r5, r4
 808039a:	4606      	mov	r6, r0
 808039c:	6820      	ldr	r0, [r4, #0]
 808039e:	f003 f897 	bl	80834d0 <_ZN9TimeClass3dayEl>
 80803a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80803a4:	4a15      	ldr	r2, [pc, #84]	; (80803fc <_Z14writeToDataLogv+0x70>)
 80803a6:	9303      	str	r3, [sp, #12]
 80803a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80803aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80803ae:	9302      	str	r3, [sp, #8]
 80803b0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80803b4:	3464      	adds	r4, #100	; 0x64
 80803b6:	e88d 0009 	stmia.w	sp, {r0, r3}
 80803ba:	4633      	mov	r3, r6
 80803bc:	a808      	add	r0, sp, #32
 80803be:	f001 ff51 	bl	8082264 <snprintf>
  for (int i=0; i <24; i++) {
    strcat(data, ", ");
 80803c2:	490f      	ldr	r1, [pc, #60]	; (8080400 <_Z14writeToDataLogv+0x74>)
 80803c4:	a808      	add	r0, sp, #32
 80803c6:	f004 ff23 	bl	8085210 <strcat>
    strcat(data, String(hourlies.hourlyCount[i]));
 80803ca:	220a      	movs	r2, #10
 80803cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80803d0:	a804      	add	r0, sp, #16
 80803d2:	f002 ff0a 	bl	80831ea <_ZN6StringC1Eih>
 80803d6:	9904      	ldr	r1, [sp, #16]
 80803d8:	a808      	add	r0, sp, #32
 80803da:	f004 ff19 	bl	8085210 <strcat>
 80803de:	a804      	add	r0, sp, #16
 80803e0:	f002 fe7e 	bl	80830e0 <_ZN6StringD1Ev>
}

void writeToDataLog() {
  char data[256];
  snprintf(data, sizeof(data), "%i/%i, %i, %i, %i", Time.month(hourlies.startingTimeStamp), Time.day(hourlies.startingTimeStamp), hourlies.dailyCount, hourlies.maxStateOfCharge, hourlies.minStateOfCharge);
  for (int i=0; i <24; i++) {
 80803e4:	42a5      	cmp	r5, r4
 80803e6:	d1ec      	bne.n	80803c2 <_Z14writeToDataLogv+0x36>
    strcat(data, ", ");
    strcat(data, String(hourlies.hourlyCount[i]));
  }
  Serial1.println(data);
 80803e8:	f003 f9c4 	bl	8083774 <_Z22__fetch_global_Serial1v>
 80803ec:	a908      	add	r1, sp, #32
 80803ee:	f002 fe28 	bl	8083042 <_ZN5Print7printlnEPKc>
}
 80803f2:	b048      	add	sp, #288	; 0x120
 80803f4:	bd70      	pop	{r4, r5, r6, pc}
 80803f6:	bf00      	nop
 80803f8:	20000138 	.word	0x20000138
 80803fc:	08085b8c 	.word	0x08085b8c
 8080400:	08085b9e 	.word	0x08085b9e

08080404 <_Z17initializeDataLogv>:

void initializeDataLog() {
 8080404:	b500      	push	{lr}
 8080406:	b0c1      	sub	sp, #260	; 0x104
  char data[256];
  snprintf(data, sizeof(data), "Time, Daily, Max, Min, 12AM, 1AM, 2AM, 3AM, 4AM, 5AM, 6AM, 7AM, 8AM, 9AM, 10AM, 11AM, 12PM, 1PM, 2PM, 3PM, 4PM, 5PM, 6PM, 7PM, 8PM, 9PM, 10PM, 11PM");
 8080408:	4907      	ldr	r1, [pc, #28]	; (8080428 <_Z17initializeDataLogv+0x24>)
 808040a:	4668      	mov	r0, sp
 808040c:	f004 ff19 	bl	8085242 <strcpy>
  Serial1.println(data);
 8080410:	f003 f9b0 	bl	8083774 <_Z22__fetch_global_Serial1v>
 8080414:	4669      	mov	r1, sp
 8080416:	f002 fe14 	bl	8083042 <_ZN5Print7printlnEPKc>
  delay(50);
 808041a:	2032      	movs	r0, #50	; 0x32
 808041c:	f001 ff3a 	bl	8082294 <delay>
}
 8080420:	b041      	add	sp, #260	; 0x104
 8080422:	f85d fb04 	ldr.w	pc, [sp], #4
 8080426:	bf00      	nop
 8080428:	08085ba1 	.word	0x08085ba1

0808042c <_Z17getSignalStrengthv>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
 808042c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 808042e:	4d17      	ldr	r5, [pc, #92]	; (808048c <_Z17getSignalStrengthv+0x60>)
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
 8080430:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 8080432:	ac04      	add	r4, sp, #16
 8080434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808043a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808043c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080440:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080444:	4912      	ldr	r1, [pc, #72]	; (8080490 <_Z17getSignalStrengthv+0x64>)
 8080446:	a80e      	add	r0, sp, #56	; 0x38
 8080448:	f001 ff92 	bl	8082370 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 808044c:	a80e      	add	r0, sp, #56	; 0x38
 808044e:	f001 ffe2 	bl	8082416 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080452:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080454:	a80e      	add	r0, sp, #56	; 0x38
 8080456:	f002 f825 	bl	80824a4 <_ZNK14CellularSignal11getStrengthEv>
 808045a:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 808045c:	a80e      	add	r0, sp, #56	; 0x38
 808045e:	f002 f809 	bl	8082474 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080462:	ab18      	add	r3, sp, #96	; 0x60
 8080464:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8080468:	f003 ff7c 	bl	8084364 <__aeabi_f2d>
 808046c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080470:	4628      	mov	r0, r5
 8080472:	f003 ff77 	bl	8084364 <__aeabi_f2d>
 8080476:	e9cd 0100 	strd	r0, r1, [sp]
 808047a:	4a06      	ldr	r2, [pc, #24]	; (8080494 <_Z17getSignalStrengthv+0x68>)
 808047c:	f854 3c50 	ldr.w	r3, [r4, #-80]
 8080480:	2140      	movs	r1, #64	; 0x40
 8080482:	4805      	ldr	r0, [pc, #20]	; (8080498 <_Z17getSignalStrengthv+0x6c>)
 8080484:	f001 feee 	bl	8082264 <snprintf>
}
 8080488:	b019      	add	sp, #100	; 0x64
 808048a:	bd30      	pop	{r4, r5, pc}
 808048c:	08085b44 	.word	0x08085b44
 8080490:	200002d0 	.word	0x200002d0
 8080494:	08085c35 	.word	0x08085c35
 8080498:	20000220 	.word	0x20000220
 808049c:	00000000 	.word	0x00000000

080804a0 <_Z14getTemperaturev>:
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

}

int getTemperature()
{
 80804a0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
 80804a2:	200a      	movs	r0, #10
 80804a4:	f003 fbed 	bl	8083c82 <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
 80804a8:	f003 ff4a 	bl	8084340 <__aeabi_i2d>
 80804ac:	a316      	add	r3, pc, #88	; (adr r3, 8080508 <_Z14getTemperaturev+0x68>)
 80804ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804b2:	f003 ffab 	bl	808440c <__aeabi_dmul>
 80804b6:	f004 f9e3 	bl	8084880 <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    // converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);       // now convert to Fahrenheit
 80804ba:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80804be:	f004 fb3d 	bl	8084b3c <__aeabi_fmul>
 80804c2:	f003 ff4f 	bl	8084364 <__aeabi_f2d>
 80804c6:	2200      	movs	r2, #0
 80804c8:	4b11      	ldr	r3, [pc, #68]	; (8080510 <_Z14getTemperaturev+0x70>)
 80804ca:	f003 fdeb 	bl	80840a4 <__aeabi_dsub>
 80804ce:	2200      	movs	r2, #0
 80804d0:	4b10      	ldr	r3, [pc, #64]	; (8080514 <_Z14getTemperaturev+0x74>)
 80804d2:	f003 ff9b 	bl	808440c <__aeabi_dmul>
 80804d6:	f004 f9ab 	bl	8084830 <__aeabi_d2iz>
 80804da:	f003 ff31 	bl	8084340 <__aeabi_i2d>
 80804de:	2200      	movs	r2, #0
 80804e0:	4b0d      	ldr	r3, [pc, #52]	; (8080518 <_Z14getTemperaturev+0x78>)
 80804e2:	f003 ff93 	bl	808440c <__aeabi_dmul>
 80804e6:	2200      	movs	r2, #0
 80804e8:	4b0c      	ldr	r3, [pc, #48]	; (808051c <_Z14getTemperaturev+0x7c>)
 80804ea:	f004 f8b9 	bl	8084660 <__aeabi_ddiv>
 80804ee:	2200      	movs	r2, #0
 80804f0:	4b0b      	ldr	r3, [pc, #44]	; (8080520 <_Z14getTemperaturev+0x80>)
 80804f2:	f003 fdd9 	bl	80840a8 <__adddf3>
 80804f6:	f004 f99b 	bl	8084830 <__aeabi_d2iz>
 80804fa:	4b0a      	ldr	r3, [pc, #40]	; (8080524 <_Z14getTemperaturev+0x84>)
  currentCountsWriteNeeded=true;
 80804fc:	2201      	movs	r2, #1
{
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    // converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);       // now convert to Fahrenheit
 80804fe:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
 8080500:	4b09      	ldr	r3, [pc, #36]	; (8080528 <_Z14getTemperaturev+0x88>)
 8080502:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
 8080504:	bd08      	pop	{r3, pc}
 8080506:	bf00      	nop
 8080508:	66666666 	.word	0x66666666
 808050c:	400a6666 	.word	0x400a6666
 8080510:	3fe00000 	.word	0x3fe00000
 8080514:	40590000 	.word	0x40590000
 8080518:	40220000 	.word	0x40220000
 808051c:	40140000 	.word	0x40140000
 8080520:	40400000 	.word	0x40400000
 8080524:	20000270 	.word	0x20000270
 8080528:	20000268 	.word	0x20000268

0808052c <_Z11petWatchdogv>:
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808052c:	4b07      	ldr	r3, [pc, #28]	; (808054c <_Z11petWatchdogv+0x20>)
 808052e:	681b      	ldr	r3, [r3, #0]
 8080530:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8080534:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 8080538:	8311      	strh	r1, [r2, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808053a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 808053e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8080542:	8353      	strh	r3, [r2, #26]

void petWatchdog()
{
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
 8080544:	4b02      	ldr	r3, [pc, #8]	; (8080550 <_Z11petWatchdogv+0x24>)
 8080546:	2200      	movs	r2, #0
 8080548:	701a      	strb	r2, [r3, #0]
 808054a:	4770      	bx	lr
 808054c:	20000218 	.word	0x20000218
 8080550:	200001ec 	.word	0x200001ec

08080554 <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
 8080554:	b513      	push	{r0, r1, r4, lr}
 8080556:	4604      	mov	r4, r0
  PMIC pmic(true);
 8080558:	2101      	movs	r1, #1
 808055a:	a801      	add	r0, sp, #4
 808055c:	f002 fc9f 	bl	8082e9e <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
 8080560:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
 8080562:	b11c      	cbz	r4, 808056c <_Z14enableChargingb+0x18>
    pmic.enableCharging();
 8080564:	f002 fd36 	bl	8082fd4 <_ZN4PMIC14enableChargingEv>
    return TRUE;
 8080568:	2401      	movs	r4, #1
 808056a:	e001      	b.n	8080570 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
 808056c:	f002 fd02 	bl	8082f74 <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
 8080570:	a801      	add	r0, sp, #4
 8080572:	f002 fca3 	bl	8082ebc <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
 8080576:	4620      	mov	r0, r4
 8080578:	b002      	add	sp, #8
 808057a:	bd10      	pop	{r4, pc}

0808057c <_Z14setPowerConfigv>:
  watchdogFlag = false;
}


// Power Management function
int setPowerConfig() {
 808057c:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 808057e:	2420      	movs	r4, #32
 8080580:	b090      	sub	sp, #64	; 0x40
 8080582:	4622      	mov	r2, r4
 8080584:	2100      	movs	r1, #0
 8080586:	4668      	mov	r0, sp
 8080588:	f004 fe11 	bl	80851ae <memset>
 808058c:	4622      	mov	r2, r4
 808058e:	2100      	movs	r1, #0
 8080590:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
 8080594:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 8080598:	f004 fe09 	bl	80851ae <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
 808059c:	2100      	movs	r1, #0
 808059e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
 80805a2:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 80805a6:	f001 fd81 	bl	80820ac <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
 80805aa:	4b1a      	ldr	r3, [pc, #104]	; (8080614 <_Z14setPowerConfigv+0x98>)
 80805ac:	7959      	ldrb	r1, [r3, #5]
 80805ae:	9b00      	ldr	r3, [sp, #0]
 80805b0:	b1a1      	cbz	r1, 80805dc <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 80805b2:	f240 2226 	movw	r2, #550	; 0x226
 80805b6:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80805ba:	f241 32d8 	movw	r2, #5080	; 0x13d8
 80805be:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 80805c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80805c6:	f8ad 200a 	strh.w	r2, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80805ca:	f241 0270 	movw	r2, #4208	; 0x1070
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80805ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80805d2:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80805d6:	9300      	str	r3, [sp, #0]
 80805d8:	2100      	movs	r1, #0
 80805da:	e010      	b.n	80805fe <_Z14setPowerConfigv+0x82>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 80805dc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80805e0:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80805e4:	f241 0070 	movw	r0, #4208	; 0x1070
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 80805e8:	f8ad 200a 	strh.w	r2, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80805ec:	f241 0210 	movw	r2, #4112	; 0x1010
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80805f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80805f4:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80805f8:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80805fc:	9300      	str	r3, [sp, #0]
 80805fe:	4668      	mov	r0, sp
 8080600:	f001 fd54 	bl	80820ac <system_power_management_set_config>
 8080604:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                  // This is the default value for the Boron
        .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
 8080606:	2001      	movs	r0, #1
 8080608:	f7ff ffa4 	bl	8080554 <_Z14enableChargingb>
    return res;
  }
}
 808060c:	4620      	mov	r0, r4
 808060e:	b010      	add	sp, #64	; 0x40
 8080610:	bd10      	pop	{r4, pc}
 8080612:	bf00      	nop
 8080614:	200002a0 	.word	0x200002a0

08080618 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
 8080618:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808061c:	4820      	ldr	r0, [pc, #128]	; (80806a0 <_Z17connectToParticlev+0x88>)
 808061e:	2300      	movs	r3, #0
 8080620:	461a      	mov	r2, r3
 8080622:	4619      	mov	r1, r3
 8080624:	6840      	ldr	r0, [r0, #4]
 8080626:	f001 fdc5 	bl	80821b4 <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808062a:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808062e:	f001 fd69 	bl	8082104 <spark_cloud_flag_connect>
 8080632:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080636:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080638:	2000      	movs	r0, #0
 808063a:	f001 fb81 	bl	8081d40 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808063e:	4680      	mov	r8, r0
 8080640:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080644:	2000      	movs	r0, #0
 8080646:	f001 fb7b 	bl	8081d40 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808064a:	ebb0 0008 	subs.w	r0, r0, r8
 808064e:	eb61 0109 	sbc.w	r1, r1, r9
 8080652:	428f      	cmp	r7, r1
 8080654:	bf08      	it	eq
 8080656:	4286      	cmpeq	r6, r0
 8080658:	d305      	bcc.n	8080666 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808065a:	f001 fd63 	bl	8082124 <spark_cloud_flag_connected>
 808065e:	b910      	cbnz	r0, 8080666 <_Z17connectToParticlev+0x4e>
            spark_process();
 8080660:	f001 fd48 	bl	80820f4 <spark_process>
 8080664:	e7ee      	b.n	8080644 <_Z17connectToParticlev+0x2c>
 8080666:	f001 fd5d 	bl	8082124 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 808066a:	b148      	cbz	r0, 8080680 <_Z17connectToParticlev+0x68>
 808066c:	f001 fd5a 	bl	8082124 <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
 8080670:	b1a0      	cbz	r0, 808069c <_Z17connectToParticlev+0x84>
    sysStatus.connectedStatus = true;
 8080672:	4a0c      	ldr	r2, [pc, #48]	; (80806a4 <_Z17connectToParticlev+0x8c>)
 8080674:	2301      	movs	r3, #1
 8080676:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
 8080678:	4a0b      	ldr	r2, [pc, #44]	; (80806a8 <_Z17connectToParticlev+0x90>)
 808067a:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
 808067c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
 8080680:	4b0a      	ldr	r3, [pc, #40]	; (80806ac <_Z17connectToParticlev+0x94>)
 8080682:	781b      	ldrb	r3, [r3, #0]
 8080684:	b10b      	cbz	r3, 808068a <_Z17connectToParticlev+0x72>
 8080686:	f7ff fe09 	bl	808029c <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808068a:	f001 fb41 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808068e:	4b08      	ldr	r3, [pc, #32]	; (80806b0 <_Z17connectToParticlev+0x98>)
 8080690:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080692:	f001 fd2f 	bl	80820f4 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080696:	3c01      	subs	r4, #1
 8080698:	d0e8      	beq.n	808066c <_Z17connectToParticlev+0x54>
 808069a:	e7cd      	b.n	8080638 <_Z17connectToParticlev+0x20>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
 808069c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80806a0:	200002d0 	.word	0x200002d0
 80806a4:	200002a0 	.word	0x200002a0
 80806a8:	200001d8 	.word	0x200001d8
 80806ac:	200001a8 	.word	0x200001a8
 80806b0:	2000088c 	.word	0x2000088c

080806b4 <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 80806b4:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80806b6:	f001 fd35 	bl	8082124 <spark_cloud_flag_connected>
  return !Particle.connected();
 80806ba:	f080 0001 	eor.w	r0, r0, #1
}
 80806be:	b2c0      	uxtb	r0, r0
 80806c0:	bd08      	pop	{r3, pc}
	...

080806c4 <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 80806c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 80806c6:	f001 fd25 	bl	8082114 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80806ca:	2000      	movs	r0, #0
 80806cc:	f001 fb38 	bl	8081d40 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80806d0:	f643 2697 	movw	r6, #14999	; 0x3a97
 80806d4:	4604      	mov	r4, r0
 80806d6:	2500      	movs	r5, #0
 80806d8:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80806da:	2000      	movs	r0, #0
 80806dc:	f001 fb30 	bl	8081d40 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80806e0:	1b00      	subs	r0, r0, r4
 80806e2:	eb61 0105 	sbc.w	r1, r1, r5
 80806e6:	428f      	cmp	r7, r1
 80806e8:	bf08      	it	eq
 80806ea:	4286      	cmpeq	r6, r0
 80806ec:	d305      	bcc.n	80806fa <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
 80806ee:	f7ff ffe1 	bl	80806b4 <_Z12notConnectedv>
 80806f2:	b910      	cbnz	r0, 80806fa <_Z22disconnectFromParticlev+0x36>
            spark_process();
 80806f4:	f001 fcfe 	bl	80820f4 <spark_process>
 80806f8:	e7ef      	b.n	80806da <_Z22disconnectFromParticlev+0x16>
 80806fa:	f7ff ffdb 	bl	80806b4 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80806fe:	4809      	ldr	r0, [pc, #36]	; (8080724 <_Z22disconnectFromParticlev+0x60>)
 8080700:	2300      	movs	r3, #0
 8080702:	4619      	mov	r1, r3
 8080704:	461a      	mov	r2, r3
 8080706:	6840      	ldr	r0, [r0, #4]
 8080708:	f001 fd5c 	bl	80821c4 <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
 808070c:	4b06      	ldr	r3, [pc, #24]	; (8080728 <_Z22disconnectFromParticlev+0x64>)
 808070e:	2200      	movs	r2, #0
 8080710:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
 8080712:	4b06      	ldr	r3, [pc, #24]	; (808072c <_Z22disconnectFromParticlev+0x68>)
 8080714:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
 8080716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
 808071a:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
 808071c:	f001 fdba 	bl	8082294 <delay>
  return true;
}
 8080720:	4620      	mov	r0, r4
 8080722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080724:	200002d0 	.word	0x200002d0
 8080728:	200002a0 	.word	0x200002a0
 808072c:	200001d8 	.word	0x200001d8

08080730 <_Z14fullModemResetv>:
  oldState = state;
  if(Particle.connected()) Particle.publish("State Transition",stateTransitionString, PRIVATE);
  Serial.println(stateTransitionString);
}

void fullModemReset() {                                                 // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080732:	f001 fcef 	bl	8082114 <spark_cloud_flag_disconnect>
 8080736:	f001 faeb 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808073a:	f643 2597 	movw	r5, #14999	; 0x3a97
 808073e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080740:	f001 fcf0 	bl	8082124 <spark_cloud_flag_connected>
 8080744:	b140      	cbz	r0, 8080758 <_Z14fullModemResetv+0x28>
 8080746:	f001 fae3 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
 808074a:	1b00      	subs	r0, r0, r4
 808074c:	42a8      	cmp	r0, r5
 808074e:	d803      	bhi.n	8080758 <_Z14fullModemResetv+0x28>
		delay(100);
 8080750:	2064      	movs	r0, #100	; 0x64
 8080752:	f001 fd9f 	bl	8082294 <delay>
}

void fullModemReset() {                                                 // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080756:	e7f3      	b.n	8080740 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080758:	2100      	movs	r1, #0
 808075a:	4b09      	ldr	r3, [pc, #36]	; (8080780 <_Z14fullModemResetv+0x50>)
 808075c:	f247 5230 	movw	r2, #30000	; 0x7530
 8080760:	4608      	mov	r0, r1
 8080762:	f001 fa95 	bl	8081c90 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808076a:	f001 fd93 	bl	8082294 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808076e:	4b05      	ldr	r3, [pc, #20]	; (8080784 <_Z14fullModemResetv+0x54>)
 8080770:	220a      	movs	r2, #10
 8080772:	681b      	ldr	r3, [r3, #0]
 8080774:	2101      	movs	r1, #1
 8080776:	4668      	mov	r0, sp
 8080778:	f002 fe22 	bl	80833c0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 808077c:	b003      	add	sp, #12
 808077e:	bd30      	pop	{r4, r5, pc}
 8080780:	08085c4e 	.word	0x08085c4e
 8080784:	20000208 	.word	0x20000208

08080788 <_Z8isDSTusav>:
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
 8080788:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 808078a:	f002 ff6f 	bl	808366c <_ZN9TimeClass3dayEv>
 808078e:	4605      	mov	r5, r0
  int month = Time.month();
 8080790:	f002 ff7d 	bl	808368e <_ZN9TimeClass5monthEv>
 8080794:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080796:	f002 ff73 	bl	8083680 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 808079a:	1f23      	subs	r3, r4, #4
 808079c:	2b06      	cmp	r3, #6
 808079e:	d90e      	bls.n	80807be <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 80807a0:	1ee3      	subs	r3, r4, #3
 80807a2:	2b08      	cmp	r3, #8
 80807a4:	d80d      	bhi.n	80807c2 <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
 80807a6:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 80807a8:	1a2d      	subs	r5, r5, r0
 80807aa:	d501      	bpl.n	80807b0 <_Z8isDSTusav+0x28>
 80807ac:	2c0b      	cmp	r4, #11
 80807ae:	e002      	b.n	80807b6 <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 80807b0:	2d07      	cmp	r5, #7
 80807b2:	dd06      	ble.n	80807c2 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 80807b4:	2c03      	cmp	r4, #3
 80807b6:	bf14      	ite	ne
 80807b8:	2000      	movne	r0, #0
 80807ba:	2001      	moveq	r0, #1
 80807bc:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
 80807be:	2001      	movs	r0, #1
 80807c0:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
 80807c2:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 80807c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080807c8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 80807c8:	b530      	push	{r4, r5, lr}
 80807ca:	b085      	sub	sp, #20
 80807cc:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
 80807ce:	2200      	movs	r2, #0
 80807d0:	a904      	add	r1, sp, #16
 80807d2:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
 80807d6:	f001 fc0b 	bl	8081ff0 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 80807da:	b9a8      	cbnz	r0, 8080808 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
 80807dc:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
 80807de:	b10c      	cbz	r4, 80807e4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 80807e0:	6923      	ldr	r3, [r4, #16]
 80807e2:	b923      	cbnz	r3, 80807ee <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
 80807e4:	4a09      	ldr	r2, [pc, #36]	; (808080c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
 80807e6:	2100      	movs	r1, #0
 80807e8:	200a      	movs	r0, #10
 80807ea:	f001 fbe9 	bl	8081fc0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 80807ee:	2300      	movs	r3, #0
 80807f0:	9301      	str	r3, [sp, #4]
 80807f2:	230c      	movs	r3, #12
 80807f4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80807f8:	2304      	movs	r3, #4
 80807fa:	9303      	str	r3, [sp, #12]
 80807fc:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 80807fe:	6923      	ldr	r3, [r4, #16]
 8080800:	aa01      	add	r2, sp, #4
 8080802:	2101      	movs	r1, #1
 8080804:	4620      	mov	r0, r4
 8080806:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
 8080808:	b005      	add	sp, #20
 808080a:	bd30      	pop	{r4, r5, pc}
 808080c:	08081d01 	.word	0x08081d01

08080810 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
 8080810:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
 8080812:	4d0e      	ldr	r5, [pc, #56]	; (808084c <_Z17getBatteryContextv+0x3c>)
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
 8080814:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
 8080816:	ac01      	add	r4, sp, #4
 8080818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808081c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8080820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 8080824:	4669      	mov	r1, sp
 8080826:	2007      	movs	r0, #7
 8080828:	f7ff ffce 	bl	80807c8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
 808082c:	2800      	cmp	r0, #0
        return val;
 808082e:	bfa8      	it	ge
 8080830:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
 8080832:	ab08      	add	r3, sp, #32
 8080834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8080838:	f850 3c1c 	ldr.w	r3, [r0, #-28]
 808083c:	4a04      	ldr	r2, [pc, #16]	; (8080850 <_Z17getBatteryContextv+0x40>)
 808083e:	2110      	movs	r1, #16
 8080840:	4804      	ldr	r0, [pc, #16]	; (8080854 <_Z17getBatteryContextv+0x44>)
 8080842:	f001 fd0f 	bl	8082264 <snprintf>

}
 8080846:	b009      	add	sp, #36	; 0x24
 8080848:	bd30      	pop	{r4, r5, pc}
 808084a:	bf00      	nop
 808084c:	08085b6c 	.word	0x08085b6c
 8080850:	08085e69 	.word	0x08085e69
 8080854:	200001c7 	.word	0x200001c7

08080858 <_Z16takeMeasurementsv>:
}


// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
 8080858:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808085a:	4b19      	ldr	r3, [pc, #100]	; (80808c0 <_Z16takeMeasurementsv+0x68>)
 808085c:	2200      	movs	r2, #0
 808085e:	4611      	mov	r1, r2
 8080860:	6858      	ldr	r0, [r3, #4]
 8080862:	f001 fc9f 	bl	80821a4 <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 8080866:	b108      	cbz	r0, 808086c <_Z16takeMeasurementsv+0x14>
 8080868:	f7ff fde0 	bl	808042c <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
 808086c:	f7ff fe18 	bl	80804a0 <_Z14getTemperaturev>
  getBatteryContext();                                                // What is the battery up to?
 8080870:	f7ff ffce 	bl	8080810 <_Z17getBatteryContextv>
 8080874:	a901      	add	r1, sp, #4
 8080876:	2003      	movs	r0, #3
 8080878:	f7ff ffa6 	bl	80807c8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 808087c:	b9b0      	cbnz	r0, 80808ac <_Z16takeMeasurementsv+0x54>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
 808087e:	2106      	movs	r1, #6
 8080880:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8080884:	f7ff fcfc 	bl	8080280 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
 8080888:	4605      	mov	r5, r0
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 808088a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 808088e:	f004 f8fd 	bl	8084a8c <__aeabi_ui2f>
 8080892:	4629      	mov	r1, r5
 8080894:	4604      	mov	r4, r0
 8080896:	4628      	mov	r0, r5
 8080898:	f004 f848 	bl	808492c <__addsf3>
 808089c:	4601      	mov	r1, r0
 808089e:	f004 f845 	bl	808492c <__addsf3>
 80808a2:	4601      	mov	r1, r0
 80808a4:	4620      	mov	r0, r4
 80808a6:	f004 f9fd 	bl	8084ca4 <__aeabi_fdiv>
 80808aa:	e000      	b.n	80808ae <_Z16takeMeasurementsv+0x56>
            return -1.0f;
 80808ac:	4805      	ldr	r0, [pc, #20]	; (80808c4 <_Z16takeMeasurementsv+0x6c>)
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
 80808ae:	f004 fb0b 	bl	8084ec8 <__aeabi_f2iz>
 80808b2:	4b05      	ldr	r3, [pc, #20]	; (80808c8 <_Z16takeMeasurementsv+0x70>)
  systemStatusWriteNeeded=true;
 80808b4:	2201      	movs	r2, #1
void takeMeasurements()
{
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  getTemperature();                                                   // Get Temperature at startup as well
  getBatteryContext();                                                // What is the battery up to?
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
 80808b6:	6098      	str	r0, [r3, #8]
  systemStatusWriteNeeded=true;
 80808b8:	4b04      	ldr	r3, [pc, #16]	; (80808cc <_Z16takeMeasurementsv+0x74>)
 80808ba:	701a      	strb	r2, [r3, #0]
}
 80808bc:	b003      	add	sp, #12
 80808be:	bd30      	pop	{r4, r5, pc}
 80808c0:	200002d0 	.word	0x200002d0
 80808c4:	bf800000 	.word	0xbf800000
 80808c8:	200002a0 	.word	0x200002a0
 80808cc:	200001d8 	.word	0x200001d8

080808d0 <_Z17checkSystemValuesv>:
  sysStatus.sensorType = 0;
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 80808d0:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80808d2:	4c2c      	ldr	r4, [pc, #176]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
 80808d4:	f7ff ffc0 	bl	8080858 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80808d8:	78a3      	ldrb	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
 80808da:	4d2a      	ldr	r5, [pc, #168]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80808dc:	2b01      	cmp	r3, #1
 80808de:	bf84      	itt	hi
 80808e0:	2300      	movhi	r3, #0
 80808e2:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
 80808e4:	78e3      	ldrb	r3, [r4, #3]
 80808e6:	2b01      	cmp	r3, #1
 80808e8:	d906      	bls.n	80808f8 <_Z17checkSystemValuesv+0x28>
 80808ea:	f001 fc1b 	bl	8082124 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
 80808ee:	b110      	cbz	r0, 80808f6 <_Z17checkSystemValuesv+0x26>
 80808f0:	2301      	movs	r3, #1
 80808f2:	70eb      	strb	r3, [r5, #3]
 80808f4:	e000      	b.n	80808f8 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
 80808f6:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.sensorType > 2) {
 80808f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80808fc:	2b02      	cmp	r3, #2
 80808fe:	d907      	bls.n	8080910 <_Z17checkSystemValuesv+0x40>
    sysStatus.sensorType = 0;
 8080900:	4b20      	ldr	r3, [pc, #128]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
 8080902:	2200      	movs	r2, #0
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080904:	4920      	ldr	r1, [pc, #128]	; (8080988 <_Z17checkSystemValuesv+0xb8>)
 8080906:	4821      	ldr	r0, [pc, #132]	; (808098c <_Z17checkSystemValuesv+0xbc>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.sensorType > 2) {
    sysStatus.sensorType = 0;
 8080908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 808090c:	f004 fc99 	bl	8085242 <strcpy>
  }
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 8080910:	68a2      	ldr	r2, [r4, #8]
 8080912:	4b1c      	ldr	r3, [pc, #112]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
 8080914:	2a1d      	cmp	r2, #29
 8080916:	bfd4      	ite	le
 8080918:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
 808091a:	2200      	movgt	r2, #0
 808091c:	71da      	strb	r2, [r3, #7]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 808091e:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 8080920:	6965      	ldr	r5, [r4, #20]
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
  }
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 8080922:	2bff      	cmp	r3, #255	; 0xff
 8080924:	bf82      	ittt	hi
 8080926:	4b17      	ldrhi	r3, [pc, #92]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
 8080928:	2200      	movhi	r2, #0
 808092a:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 808092c:	4918      	ldr	r1, [pc, #96]	; (8080990 <_Z17checkSystemValuesv+0xc0>)
 808092e:	4628      	mov	r0, r5
 8080930:	f004 faa2 	bl	8084e78 <__aeabi_fcmplt>
 8080934:	b920      	cbnz	r0, 8080940 <_Z17checkSystemValuesv+0x70>
 8080936:	4917      	ldr	r1, [pc, #92]	; (8080994 <_Z17checkSystemValuesv+0xc4>)
 8080938:	4628      	mov	r0, r5
 808093a:	f004 fabb 	bl	8084eb4 <__aeabi_fcmpgt>
 808093e:	b108      	cbz	r0, 8080944 <_Z17checkSystemValuesv+0x74>
 8080940:	4b15      	ldr	r3, [pc, #84]	; (8080998 <_Z17checkSystemValuesv+0xc8>)
 8080942:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 8080944:	69a5      	ldr	r5, [r4, #24]
 8080946:	2100      	movs	r1, #0
 8080948:	4628      	mov	r0, r5
 808094a:	f004 fa95 	bl	8084e78 <__aeabi_fcmplt>
 808094e:	b928      	cbnz	r0, 808095c <_Z17checkSystemValuesv+0x8c>
 8080950:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080954:	4628      	mov	r0, r5
 8080956:	f004 faad 	bl	8084eb4 <__aeabi_fcmpgt>
 808095a:	b110      	cbz	r0, 8080962 <_Z17checkSystemValuesv+0x92>
 808095c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8080960:	61a3      	str	r3, [r4, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
 8080962:	69e3      	ldr	r3, [r4, #28]
 8080964:	2b0c      	cmp	r3, #12
 8080966:	bf82      	ittt	hi
 8080968:	4b06      	ldrhi	r3, [pc, #24]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
 808096a:	2200      	movhi	r2, #0
 808096c:	61da      	strhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
 808096e:	6a23      	ldr	r3, [r4, #32]
 8080970:	3b0c      	subs	r3, #12
 8080972:	2b0c      	cmp	r3, #12
 8080974:	bf82      	ittt	hi
 8080976:	4b03      	ldrhi	r3, [pc, #12]	; (8080984 <_Z17checkSystemValuesv+0xb4>)
 8080978:	2218      	movhi	r2, #24
 808097a:	621a      	strhi	r2, [r3, #32]

  systemStatusWriteNeeded = true;
 808097c:	4b07      	ldr	r3, [pc, #28]	; (808099c <_Z17checkSystemValuesv+0xcc>)
 808097e:	2201      	movs	r2, #1
 8080980:	701a      	strb	r2, [r3, #0]
 8080982:	bd38      	pop	{r3, r4, r5, pc}
 8080984:	200002a0 	.word	0x200002a0
 8080988:	08085c5b 	.word	0x08085c5b
 808098c:	20000290 	.word	0x20000290
 8080990:	c1400000 	.word	0xc1400000
 8080994:	41400000 	.word	0x41400000
 8080998:	c0a00000 	.word	0xc0a00000
 808099c:	200001d8 	.word	0x200001d8

080809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80809a0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80809a2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80809a4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80809a6:	b17c      	cbz	r4, 80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80809a8:	6863      	ldr	r3, [r4, #4]
 80809aa:	3b01      	subs	r3, #1
 80809ac:	6063      	str	r3, [r4, #4]
 80809ae:	b95b      	cbnz	r3, 80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80809b0:	6823      	ldr	r3, [r4, #0]
 80809b2:	4620      	mov	r0, r4
 80809b4:	689b      	ldr	r3, [r3, #8]
 80809b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80809b8:	68a3      	ldr	r3, [r4, #8]
 80809ba:	3b01      	subs	r3, #1
 80809bc:	60a3      	str	r3, [r4, #8]
 80809be:	b91b      	cbnz	r3, 80809c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80809c0:	6823      	ldr	r3, [r4, #0]
 80809c2:	4620      	mov	r0, r4
 80809c4:	68db      	ldr	r3, [r3, #12]
 80809c6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80809c8:	4628      	mov	r0, r5
 80809ca:	bd38      	pop	{r3, r4, r5, pc}

080809cc <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
 80809cc:	b530      	push	{r4, r5, lr}
 80809ce:	491c      	ldr	r1, [pc, #112]	; (8080a40 <_Z11resetCounts6String+0x74>)
 80809d0:	b085      	sub	sp, #20
 80809d2:	f002 fc1d 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80809d6:	2800      	cmp	r0, #0
 80809d8:	d02f      	beq.n	8080a3a <_Z11resetCounts6String+0x6e>
 80809da:	f001 fba3 	bl	8082124 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("Reset","All counts reset",PRIVATE);
 80809de:	b160      	cbz	r0, 80809fa <_Z11resetCounts6String+0x2e>
 80809e0:	4b18      	ldr	r3, [pc, #96]	; (8080a44 <_Z11resetCounts6String+0x78>)
 80809e2:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80809e4:	781b      	ldrb	r3, [r3, #0]
 80809e6:	a802      	add	r0, sp, #8
 80809e8:	f88d 2000 	strb.w	r2, [sp]
 80809ec:	4916      	ldr	r1, [pc, #88]	; (8080a48 <_Z11resetCounts6String+0x7c>)
 80809ee:	4a17      	ldr	r2, [pc, #92]	; (8080a4c <_Z11resetCounts6String+0x80>)
 80809f0:	f7ff fbf4 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80809f4:	a803      	add	r0, sp, #12
 80809f6:	f7ff ffd3 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    current.dailyCount = 0;                              // Reset the counts in FRAM as well
 80809fa:	4d15      	ldr	r5, [pc, #84]	; (8080a50 <_Z11resetCounts6String+0x84>)
 80809fc:	2400      	movs	r4, #0
 80809fe:	60ac      	str	r4, [r5, #8]
    current.hourlyCount = 0;
 8080a00:	602c      	str	r4, [r5, #0]
    current.lastCountTime = Time.now();                      // Set the time context to the new day
 8080a02:	f002 fe18 	bl	8083636 <_ZN9TimeClass3nowEv>
    sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080a06:	4b13      	ldr	r3, [pc, #76]	; (8080a54 <_Z11resetCounts6String+0x88>)
  {
    if (Particle.connected()) Particle.publish("Reset","All counts reset",PRIVATE);

    current.dailyCount = 0;                              // Reset the counts in FRAM as well
    current.hourlyCount = 0;
    current.lastCountTime = Time.now();                      // Set the time context to the new day
 8080a08:	60e8      	str	r0, [r5, #12]
    sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080a0a:	611c      	str	r4, [r3, #16]
 8080a0c:	616c      	str	r4, [r5, #20]

    hourlies.startingTimeStamp = Time.now();
 8080a0e:	f002 fe12 	bl	8083636 <_ZN9TimeClass3nowEv>
 8080a12:	4b11      	ldr	r3, [pc, #68]	; (8080a58 <_Z11resetCounts6String+0x8c>)
    hourlies.maxStateOfCharge = 0;
    hourlies.minStateOfCharge = 100;
 8080a14:	2264      	movs	r2, #100	; 0x64
 8080a16:	669a      	str	r2, [r3, #104]	; 0x68
    hourlies.dailyCount = 0;
 8080a18:	461a      	mov	r2, r3
    current.dailyCount = 0;                              // Reset the counts in FRAM as well
    current.hourlyCount = 0;
    current.lastCountTime = Time.now();                      // Set the time context to the new day
    sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day

    hourlies.startingTimeStamp = Time.now();
 8080a1a:	6018      	str	r0, [r3, #0]
    hourlies.maxStateOfCharge = 0;
 8080a1c:	66dc      	str	r4, [r3, #108]	; 0x6c
    hourlies.minStateOfCharge = 100;
    hourlies.dailyCount = 0;
 8080a1e:	f842 4f04 	str.w	r4, [r2, #4]!
 8080a22:	3364      	adds	r3, #100	; 0x64
    for (int i=0; i < 24; i++) {
      hourlies.hourlyCount[i] = 0;
 8080a24:	f842 4f04 	str.w	r4, [r2, #4]!

    hourlies.startingTimeStamp = Time.now();
    hourlies.maxStateOfCharge = 0;
    hourlies.minStateOfCharge = 100;
    hourlies.dailyCount = 0;
    for (int i=0; i < 24; i++) {
 8080a28:	429a      	cmp	r2, r3
 8080a2a:	d1fb      	bne.n	8080a24 <_Z11resetCounts6String+0x58>
      hourlies.hourlyCount[i] = 0;
    }
    hourliesCountsWriteNeeded = true;
 8080a2c:	4b0b      	ldr	r3, [pc, #44]	; (8080a5c <_Z11resetCounts6String+0x90>)
 8080a2e:	2001      	movs	r0, #1
 8080a30:	7018      	strb	r0, [r3, #0]
    currentCountsWriteNeeded=true;
 8080a32:	4b0b      	ldr	r3, [pc, #44]	; (8080a60 <_Z11resetCounts6String+0x94>)
 8080a34:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded=true;
 8080a36:	4b0b      	ldr	r3, [pc, #44]	; (8080a64 <_Z11resetCounts6String+0x98>)
 8080a38:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
 8080a3a:	b005      	add	sp, #20
 8080a3c:	bd30      	pop	{r4, r5, pc}
 8080a3e:	bf00      	nop
 8080a40:	08086019 	.word	0x08086019
 8080a44:	200001c4 	.word	0x200001c4
 8080a48:	08085e8b 	.word	0x08085e8b
 8080a4c:	08085c6b 	.word	0x08085c6b
 8080a50:	20000270 	.word	0x20000270
 8080a54:	200002a0 	.word	0x200002a0
 8080a58:	20000138 	.word	0x20000138
 8080a5c:	200001d7 	.word	0x200001d7
 8080a60:	20000268 	.word	0x20000268
 8080a64:	200001d8 	.word	0x200001d8

08080a68 <_Z12hardResetNow6String>:

int hardResetNow(String command)   {                                    // Will perform a hard reset on the Electron
 8080a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080a6a:	490f      	ldr	r1, [pc, #60]	; (8080aa8 <_Z12hardResetNow6String+0x40>)
 8080a6c:	f002 fbd0 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080a70:	b1b0      	cbz	r0, 8080aa0 <_Z12hardResetNow6String+0x38>
 8080a72:	4a0e      	ldr	r2, [pc, #56]	; (8080aac <_Z12hardResetNow6String+0x44>)
 8080a74:	4b0e      	ldr	r3, [pc, #56]	; (8080ab0 <_Z12hardResetNow6String+0x48>)
 8080a76:	7812      	ldrb	r2, [r2, #0]
 8080a78:	781b      	ldrb	r3, [r3, #0]
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE, WITH_ACK);
 8080a7a:	490e      	ldr	r1, [pc, #56]	; (8080ab4 <_Z12hardResetNow6String+0x4c>)
 8080a7c:	f88d 2000 	strb.w	r2, [sp]
 8080a80:	a802      	add	r0, sp, #8
 8080a82:	4a0d      	ldr	r2, [pc, #52]	; (8080ab8 <_Z12hardResetNow6String+0x50>)
 8080a84:	f7ff fbaa 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080a88:	a803      	add	r0, sp, #12
 8080a8a:	f7ff ff89 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
 8080a8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080a92:	f001 fbff 	bl	8082294 <delay>
    digitalWrite(hardResetPin,HIGH);                                    // This will cut all power to the Electron AND the carrir board
 8080a96:	2004      	movs	r0, #4
 8080a98:	2101      	movs	r1, #1
 8080a9a:	f003 f8c6 	bl	8083c2a <digitalWrite>
 8080a9e:	2001      	movs	r0, #1
    return 1;                                                           // Unfortunately, this will never be sent
  }
  else return 0;
}
 8080aa0:	b005      	add	sp, #20
 8080aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8080aa6:	bf00      	nop
 8080aa8:	08086019 	.word	0x08086019
 8080aac:	200001c6 	.word	0x200001c6
 8080ab0:	200001c4 	.word	0x200001c4
 8080ab4:	08085e8b 	.word	0x08085e8b
 8080ab8:	08085c7c 	.word	0x08085c7c

08080abc <_Z19setDisconnectedMode6String>:

int setDisconnectedMode(String command) // Function to force sending data in current hour
{
 8080abc:	b530      	push	{r4, r5, lr}
 8080abe:	491c      	ldr	r1, [pc, #112]	; (8080b30 <_Z19setDisconnectedMode6String+0x74>)
 8080ac0:	b085      	sub	sp, #20
 8080ac2:	4604      	mov	r4, r0
 8080ac4:	f002 fba4 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080ac8:	4605      	mov	r5, r0
 8080aca:	b1b8      	cbz	r0, 8080afc <_Z19setDisconnectedMode6String+0x40>
  {
    sysStatus.disconnectedLogger = true;
 8080acc:	4b19      	ldr	r3, [pc, #100]	; (8080b34 <_Z19setDisconnectedMode6String+0x78>)
    sysStatus.connectedStatus = false;
 8080ace:	2200      	movs	r2, #0

int setDisconnectedMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    sysStatus.disconnectedLogger = true;
 8080ad0:	2401      	movs	r4, #1
 8080ad2:	705c      	strb	r4, [r3, #1]
    sysStatus.connectedStatus = false;
 8080ad4:	70da      	strb	r2, [r3, #3]
 8080ad6:	4b18      	ldr	r3, [pc, #96]	; (8080b38 <_Z19setDisconnectedMode6String+0x7c>)
    Particle.publish("Mode","Changing device to disconnected mode - User / Reset to recover",PRIVATE);
 8080ad8:	4918      	ldr	r1, [pc, #96]	; (8080b3c <_Z19setDisconnectedMode6String+0x80>)
 8080ada:	781b      	ldrb	r3, [r3, #0]
 8080adc:	a802      	add	r0, sp, #8
 8080ade:	f88d 2000 	strb.w	r2, [sp]
 8080ae2:	4a17      	ldr	r2, [pc, #92]	; (8080b40 <_Z19setDisconnectedMode6String+0x84>)
 8080ae4:	f7ff fb7a 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080ae8:	a803      	add	r0, sp, #12
 8080aea:	f7ff ff59 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay (10000);
 8080aee:	f242 7010 	movw	r0, #10000	; 0x2710
 8080af2:	f001 fbcf 	bl	8082294 <delay>
    disconnectFromParticle();
 8080af6:	f7ff fde5 	bl	80806c4 <_Z22disconnectFromParticlev>
 8080afa:	e016      	b.n	8080b2a <_Z19setDisconnectedMode6String+0x6e>
 8080afc:	4911      	ldr	r1, [pc, #68]	; (8080b44 <_Z19setDisconnectedMode6String+0x88>)
 8080afe:	4620      	mov	r0, r4
 8080b00:	f002 fb86 	bl	8083210 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {
 8080b04:	b190      	cbz	r0, 8080b2c <_Z19setDisconnectedMode6String+0x70>
    sysStatus.disconnectedLogger = false;
 8080b06:	4b0b      	ldr	r3, [pc, #44]	; (8080b34 <_Z19setDisconnectedMode6String+0x78>)
    sysStatus.connectedStatus = true;
 8080b08:	2401      	movs	r4, #1
    delay (10000);
    disconnectFromParticle();
    return 1;
  }
  else if (command == "0") {
    sysStatus.disconnectedLogger = false;
 8080b0a:	705d      	strb	r5, [r3, #1]
    sysStatus.connectedStatus = true;
 8080b0c:	70dc      	strb	r4, [r3, #3]
    connectToParticle();
 8080b0e:	f7ff fd83 	bl	8080618 <_Z17connectToParticlev>
 8080b12:	4b09      	ldr	r3, [pc, #36]	; (8080b38 <_Z19setDisconnectedMode6String+0x7c>)
    if (Particle.connected) Particle.publish("Mode","Changing device to connected mode - User / Reset to recover",PRIVATE);
 8080b14:	a802      	add	r0, sp, #8
 8080b16:	781b      	ldrb	r3, [r3, #0]
 8080b18:	4a0b      	ldr	r2, [pc, #44]	; (8080b48 <_Z19setDisconnectedMode6String+0x8c>)
 8080b1a:	f88d 5000 	strb.w	r5, [sp]
 8080b1e:	4907      	ldr	r1, [pc, #28]	; (8080b3c <_Z19setDisconnectedMode6String+0x80>)
 8080b20:	f7ff fb5c 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080b24:	a803      	add	r0, sp, #12
 8080b26:	f7ff ff3b 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b2a:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
 8080b2c:	b005      	add	sp, #20
 8080b2e:	bd30      	pop	{r4, r5, pc}
 8080b30:	08086019 	.word	0x08086019
 8080b34:	200002a0 	.word	0x200002a0
 8080b38:	200001c4 	.word	0x200001c4
 8080b3c:	08085d3e 	.word	0x08085d3e
 8080b40:	08085c94 	.word	0x08085c94
 8080b44:	08085cd3 	.word	0x08085cd3
 8080b48:	08085cd5 	.word	0x08085cd5

08080b4c <_Z13setSensorType6String>:
  }
  else return 0;
}

int setSensorType(String command) // Function to force sending data in current hour
{
 8080b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080b4e:	4930      	ldr	r1, [pc, #192]	; (8080c10 <_Z13setSensorType6String+0xc4>)
 8080b50:	4604      	mov	r4, r0
 8080b52:	f002 fb5d 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command == "0")
 8080b56:	4606      	mov	r6, r0
 8080b58:	b1a8      	cbz	r0, 8080b86 <_Z13setSensorType6String+0x3a>
  {
    sysStatus.sensorType = 0;
 8080b5a:	4b2e      	ldr	r3, [pc, #184]	; (8080c14 <_Z13setSensorType6String+0xc8>)
 8080b5c:	2500      	movs	r5, #0
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080b5e:	492e      	ldr	r1, [pc, #184]	; (8080c18 <_Z13setSensorType6String+0xcc>)
 8080b60:	482e      	ldr	r0, [pc, #184]	; (8080c1c <_Z13setSensorType6String+0xd0>)

int setSensorType(String command) // Function to force sending data in current hour
{
  if (command == "0")
  {
    sysStatus.sensorType = 0;
 8080b62:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080b66:	f004 fb6c 	bl	8085242 <strcpy>
    systemStatusWriteNeeded=true;
 8080b6a:	4b2d      	ldr	r3, [pc, #180]	; (8080c20 <_Z13setSensorType6String+0xd4>)
 8080b6c:	2401      	movs	r4, #1
 8080b6e:	701c      	strb	r4, [r3, #0]
 8080b70:	f001 fad8 	bl	8082124 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Pressure", PRIVATE);
 8080b74:	b908      	cbnz	r0, 8080b7a <_Z13setSensorType6String+0x2e>
    return 1;
 8080b76:	2001      	movs	r0, #1
 8080b78:	e047      	b.n	8080c0a <_Z13setSensorType6String+0xbe>
 8080b7a:	4b2a      	ldr	r3, [pc, #168]	; (8080c24 <_Z13setSensorType6String+0xd8>)
  if (command == "0")
  {
    sysStatus.sensorType = 0;
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
    systemStatusWriteNeeded=true;
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Pressure", PRIVATE);
 8080b7c:	4a2a      	ldr	r2, [pc, #168]	; (8080c28 <_Z13setSensorType6String+0xdc>)
 8080b7e:	781b      	ldrb	r3, [r3, #0]
 8080b80:	f88d 5000 	strb.w	r5, [sp]
 8080b84:	e018      	b.n	8080bb8 <_Z13setSensorType6String+0x6c>
 8080b86:	4929      	ldr	r1, [pc, #164]	; (8080c2c <_Z13setSensorType6String+0xe0>)
 8080b88:	4620      	mov	r0, r4
 8080b8a:	f002 fb41 	bl	8083210 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
 8080b8e:	4605      	mov	r5, r0
 8080b90:	b1d0      	cbz	r0, 8080bc8 <_Z13setSensorType6String+0x7c>
  {
    sysStatus.sensorType = 1;
 8080b92:	4b20      	ldr	r3, [pc, #128]	; (8080c14 <_Z13setSensorType6String+0xc8>)
 8080b94:	2401      	movs	r4, #1
    strcpy(sensorTypeConfigStr,"PIR Sensor");
 8080b96:	4926      	ldr	r1, [pc, #152]	; (8080c30 <_Z13setSensorType6String+0xe4>)
 8080b98:	4820      	ldr	r0, [pc, #128]	; (8080c1c <_Z13setSensorType6String+0xd0>)
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Pressure", PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.sensorType = 1;
 8080b9a:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"PIR Sensor");
 8080b9e:	f004 fb50 	bl	8085242 <strcpy>
    systemStatusWriteNeeded=true;
 8080ba2:	4b1f      	ldr	r3, [pc, #124]	; (8080c20 <_Z13setSensorType6String+0xd4>)
 8080ba4:	701c      	strb	r4, [r3, #0]
 8080ba6:	f001 fabd 	bl	8082124 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
 8080baa:	2800      	cmp	r0, #0
 8080bac:	d0e3      	beq.n	8080b76 <_Z13setSensorType6String+0x2a>
 8080bae:	4b1d      	ldr	r3, [pc, #116]	; (8080c24 <_Z13setSensorType6String+0xd8>)
 8080bb0:	4a20      	ldr	r2, [pc, #128]	; (8080c34 <_Z13setSensorType6String+0xe8>)
 8080bb2:	781b      	ldrb	r3, [r3, #0]
 8080bb4:	f88d 6000 	strb.w	r6, [sp]
 8080bb8:	a802      	add	r0, sp, #8
 8080bba:	491f      	ldr	r1, [pc, #124]	; (8080c38 <_Z13setSensorType6String+0xec>)
 8080bbc:	f7ff fb0e 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080bc0:	a803      	add	r0, sp, #12
 8080bc2:	f7ff feed 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080bc6:	e7d6      	b.n	8080b76 <_Z13setSensorType6String+0x2a>
 8080bc8:	491c      	ldr	r1, [pc, #112]	; (8080c3c <_Z13setSensorType6String+0xf0>)
 8080bca:	4620      	mov	r0, r4
 8080bcc:	f002 fb20 	bl	8083210 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "2")
 8080bd0:	b1d8      	cbz	r0, 8080c0a <_Z13setSensorType6String+0xbe>
  {
    sysStatus.sensorType = 2;
 8080bd2:	4b10      	ldr	r3, [pc, #64]	; (8080c14 <_Z13setSensorType6String+0xc8>)
 8080bd4:	2202      	movs	r2, #2
    strcpy(sensorTypeConfigStr,"Legacy Sensor");
 8080bd6:	491a      	ldr	r1, [pc, #104]	; (8080c40 <_Z13setSensorType6String+0xf4>)
 8080bd8:	4810      	ldr	r0, [pc, #64]	; (8080c1c <_Z13setSensorType6String+0xd0>)
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }
  else if (command == "2")
  {
    sysStatus.sensorType = 2;
 8080bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"Legacy Sensor");
 8080bde:	f004 fb30 	bl	8085242 <strcpy>
    systemStatusWriteNeeded=true;
 8080be2:	4b0f      	ldr	r3, [pc, #60]	; (8080c20 <_Z13setSensorType6String+0xd4>)
 8080be4:	2401      	movs	r4, #1
 8080be6:	701c      	strb	r4, [r3, #0]
 8080be8:	f001 fa9c 	bl	8082124 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Legacy", PRIVATE);
 8080bec:	2800      	cmp	r0, #0
 8080bee:	d0c2      	beq.n	8080b76 <_Z13setSensorType6String+0x2a>
 8080bf0:	4b0c      	ldr	r3, [pc, #48]	; (8080c24 <_Z13setSensorType6String+0xd8>)
 8080bf2:	4a14      	ldr	r2, [pc, #80]	; (8080c44 <_Z13setSensorType6String+0xf8>)
 8080bf4:	781b      	ldrb	r3, [r3, #0]
 8080bf6:	4910      	ldr	r1, [pc, #64]	; (8080c38 <_Z13setSensorType6String+0xec>)
 8080bf8:	a802      	add	r0, sp, #8
 8080bfa:	f88d 5000 	strb.w	r5, [sp]
 8080bfe:	f7ff faed 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080c02:	a803      	add	r0, sp, #12
 8080c04:	f7ff fecc 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080c08:	4620      	mov	r0, r4
  }

  else return 0;
}
 8080c0a:	b004      	add	sp, #16
 8080c0c:	bd70      	pop	{r4, r5, r6, pc}
 8080c0e:	bf00      	nop
 8080c10:	08085cd3 	.word	0x08085cd3
 8080c14:	200002a0 	.word	0x200002a0
 8080c18:	08085c5b 	.word	0x08085c5b
 8080c1c:	20000290 	.word	0x20000290
 8080c20:	200001d8 	.word	0x200001d8
 8080c24:	200001c4 	.word	0x200001c4
 8080c28:	08085d43 	.word	0x08085d43
 8080c2c:	08086019 	.word	0x08086019
 8080c30:	08085d5f 	.word	0x08085d5f
 8080c34:	08085d6a 	.word	0x08085d6a
 8080c38:	08085d3e 	.word	0x08085d3e
 8080c3c:	08085d81 	.word	0x08085d81
 8080c40:	08085d83 	.word	0x08085d83
 8080c44:	08085d91 	.word	0x08085d91

08080c48 <_Z11setTimeZone6String>:
  }
  else return 0;
}

int setTimeZone(String command)
{
 8080c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080c4c:	b0cd      	sub	sp, #308	; 0x134
 8080c4e:	4604      	mov	r4, r0
 8080c50:	f001 fa68 	bl	8082124 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 8080c54:	b110      	cbz	r0, 8080c5c <_Z11setTimeZone6String+0x14>
            return false;
        }
        return spark_sync_time(NULL);
 8080c56:	2000      	movs	r0, #0
 8080c58:	f001 fa74 	bl	8082144 <spark_sync_time>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080c5c:	2000      	movs	r0, #0
 8080c5e:	f001 f86f 	bl	8081d40 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c62:	f247 582f 	movw	r8, #29999	; 0x752f
 8080c66:	4606      	mov	r6, r0
 8080c68:	2700      	movs	r7, #0
 8080c6a:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080c6e:	2000      	movs	r0, #0
 8080c70:	f001 f866 	bl	8081d40 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080c74:	1b80      	subs	r0, r0, r6
 8080c76:	eb61 0107 	sbc.w	r1, r1, r7
 8080c7a:	4589      	cmp	r9, r1
 8080c7c:	bf08      	it	eq
 8080c7e:	4580      	cmpeq	r8, r0
 8080c80:	d305      	bcc.n	8080c8e <_Z11setTimeZone6String+0x46>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
 8080c82:	f7ff fa4d 	bl	8080120 <_ZN10CloudClass12syncTimeDoneEv.isra.15>
 8080c86:	b910      	cbnz	r0, 8080c8e <_Z11setTimeZone6String+0x46>
            spark_process();
 8080c88:	f001 fa34 	bl	80820f4 <spark_process>
 8080c8c:	e7ef      	b.n	8080c6e <_Z11setTimeZone6String+0x26>
 8080c8e:	f7ff fa47 	bl	8080120 <_ZN10CloudClass12syncTimeDoneEv.isra.15>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080c92:	220a      	movs	r2, #10
 8080c94:	a905      	add	r1, sp, #20
 8080c96:	6820      	ldr	r0, [r4, #0]
 8080c98:	f004 fb9a 	bl	80853d0 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080c9c:	f100 030c 	add.w	r3, r0, #12
 8080ca0:	b2db      	uxtb	r3, r3
 8080ca2:	2b18      	cmp	r3, #24
 8080ca4:	d84d      	bhi.n	8080d42 <_Z11setTimeZone6String+0xfa>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080ca6:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080ca8:	4628      	mov	r0, r5
 8080caa:	f003 fef3 	bl	8084a94 <__aeabi_i2f>
 8080cae:	4b2a      	ldr	r3, [pc, #168]	; (8080d58 <_Z11setTimeZone6String+0x110>)
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080cb0:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080cb2:	6158      	str	r0, [r3, #20]
  Time.zone(sysStatus.timezone);
 8080cb4:	f002 fc36 	bl	8083524 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080cb8:	4b28      	ldr	r3, [pc, #160]	; (8080d5c <_Z11setTimeZone6String+0x114>)
 8080cba:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8080cbc:	f002 fc24 	bl	8083508 <_ZN9TimeClass5localEv>
 8080cc0:	4606      	mov	r6, r0
 8080cc2:	f002 fcb8 	bl	8083636 <_ZN9TimeClass3nowEv>
 8080cc6:	1a30      	subs	r0, r6, r0
 8080cc8:	f003 fb3a 	bl	8084340 <__aeabi_i2d>
 8080ccc:	a320      	add	r3, pc, #128	; (adr r3, 8080d50 <_Z11setTimeZone6String+0x108>)
 8080cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080cd2:	f003 fcc5 	bl	8084660 <__aeabi_ddiv>
 8080cd6:	4a22      	ldr	r2, [pc, #136]	; (8080d60 <_Z11setTimeZone6String+0x118>)
 8080cd8:	e9cd 0100 	strd	r0, r1, [sp]
 8080cdc:	210a      	movs	r1, #10
 8080cde:	4821      	ldr	r0, [pc, #132]	; (8080d64 <_Z11setTimeZone6String+0x11c>)
 8080ce0:	f001 fac0 	bl	8082264 <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080ce4:	f001 fa1e 	bl	8082124 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080ce8:	b348      	cbz	r0, 8080d3e <_Z11setTimeZone6String+0xf6>
 8080cea:	4e1f      	ldr	r6, [pc, #124]	; (8080d68 <_Z11setTimeZone6String+0x120>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080cec:	462b      	mov	r3, r5
 8080cee:	4a1f      	ldr	r2, [pc, #124]	; (8080d6c <_Z11setTimeZone6String+0x124>)
 8080cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080cf4:	2500      	movs	r5, #0
 8080cf6:	a80c      	add	r0, sp, #48	; 0x30
 8080cf8:	f001 fab4 	bl	8082264 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080cfc:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Time",data, PRIVATE);
 8080cfe:	aa0c      	add	r2, sp, #48	; 0x30
 8080d00:	491b      	ldr	r1, [pc, #108]	; (8080d70 <_Z11setTimeZone6String+0x128>)
 8080d02:	a808      	add	r0, sp, #32
 8080d04:	f88d 5000 	strb.w	r5, [sp]
 8080d08:	f7ff fa68 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080d0c:	a809      	add	r0, sp, #36	; 0x24
 8080d0e:	f7ff fe47 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 8080d12:	f002 fc90 	bl	8083636 <_ZN9TimeClass3nowEv>
 8080d16:	4601      	mov	r1, r0
 8080d18:	a808      	add	r0, sp, #32
 8080d1a:	f002 fc49 	bl	80835b0 <_ZN9TimeClass7timeStrEl>
 8080d1e:	9b08      	ldr	r3, [sp, #32]
 8080d20:	4913      	ldr	r1, [pc, #76]	; (8080d70 <_Z11setTimeZone6String+0x128>)
 8080d22:	9303      	str	r3, [sp, #12]
 8080d24:	9a03      	ldr	r2, [sp, #12]
 8080d26:	7833      	ldrb	r3, [r6, #0]
 8080d28:	a806      	add	r0, sp, #24
 8080d2a:	f88d 5000 	strb.w	r5, [sp]
 8080d2e:	f7ff fa55 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080d32:	a807      	add	r0, sp, #28
 8080d34:	f7ff fe34 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d38:	a808      	add	r0, sp, #32
 8080d3a:	f002 f9d1 	bl	80830e0 <_ZN6StringD1Ev>
  }

  return 1;
 8080d3e:	4620      	mov	r0, r4
 8080d40:	e000      	b.n	8080d44 <_Z11setTimeZone6String+0xfc>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080d42:	2000      	movs	r0, #0
    Particle.publish("Time",data, PRIVATE);
    Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
 8080d44:	b04d      	add	sp, #308	; 0x134
 8080d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080d4a:	bf00      	nop
 8080d4c:	f3af 8000 	nop.w
 8080d50:	00000000 	.word	0x00000000
 8080d54:	40ac2000 	.word	0x40ac2000
 8080d58:	200002a0 	.word	0x200002a0
 8080d5c:	200001d8 	.word	0x200001d8
 8080d60:	08085dd1 	.word	0x08085dd1
 8080d64:	200001a9 	.word	0x200001a9
 8080d68:	200001c4 	.word	0x200001c4
 8080d6c:	08085ddb 	.word	0x08085ddb
 8080d70:	08085efd 	.word	0x08085efd

08080d74 <_Z11setOpenTime6String.part.33>:

int setOpenTime(String command)
 8080d74:	b500      	push	{lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
 8080d76:	4b0d      	ldr	r3, [pc, #52]	; (8080dac <_Z11setOpenTime6String.part.33+0x38>)
  }

  return 1;
}

int setOpenTime(String command)
 8080d78:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
 8080d7a:	69db      	ldr	r3, [r3, #28]
 8080d7c:	4a0c      	ldr	r2, [pc, #48]	; (8080db0 <_Z11setOpenTime6String.part.33+0x3c>)
 8080d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080d82:	a804      	add	r0, sp, #16
 8080d84:	f001 fa6e 	bl	8082264 <snprintf>
 8080d88:	4b0a      	ldr	r3, [pc, #40]	; (8080db4 <_Z11setOpenTime6String.part.33+0x40>)
    Particle.publish("Time",data, PRIVATE);
 8080d8a:	2200      	movs	r2, #0
 8080d8c:	781b      	ldrb	r3, [r3, #0]
 8080d8e:	490a      	ldr	r1, [pc, #40]	; (8080db8 <_Z11setOpenTime6String.part.33+0x44>)
 8080d90:	f88d 2000 	strb.w	r2, [sp]
 8080d94:	a802      	add	r0, sp, #8
 8080d96:	aa04      	add	r2, sp, #16
 8080d98:	f7ff fa20 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080d9c:	a803      	add	r0, sp, #12
 8080d9e:	f7ff fdff 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  return 1;
}
 8080da2:	2001      	movs	r0, #1
 8080da4:	b045      	add	sp, #276	; 0x114
 8080da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8080daa:	bf00      	nop
 8080dac:	200002a0 	.word	0x200002a0
 8080db0:	08085def 	.word	0x08085def
 8080db4:	200001c4 	.word	0x200001c4
 8080db8:	08085efd 	.word	0x08085efd

08080dbc <_Z11setOpenTime6String>:

  return 1;
}

int setOpenTime(String command)
{
 8080dbc:	b513      	push	{r0, r1, r4, lr}
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
 8080dbe:	220a      	movs	r2, #10
 8080dc0:	a901      	add	r1, sp, #4
 8080dc2:	6800      	ldr	r0, [r0, #0]
 8080dc4:	f004 fb04 	bl	80853d0 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
 8080dc8:	2817      	cmp	r0, #23
 8080dca:	d80a      	bhi.n	8080de2 <_Z11setOpenTime6String+0x26>
  sysStatus.openTime = tempTime;
 8080dcc:	4b07      	ldr	r3, [pc, #28]	; (8080dec <_Z11setOpenTime6String+0x30>)
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
 8080dce:	2401      	movs	r4, #1
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
 8080dd0:	61d8      	str	r0, [r3, #28]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
 8080dd2:	4b07      	ldr	r3, [pc, #28]	; (8080df0 <_Z11setOpenTime6String+0x34>)
 8080dd4:	701c      	strb	r4, [r3, #0]
 8080dd6:	f001 f9a5 	bl	8082124 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080dda:	b120      	cbz	r0, 8080de6 <_Z11setOpenTime6String+0x2a>
 8080ddc:	f7ff ffca 	bl	8080d74 <_Z11setOpenTime6String.part.33>
 8080de0:	e002      	b.n	8080de8 <_Z11setOpenTime6String+0x2c>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
 8080de2:	2000      	movs	r0, #0
 8080de4:	e000      	b.n	8080de8 <_Z11setOpenTime6String+0x2c>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
    Particle.publish("Time",data, PRIVATE);
  }
  return 1;
 8080de6:	4620      	mov	r0, r4
}
 8080de8:	b002      	add	sp, #8
 8080dea:	bd10      	pop	{r4, pc}
 8080dec:	200002a0 	.word	0x200002a0
 8080df0:	200001d8 	.word	0x200001d8

08080df4 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
 8080df4:	b510      	push	{r4, lr}
 8080df6:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080df8:	220a      	movs	r2, #10
 8080dfa:	a903      	add	r1, sp, #12
 8080dfc:	6800      	ldr	r0, [r0, #0]
 8080dfe:	f004 fae7 	bl	80853d0 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080e02:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080e04:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080e06:	d81b      	bhi.n	8080e40 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
 8080e08:	4a10      	ldr	r2, [pc, #64]	; (8080e4c <_Z12setCloseTime6String+0x58>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080e0a:	2401      	movs	r4, #1
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
 8080e0c:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080e0e:	4a10      	ldr	r2, [pc, #64]	; (8080e50 <_Z12setCloseTime6String+0x5c>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
 8080e10:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080e14:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
 8080e16:	a806      	add	r0, sp, #24
 8080e18:	4a0e      	ldr	r2, [pc, #56]	; (8080e54 <_Z12setCloseTime6String+0x60>)
 8080e1a:	f001 fa23 	bl	8082264 <snprintf>
 8080e1e:	f001 f981 	bl	8082124 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
 8080e22:	b178      	cbz	r0, 8080e44 <_Z12setCloseTime6String+0x50>
 8080e24:	4b0c      	ldr	r3, [pc, #48]	; (8080e58 <_Z12setCloseTime6String+0x64>)
 8080e26:	2200      	movs	r2, #0
 8080e28:	781b      	ldrb	r3, [r3, #0]
 8080e2a:	a804      	add	r0, sp, #16
 8080e2c:	f88d 2000 	strb.w	r2, [sp]
 8080e30:	490a      	ldr	r1, [pc, #40]	; (8080e5c <_Z12setCloseTime6String+0x68>)
 8080e32:	aa06      	add	r2, sp, #24
 8080e34:	f7ff f9d2 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080e38:	a805      	add	r0, sp, #20
 8080e3a:	f7ff fdb1 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e3e:	e001      	b.n	8080e44 <_Z12setCloseTime6String+0x50>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080e40:	2000      	movs	r0, #0
 8080e42:	e000      	b.n	8080e46 <_Z12setCloseTime6String+0x52>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
 8080e44:	4620      	mov	r0, r4
}
 8080e46:	b046      	add	sp, #280	; 0x118
 8080e48:	bd10      	pop	{r4, pc}
 8080e4a:	bf00      	nop
 8080e4c:	200002a0 	.word	0x200002a0
 8080e50:	200001d8 	.word	0x200001d8
 8080e54:	08085e03 	.word	0x08085e03
 8080e58:	200001c4 	.word	0x200001c4
 8080e5c:	08085efd 	.word	0x08085efd

08080e60 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080e60:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8080e62:	4927      	ldr	r1, [pc, #156]	; (8080f00 <_Z15setLowPowerMode6String+0xa0>)
 8080e64:	b085      	sub	sp, #20
 8080e66:	4604      	mov	r4, r0
 8080e68:	f002 f9d2 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080e6c:	b928      	cbnz	r0, 8080e7a <_Z15setLowPowerMode6String+0x1a>
 8080e6e:	4925      	ldr	r1, [pc, #148]	; (8080f04 <_Z15setLowPowerMode6String+0xa4>)
 8080e70:	4620      	mov	r0, r4
 8080e72:	f002 f9cd 	bl	8083210 <_ZNK6String6equalsEPKc>
 8080e76:	2800      	cmp	r0, #0
 8080e78:	d03f      	beq.n	8080efa <_Z15setLowPowerMode6String+0x9a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080e7a:	4921      	ldr	r1, [pc, #132]	; (8080f00 <_Z15setLowPowerMode6String+0xa0>)
 8080e7c:	4620      	mov	r0, r4
 8080e7e:	f002 f9c7 	bl	8083210 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080e82:	b1a0      	cbz	r0, 8080eae <_Z15setLowPowerMode6String+0x4e>
 8080e84:	f001 f94e 	bl	8082124 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
 8080e88:	b160      	cbz	r0, 8080ea4 <_Z15setLowPowerMode6String+0x44>
 8080e8a:	4b1f      	ldr	r3, [pc, #124]	; (8080f08 <_Z15setLowPowerMode6String+0xa8>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
 8080e8c:	2200      	movs	r2, #0
 8080e8e:	781b      	ldrb	r3, [r3, #0]
 8080e90:	a802      	add	r0, sp, #8
 8080e92:	f88d 2000 	strb.w	r2, [sp]
 8080e96:	491d      	ldr	r1, [pc, #116]	; (8080f0c <_Z15setLowPowerMode6String+0xac>)
 8080e98:	4a1d      	ldr	r2, [pc, #116]	; (8080f10 <_Z15setLowPowerMode6String+0xb0>)
 8080e9a:	f7ff f99f 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080e9e:	a803      	add	r0, sp, #12
 8080ea0:	f7ff fd7e 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
 8080ea4:	4b1b      	ldr	r3, [pc, #108]	; (8080f14 <_Z15setLowPowerMode6String+0xb4>)
 8080ea6:	2201      	movs	r2, #1
 8080ea8:	719a      	strb	r2, [r3, #6]
    strcpy(lowPowerModeStr,"True");
 8080eaa:	491b      	ldr	r1, [pc, #108]	; (8080f18 <_Z15setLowPowerMode6String+0xb8>)
 8080eac:	e01f      	b.n	8080eee <_Z15setLowPowerMode6String+0x8e>
 8080eae:	4915      	ldr	r1, [pc, #84]	; (8080f04 <_Z15setLowPowerMode6String+0xa4>)
 8080eb0:	4620      	mov	r0, r4
 8080eb2:	f002 f9ad 	bl	8083210 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 8080eb6:	b1e8      	cbz	r0, 8080ef4 <_Z15setLowPowerMode6String+0x94>
 8080eb8:	f001 f934 	bl	8082124 <spark_cloud_flag_connected>
 8080ebc:	4c15      	ldr	r4, [pc, #84]	; (8080f14 <_Z15setLowPowerMode6String+0xb4>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
 8080ebe:	b918      	cbnz	r0, 8080ec8 <_Z15setLowPowerMode6String+0x68>
      connectToParticle();
 8080ec0:	f7ff fbaa 	bl	8080618 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
 8080ec4:	2301      	movs	r3, #1
 8080ec6:	70e3      	strb	r3, [r4, #3]
 8080ec8:	4b0f      	ldr	r3, [pc, #60]	; (8080f08 <_Z15setLowPowerMode6String+0xa8>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080eca:	2500      	movs	r5, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080ecc:	781b      	ldrb	r3, [r3, #0]
    }
    Particle.publish("Mode","Normal Operations", PRIVATE);
 8080ece:	490f      	ldr	r1, [pc, #60]	; (8080f0c <_Z15setLowPowerMode6String+0xac>)
 8080ed0:	4a12      	ldr	r2, [pc, #72]	; (8080f1c <_Z15setLowPowerMode6String+0xbc>)
 8080ed2:	a802      	add	r0, sp, #8
 8080ed4:	f88d 5000 	strb.w	r5, [sp]
 8080ed8:	f7ff f980 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080edc:	a803      	add	r0, sp, #12
 8080ede:	f7ff fd5f 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
 8080ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080ee6:	f001 f9d5 	bl	8082294 <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
 8080eea:	490d      	ldr	r1, [pc, #52]	; (8080f20 <_Z15setLowPowerMode6String+0xc0>)
      connectToParticle();
      sysStatus.connectedStatus = true;
    }
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
 8080eec:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
 8080eee:	480d      	ldr	r0, [pc, #52]	; (8080f24 <_Z15setLowPowerMode6String+0xc4>)
 8080ef0:	f004 f9a7 	bl	8085242 <strcpy>
  }
  systemStatusWriteNeeded = true;
 8080ef4:	4b0c      	ldr	r3, [pc, #48]	; (8080f28 <_Z15setLowPowerMode6String+0xc8>)
 8080ef6:	2001      	movs	r0, #1
 8080ef8:	7018      	strb	r0, [r3, #0]
  return 1;
}
 8080efa:	b005      	add	sp, #20
 8080efc:	bd30      	pop	{r4, r5, pc}
 8080efe:	bf00      	nop
 8080f00:	08086019 	.word	0x08086019
 8080f04:	08085cd3 	.word	0x08085cd3
 8080f08:	200001c4 	.word	0x200001c4
 8080f0c:	08085d3e 	.word	0x08085d3e
 8080f10:	08085e1a 	.word	0x08085e1a
 8080f14:	200002a0 	.word	0x200002a0
 8080f18:	08085e29 	.word	0x08085e29
 8080f1c:	08085e2e 	.word	0x08085e2e
 8080f20:	08085e40 	.word	0x08085e40
 8080f24:	20000269 	.word	0x20000269
 8080f28:	200001d8 	.word	0x200001d8

08080f2c <_Z18loadSystemDefaultsv>:
    pmic.disableCharging();
    return FALSE;
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
 8080f2c:	b510      	push	{r4, lr}
 8080f2e:	b086      	sub	sp, #24
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
 8080f30:	f7ff fb72 	bl	8080618 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
 8080f34:	f7ff fc90 	bl	8080858 <_Z16takeMeasurementsv>
 8080f38:	f001 f8f4 	bl	8082124 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
 8080f3c:	b160      	cbz	r0, 8080f58 <_Z18loadSystemDefaultsv+0x2c>
 8080f3e:	4b1d      	ldr	r3, [pc, #116]	; (8080fb4 <_Z18loadSystemDefaultsv+0x88>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080f40:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080f42:	781b      	ldrb	r3, [r3, #0]
 8080f44:	a802      	add	r0, sp, #8
 8080f46:	f88d 2000 	strb.w	r2, [sp]
 8080f4a:	491b      	ldr	r1, [pc, #108]	; (8080fb8 <_Z18loadSystemDefaultsv+0x8c>)
 8080f4c:	4a1b      	ldr	r2, [pc, #108]	; (8080fbc <_Z18loadSystemDefaultsv+0x90>)
 8080f4e:	f7ff f945 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 8080f52:	a803      	add	r0, sp, #12
 8080f54:	f7ff fd24 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 2;
 8080f58:	4c19      	ldr	r4, [pc, #100]	; (8080fc0 <_Z18loadSystemDefaultsv+0x94>)
 8080f5a:	2302      	movs	r3, #2
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 8080f5c:	68a2      	ldr	r2, [r4, #8]

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
 8080f5e:	7023      	strb	r3, [r4, #0]
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 8080f60:	2a1d      	cmp	r2, #29
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
  sysStatus.metricUnits = false;
 8080f62:	f04f 0300 	mov.w	r3, #0
 8080f66:	70a3      	strb	r3, [r4, #2]
  sysStatus.verboseMode = false;
 8080f68:	7123      	strb	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 8080f6a:	4916      	ldr	r1, [pc, #88]	; (8080fc4 <_Z18loadSystemDefaultsv+0x98>)
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 8080f6c:	bfd8      	it	le
 8080f6e:	2301      	movle	r3, #1
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 8080f70:	a802      	add	r0, sp, #8
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
 8080f72:	71e3      	strb	r3, [r4, #7]
  setLowPowerMode("0");
 8080f74:	f002 f8fb 	bl	808316e <_ZN6StringC1EPK19__FlashStringHelper>
 8080f78:	a802      	add	r0, sp, #8
 8080f7a:	f7ff ff71 	bl	8080e60 <_Z15setLowPowerMode6String>
 8080f7e:	a802      	add	r0, sp, #8
 8080f80:	f002 f8ae 	bl	80830e0 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 8080f84:	4b10      	ldr	r3, [pc, #64]	; (8080fc8 <_Z18loadSystemDefaultsv+0x9c>)
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 6;
  sysStatus.closeTime = 21;
  sysStatus.sensorType = 0;
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080f86:	4911      	ldr	r1, [pc, #68]	; (8080fcc <_Z18loadSystemDefaultsv+0xa0>)
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 8080f88:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
 8080f8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8080f8e:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 6;
 8080f90:	2306      	movs	r3, #6
 8080f92:	61e3      	str	r3, [r4, #28]
  sysStatus.closeTime = 21;
 8080f94:	2315      	movs	r3, #21
 8080f96:	6223      	str	r3, [r4, #32]
  sysStatus.sensorType = 0;
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080f98:	480d      	ldr	r0, [pc, #52]	; (8080fd0 <_Z18loadSystemDefaultsv+0xa4>)
  setLowPowerMode("0");
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 6;
  sysStatus.closeTime = 21;
  sysStatus.sensorType = 0;
 8080f9a:	2300      	movs	r3, #0
 8080f9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080fa0:	f004 f94f 	bl	8085242 <strcpy>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080fa4:	232c      	movs	r3, #44	; 0x2c
 8080fa6:	4a06      	ldr	r2, [pc, #24]	; (8080fc0 <_Z18loadSystemDefaultsv+0x94>)
 8080fa8:	2101      	movs	r1, #1
 8080faa:	480a      	ldr	r0, [pc, #40]	; (8080fd4 <_Z18loadSystemDefaultsv+0xa8>)
 8080fac:	f000 fdb2 	bl	8081b14 <_ZN6MB85RC9writeDataEjPKhj>
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
 8080fb0:	b006      	add	sp, #24
 8080fb2:	bd10      	pop	{r4, pc}
 8080fb4:	200001c4 	.word	0x200001c4
 8080fb8:	08085d3e 	.word	0x08085d3e
 8080fbc:	08085e46 	.word	0x08085e46
 8080fc0:	200002a0 	.word	0x200002a0
 8080fc4:	08085cd3 	.word	0x08085cd3
 8080fc8:	c0a00000 	.word	0xc0a00000
 8080fcc:	08085c5b 	.word	0x08085c5b
 8080fd0:	20000290 	.word	0x20000290
 8080fd4:	200001b4 	.word	0x200001b4

08080fd8 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
 8080fd8:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080fda:	4d15      	ldr	r5, [pc, #84]	; (8081030 <_Z22publishStateTransitionv+0x58>)
 8080fdc:	4915      	ldr	r1, [pc, #84]	; (8081034 <_Z22publishStateTransitionv+0x5c>)
 8080fde:	782a      	ldrb	r2, [r5, #0]
 8080fe0:	230e      	movs	r3, #14
 8080fe2:	fb03 1202 	mla	r2, r3, r2, r1
 8080fe6:	4c14      	ldr	r4, [pc, #80]	; (8081038 <_Z22publishStateTransitionv+0x60>)
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
 8080fe8:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080fea:	7820      	ldrb	r0, [r4, #0]
 8080fec:	9200      	str	r2, [sp, #0]
 8080fee:	fb03 1300 	mla	r3, r3, r0, r1
 8080ff2:	4a12      	ldr	r2, [pc, #72]	; (808103c <_Z22publishStateTransitionv+0x64>)
 8080ff4:	2128      	movs	r1, #40	; 0x28
 8080ff6:	a804      	add	r0, sp, #16
 8080ff8:	f001 f934 	bl	8082264 <snprintf>
  oldState = state;
 8080ffc:	782b      	ldrb	r3, [r5, #0]
 8080ffe:	7023      	strb	r3, [r4, #0]
 8081000:	f001 f890 	bl	8082124 <spark_cloud_flag_connected>
  if(Particle.connected()) Particle.publish("State Transition",stateTransitionString, PRIVATE);
 8081004:	b160      	cbz	r0, 8081020 <_Z22publishStateTransitionv+0x48>
 8081006:	4b0e      	ldr	r3, [pc, #56]	; (8081040 <_Z22publishStateTransitionv+0x68>)
 8081008:	2200      	movs	r2, #0
 808100a:	781b      	ldrb	r3, [r3, #0]
 808100c:	a802      	add	r0, sp, #8
 808100e:	f88d 2000 	strb.w	r2, [sp]
 8081012:	490c      	ldr	r1, [pc, #48]	; (8081044 <_Z22publishStateTransitionv+0x6c>)
 8081014:	aa04      	add	r2, sp, #16
 8081016:	f7ff f8e1 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 808101a:	a803      	add	r0, sp, #12
 808101c:	f7ff fcc0 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.println(stateTransitionString);
 8081020:	f002 fc3a 	bl	8083898 <_Z16_fetch_usbserialv>
 8081024:	a904      	add	r1, sp, #16
 8081026:	f002 f80c 	bl	8083042 <_ZN5Print7printlnEPKc>
}
 808102a:	b00f      	add	sp, #60	; 0x3c
 808102c:	bd30      	pop	{r4, r5, pc}
 808102e:	bf00      	nop
 8081030:	200001d9 	.word	0x200001d9
 8081034:	20000000 	.word	0x20000000
 8081038:	200001c5 	.word	0x200001c5
 808103c:	08085e5e 	.word	0x08085e5e
 8081040:	200001c4 	.word	0x200001c4
 8081044:	08085e6c 	.word	0x08085e6c

08081048 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
 8081048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch(state) {
 808104c:	4ca9      	ldr	r4, [pc, #676]	; (80812f4 <loop+0x2ac>)

  digitalWrite(blueLED,LOW);
}

void loop()
{
 808104e:	b086      	sub	sp, #24
  switch(state) {
 8081050:	7823      	ldrb	r3, [r4, #0]
 8081052:	4fa9      	ldr	r7, [pc, #676]	; (80812f8 <loop+0x2b0>)
 8081054:	3b01      	subs	r3, #1
 8081056:	2b04      	cmp	r3, #4
 8081058:	f200 8124 	bhi.w	80812a4 <loop+0x25c>
 808105c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8081060:	000500dc 	.word	0x000500dc
 8081064:	00610032 	.word	0x00610032
 8081068:	00d3      	.short	0x00d3
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
 808106a:	4ba4      	ldr	r3, [pc, #656]	; (80812fc <loop+0x2b4>)
 808106c:	781b      	ldrb	r3, [r3, #0]
 808106e:	b10b      	cbz	r3, 8081074 <loop+0x2c>
 8081070:	f7ff fa5c 	bl	808052c <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
 8081074:	4ba2      	ldr	r3, [pc, #648]	; (8081300 <loop+0x2b8>)
 8081076:	781b      	ldrb	r3, [r3, #0]
 8081078:	b10b      	cbz	r3, 808107e <loop+0x36>
 808107a:	f7ff f90f 	bl	808029c <_Z11recordCountv>
    if (sysStatus.disconnectedLogger && millis() - stayAwakeTimeStamp > 1000) state = NAPPING_STATE;          // We will always nap between counts
 808107e:	4ba1      	ldr	r3, [pc, #644]	; (8081304 <loop+0x2bc>)
 8081080:	785a      	ldrb	r2, [r3, #1]
 8081082:	461d      	mov	r5, r3
 8081084:	b142      	cbz	r2, 8081098 <loop+0x50>
 8081086:	f000 fe43 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
 808108a:	4b9f      	ldr	r3, [pc, #636]	; (8081308 <loop+0x2c0>)
 808108c:	681b      	ldr	r3, [r3, #0]
 808108e:	1ac0      	subs	r0, r0, r3
 8081090:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8081094:	f200 8129 	bhi.w	80812ea <loop+0x2a2>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
 8081098:	f002 fad4 	bl	8083644 <_ZN9TimeClass4hourEv>
 808109c:	4b9b      	ldr	r3, [pc, #620]	; (808130c <loop+0x2c4>)
 808109e:	681b      	ldr	r3, [r3, #0]
 80810a0:	4298      	cmp	r0, r3
 80810a2:	bf1c      	itt	ne
 80810a4:	2305      	movne	r3, #5
 80810a6:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
 80810a8:	f002 facc 	bl	8083644 <_ZN9TimeClass4hourEv>
 80810ac:	6a2b      	ldr	r3, [r5, #32]
 80810ae:	4298      	cmp	r0, r3
 80810b0:	f280 811e 	bge.w	80812f0 <loop+0x2a8>
 80810b4:	f002 fac6 	bl	8083644 <_ZN9TimeClass4hourEv>
 80810b8:	4b92      	ldr	r3, [pc, #584]	; (8081304 <loop+0x2bc>)
 80810ba:	69db      	ldr	r3, [r3, #28]
 80810bc:	4298      	cmp	r0, r3
 80810be:	f2c0 8117 	blt.w	80812f0 <loop+0x2a8>
 80810c2:	e0ef      	b.n	80812a4 <loop+0x25c>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    detachInterrupt(intPin);                                          // Done sensing for the day
 80810c4:	2019      	movs	r0, #25
 80810c6:	f001 fe0d 	bl	8082ce4 <_Z15detachInterruptt>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80810ca:	4b91      	ldr	r3, [pc, #580]	; (8081310 <loop+0x2c8>)
 80810cc:	681b      	ldr	r3, [r3, #0]
 80810ce:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80810d2:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80810d6:	8313      	strh	r3, [r2, #24]
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
 80810d8:	4b8e      	ldr	r3, [pc, #568]	; (8081314 <loop+0x2cc>)
 80810da:	681b      	ldr	r3, [r3, #0]
 80810dc:	b10b      	cbz	r3, 80810e2 <loop+0x9a>
      state = REPORTING_STATE;
 80810de:	2305      	movs	r3, #5
 80810e0:	e098      	b.n	8081214 <loop+0x1cc>
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
 80810e2:	4b88      	ldr	r3, [pc, #544]	; (8081304 <loop+0x2bc>)
 80810e4:	78db      	ldrb	r3, [r3, #3]
 80810e6:	b10b      	cbz	r3, 80810ec <loop+0xa4>
 80810e8:	f7ff faec 	bl	80806c4 <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 80810ec:	2100      	movs	r1, #0
 80810ee:	2007      	movs	r0, #7
 80810f0:	f002 fd9b 	bl	8083c2a <digitalWrite>
    petWatchdog();
 80810f4:	f7ff fa1a 	bl	808052c <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
 80810f8:	f002 fa9d 	bl	8083636 <_ZN9TimeClass3nowEv>
    System.sleep(SLEEP_MODE_DEEP,wakeInSeconds);                      // Very deep sleep until the next hour
 80810fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8081100:	fb90 f2f3 	sdiv	r2, r0, r3
 8081104:	fb02 0013 	mls	r0, r2, r3, r0
 8081108:	1a1a      	subs	r2, r3, r0
 808110a:	4b83      	ldr	r3, [pc, #524]	; (8081318 <loop+0x2d0>)
 808110c:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8081110:	681b      	ldr	r3, [r3, #0]
 8081112:	bfa8      	it	ge
 8081114:	f44f 6261 	movge.w	r2, #3600	; 0xe10
 8081118:	2101      	movs	r1, #1
 808111a:	a803      	add	r0, sp, #12
 808111c:	f002 f950 	bl	80833c0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8081120:	e0c0      	b.n	80812a4 <loop+0x25c>

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sensorDetect) break;                                          // Don't nap until we are done with event
 8081122:	4b77      	ldr	r3, [pc, #476]	; (8081300 <loop+0x2b8>)
 8081124:	781b      	ldrb	r3, [r3, #0]
 8081126:	2b00      	cmp	r3, #0
 8081128:	f040 80bc 	bne.w	80812a4 <loop+0x25c>
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
 808112c:	4b75      	ldr	r3, [pc, #468]	; (8081304 <loop+0x2bc>)
 808112e:	78db      	ldrb	r3, [r3, #3]
 8081130:	b10b      	cbz	r3, 8081136 <loop+0xee>
 8081132:	f7ff fac7 	bl	80806c4 <_Z22disconnectFromParticlev>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
 8081136:	f002 fa7e 	bl	8083636 <_ZN9TimeClass3nowEv>
 808113a:	4606      	mov	r6, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
 808113c:	f7ff f9f6 	bl	808052c <_Z11petWatchdogv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
 8081140:	4b76      	ldr	r3, [pc, #472]	; (808131c <loop+0x2d4>)
 8081142:	7d1a      	ldrb	r2, [r3, #20]
 8081144:	b10a      	cbz	r2, 808114a <loop+0x102>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 8081146:	2201      	movs	r2, #1
 8081148:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).gpio(intPin,RISING).duration(wakeInSeconds * 1000).flag(SystemSleepFlag::WAIT_CLOUD);
 808114a:	2200      	movs	r2, #0
 808114c:	2105      	movs	r1, #5
 808114e:	4873      	ldr	r0, [pc, #460]	; (808131c <loop+0x2d4>)
 8081150:	f7ff f862 	bl	8080218 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
 8081154:	2201      	movs	r2, #1
 8081156:	2119      	movs	r1, #25
 8081158:	f7ff f85e 	bl	8080218 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
 808115c:	7d03      	ldrb	r3, [r0, #20]
 808115e:	4605      	mov	r5, r0
 8081160:	b373      	cbz	r3, 80811c0 <loop+0x178>
 8081162:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8081166:	fb96 f3f2 	sdiv	r3, r6, r2
 808116a:	fb02 6313 	mls	r3, r2, r3, r6
 808116e:	1ad3      	subs	r3, r2, r3
 8081170:	4293      	cmp	r3, r2
 8081172:	bfa8      	it	ge
 8081174:	4613      	movge	r3, r2
 8081176:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
 808117a:	2104      	movs	r1, #4
 808117c:	fb0a fa03 	mul.w	sl, sl, r3
 8081180:	f7ff f841 	bl	8080206 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
 8081184:	4680      	mov	r8, r0
 8081186:	b110      	cbz	r0, 808118e <loop+0x146>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 8081188:	f8c0 a00c 	str.w	sl, [r0, #12]
 808118c:	e018      	b.n	80811c0 <loop+0x178>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 808118e:	4964      	ldr	r1, [pc, #400]	; (8081320 <loop+0x2d8>)
 8081190:	2010      	movs	r0, #16
 8081192:	f002 fe27 	bl	8083de4 <_ZnwjRKSt9nothrow_t>
 8081196:	4606      	mov	r6, r0
 8081198:	2800      	cmp	r0, #0
 808119a:	f000 80d7 	beq.w	808134c <loop+0x304>
 808119e:	f04f 0910 	mov.w	r9, #16
 80811a2:	464a      	mov	r2, r9
 80811a4:	4641      	mov	r1, r8
 80811a6:	f004 f802 	bl	80851ae <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
 80811aa:	2302      	movs	r3, #2
 80811ac:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 80811ae:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 80811b0:	f8a6 9000 	strh.w	r9, [r6]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 80811b4:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 80811b6:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
 80811b8:	f8c6 a00c 	str.w	sl, [r6, #12]
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
            wakeupSource->base.next = config_.wakeup_sources;
 80811bc:	60b3      	str	r3, [r6, #8]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 80811be:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
 80811c0:	7d2b      	ldrb	r3, [r5, #20]
 80811c2:	b11b      	cbz	r3, 80811cc <loop+0x184>
            config_.flags |= f.value();
 80811c4:	68eb      	ldr	r3, [r5, #12]
 80811c6:	f043 0301 	orr.w	r3, r3, #1
 80811ca:	60eb      	str	r3, [r5, #12]
    SystemSleepResult result = System.sleep(config);                  // Put the device to sleep
 80811cc:	4953      	ldr	r1, [pc, #332]	; (808131c <loop+0x2d4>)
 80811ce:	a803      	add	r0, sp, #12
 80811d0:	f002 f88e 	bl	80832f0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
 80811d4:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 80811d6:	b173      	cbz	r3, 80811f6 <loop+0x1ae>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
 80811d8:	889a      	ldrh	r2, [r3, #4]
 80811da:	2a01      	cmp	r2, #1
 80811dc:	d10b      	bne.n	80811f6 <loop+0x1ae>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80811de:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == userSwitch) initializeDataLog();        // Simply puts the headers on the new file after a memory card swap
 80811e0:	2b05      	cmp	r3, #5
 80811e2:	d102      	bne.n	80811ea <loop+0x1a2>
 80811e4:	f7ff f90e 	bl	8080404 <_Z17initializeDataLogv>
 80811e8:	e005      	b.n	80811f6 <loop+0x1ae>
    else if (result.wakeupPin() == intPin) stayAwakeTimeStamp = millis(); // Keeps us from napping too fase interferes with charging
 80811ea:	2b19      	cmp	r3, #25
 80811ec:	d103      	bne.n	80811f6 <loop+0x1ae>
 80811ee:	f000 fd8f 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
 80811f2:	4b45      	ldr	r3, [pc, #276]	; (8081308 <loop+0x2c0>)
 80811f4:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80811f6:	9803      	ldr	r0, [sp, #12]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
 80811f8:	2302      	movs	r3, #2
 80811fa:	7023      	strb	r3, [r4, #0]
 80811fc:	2800      	cmp	r0, #0
 80811fe:	d051      	beq.n	80812a4 <loop+0x25c>
            free(wakeupSource_);
 8081200:	f001 f810 	bl	8082224 <free>
    } break;
 8081204:	e04e      	b.n	80812a4 <loop+0x25c>

  case REPORTING_STATE:
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
 8081206:	f7ff fb27 	bl	8080858 <_Z16takeMeasurementsv>
      recordHourlyData();
 808120a:	f7ff f891 	bl	8080330 <_Z16recordHourlyDatav>
      writeToDataLog();
 808120e:	f7ff f8bd 	bl	808038c <_Z14writeToDataLogv>
      state = IDLE_STATE;                                             // Wait for Response
 8081212:	2302      	movs	r3, #2
 8081214:	7023      	strb	r3, [r4, #0]
    break;
 8081216:	e045      	b.n	80812a4 <loop+0x25c>

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 8081218:	4c3a      	ldr	r4, [pc, #232]	; (8081304 <loop+0x2bc>)
 808121a:	7923      	ldrb	r3, [r4, #4]
 808121c:	b12b      	cbz	r3, 808122a <loop+0x1e2>
 808121e:	4b41      	ldr	r3, [pc, #260]	; (8081324 <loop+0x2dc>)
 8081220:	781b      	ldrb	r3, [r3, #0]
 8081222:	2b01      	cmp	r3, #1
 8081224:	d001      	beq.n	808122a <loop+0x1e2>
 8081226:	f7ff fed7 	bl	8080fd8 <_Z22publishStateTransitionv>
 808122a:	f000 fd71 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 808122e:	4b3e      	ldr	r3, [pc, #248]	; (8081328 <loop+0x2e0>)
 8081230:	681b      	ldr	r3, [r3, #0]
 8081232:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8081236:	3330      	adds	r3, #48	; 0x30
 8081238:	4298      	cmp	r0, r3
 808123a:	d933      	bls.n	80812a4 <loop+0x25c>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
 808123c:	6923      	ldr	r3, [r4, #16]
 808123e:	2b03      	cmp	r3, #3
 8081240:	dc16      	bgt.n	8081270 <loop+0x228>
 8081242:	f000 ff6f 	bl	8082124 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8081246:	b160      	cbz	r0, 8081262 <loop+0x21a>
 8081248:	4b38      	ldr	r3, [pc, #224]	; (808132c <loop+0x2e4>)
 808124a:	2200      	movs	r2, #0
 808124c:	781b      	ldrb	r3, [r3, #0]
 808124e:	a803      	add	r0, sp, #12
 8081250:	f88d 2000 	strb.w	r2, [sp]
 8081254:	4936      	ldr	r1, [pc, #216]	; (8081330 <loop+0x2e8>)
 8081256:	4a37      	ldr	r2, [pc, #220]	; (8081334 <loop+0x2ec>)
 8081258:	f7fe ffc0 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 808125c:	a804      	add	r0, sp, #16
 808125e:	f7ff fb9f 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081266:	f001 f815 	bl	8082294 <delay>
        System.reset();
 808126a:	f002 f83e 	bl	80832ea <_ZN11SystemClass5resetEv>
 808126e:	e019      	b.n	80812a4 <loop+0x25c>
 8081270:	f000 ff58 	bl	8082124 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8081274:	b160      	cbz	r0, 8081290 <loop+0x248>
 8081276:	4b2d      	ldr	r3, [pc, #180]	; (808132c <loop+0x2e4>)
 8081278:	2200      	movs	r2, #0
 808127a:	781b      	ldrb	r3, [r3, #0]
 808127c:	a803      	add	r0, sp, #12
 808127e:	f88d 2000 	strb.w	r2, [sp]
 8081282:	492b      	ldr	r1, [pc, #172]	; (8081330 <loop+0x2e8>)
 8081284:	4a2c      	ldr	r2, [pc, #176]	; (8081338 <loop+0x2f0>)
 8081286:	f7fe ffa9 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 808128a:	a804      	add	r0, sp, #16
 808128c:	f7ff fb88 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081294:	f000 fffe 	bl	8082294 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
 8081298:	2300      	movs	r3, #0
 808129a:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
 808129c:	2301      	movs	r3, #1
 808129e:	703b      	strb	r3, [r7, #0]
        fullModemReset();                                             // Full Modem reset and reboots
 80812a0:	f7ff fa46 	bl	8080730 <_Z14fullModemResetv>
      }
    }
    break;
  }
  if (systemStatusWriteNeeded) {
 80812a4:	783b      	ldrb	r3, [r7, #0]
 80812a6:	b143      	cbz	r3, 80812ba <loop+0x272>
 80812a8:	232c      	movs	r3, #44	; 0x2c
 80812aa:	4a16      	ldr	r2, [pc, #88]	; (8081304 <loop+0x2bc>)
 80812ac:	2101      	movs	r1, #1
 80812ae:	4823      	ldr	r0, [pc, #140]	; (808133c <loop+0x2f4>)
 80812b0:	f000 fc30 	bl	8081b14 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::systemStatusAddr,sysStatus);
    systemStatusWriteNeeded = false;
 80812b4:	4b10      	ldr	r3, [pc, #64]	; (80812f8 <loop+0x2b0>)
 80812b6:	2200      	movs	r2, #0
 80812b8:	701a      	strb	r2, [r3, #0]
  }
  if (currentCountsWriteNeeded) {
 80812ba:	4c21      	ldr	r4, [pc, #132]	; (8081340 <loop+0x2f8>)
 80812bc:	7823      	ldrb	r3, [r4, #0]
 80812be:	b13b      	cbz	r3, 80812d0 <loop+0x288>
 80812c0:	231c      	movs	r3, #28
 80812c2:	4a14      	ldr	r2, [pc, #80]	; (8081314 <loop+0x2cc>)
 80812c4:	2150      	movs	r1, #80	; 0x50
 80812c6:	481d      	ldr	r0, [pc, #116]	; (808133c <loop+0x2f4>)
 80812c8:	f000 fc24 	bl	8081b14 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::currentCountsAddr,current);
    currentCountsWriteNeeded = false;
 80812cc:	2300      	movs	r3, #0
 80812ce:	7023      	strb	r3, [r4, #0]
  }
  if (hourliesCountsWriteNeeded) {
 80812d0:	4c1c      	ldr	r4, [pc, #112]	; (8081344 <loop+0x2fc>)
 80812d2:	7823      	ldrb	r3, [r4, #0]
 80812d4:	2b00      	cmp	r3, #0
 80812d6:	d03b      	beq.n	8081350 <loop+0x308>
 80812d8:	2370      	movs	r3, #112	; 0x70
 80812da:	4a1b      	ldr	r2, [pc, #108]	; (8081348 <loop+0x300>)
 80812dc:	2180      	movs	r1, #128	; 0x80
 80812de:	4817      	ldr	r0, [pc, #92]	; (808133c <loop+0x2f4>)
 80812e0:	f000 fc18 	bl	8081b14 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::hourlyCountsAddr,hourlies);
    hourliesCountsWriteNeeded = false;
 80812e4:	2300      	movs	r3, #0
 80812e6:	7023      	strb	r3, [r4, #0]
  }
}
 80812e8:	e032      	b.n	8081350 <loop+0x308>
{
  switch(state) {
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
    if (sysStatus.disconnectedLogger && millis() - stayAwakeTimeStamp > 1000) state = NAPPING_STATE;          // We will always nap between counts
 80812ea:	2304      	movs	r3, #4
 80812ec:	7023      	strb	r3, [r4, #0]
 80812ee:	e6d3      	b.n	8081098 <loop+0x50>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
 80812f0:	2303      	movs	r3, #3
 80812f2:	e78f      	b.n	8081214 <loop+0x1cc>
 80812f4:	200001d9 	.word	0x200001d9
 80812f8:	200001d8 	.word	0x200001d8
 80812fc:	200001ec 	.word	0x200001ec
 8081300:	200001a8 	.word	0x200001a8
 8081304:	200002a0 	.word	0x200002a0
 8081308:	2000021c 	.word	0x2000021c
 808130c:	200001e8 	.word	0x200001e8
 8081310:	20000218 	.word	0x20000218
 8081314:	20000270 	.word	0x20000270
 8081318:	20000208 	.word	0x20000208
 808131c:	200001f0 	.word	0x200001f0
 8081320:	080863f4 	.word	0x080863f4
 8081324:	200001c5 	.word	0x200001c5
 8081328:	20000264 	.word	0x20000264
 808132c:	200001c4 	.word	0x200001c4
 8081330:	08085e91 	.word	0x08085e91
 8081334:	08085e7d 	.word	0x08085e7d
 8081338:	08085e97 	.word	0x08085e97
 808133c:	200001b4 	.word	0x200001b4
 8081340:	20000268 	.word	0x20000268
 8081344:	200001d7 	.word	0x200001d7
 8081348:	20000138 	.word	0x20000138
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
 808134c:	7528      	strb	r0, [r5, #20]
 808134e:	e737      	b.n	80811c0 <loop+0x178>
  }
  if (hourliesCountsWriteNeeded) {
    fram.put(FRAM::hourlyCountsAddr,hourlies);
    hourliesCountsWriteNeeded = false;
  }
}
 8081350:	b006      	add	sp, #24
 8081352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081356:	bf00      	nop

08081358 <_Z12setDSTOffset6String>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 8081358:	b570      	push	{r4, r5, r6, lr}
 808135a:	b0cc      	sub	sp, #304	; 0x130
 808135c:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
 808135e:	f002 f96a 	bl	8083636 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8081362:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
 8081364:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8081366:	a905      	add	r1, sp, #20
 8081368:	6820      	ldr	r0, [r4, #0]
 808136a:	f004 f831 	bl	80853d0 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 808136e:	b2c3      	uxtb	r3, r0
 8081370:	2b02      	cmp	r3, #2
 8081372:	d859      	bhi.n	8081428 <_Z12setDSTOffset6String+0xd0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 8081374:	b240      	sxtb	r0, r0
 8081376:	f003 fb8d 	bl	8084a94 <__aeabi_i2f>
 808137a:	4604      	mov	r4, r0
 808137c:	f002 f8ee 	bl	808355c <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
 8081380:	4b2f      	ldr	r3, [pc, #188]	; (8081440 <_Z12setDSTOffset6String+0xe8>)
  systemStatusWriteNeeded = true;
 8081382:	2201      	movs	r2, #1
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
  sysStatus.dstOffset = (float)tempDSTOffset;
 8081384:	619c      	str	r4, [r3, #24]
  systemStatusWriteNeeded = true;
 8081386:	4b2f      	ldr	r3, [pc, #188]	; (8081444 <_Z12setDSTOffset6String+0xec>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8081388:	4620      	mov	r0, r4
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
  sysStatus.dstOffset = (float)tempDSTOffset;
  systemStatusWriteNeeded = true;
 808138a:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 808138c:	f002 ffea 	bl	8084364 <__aeabi_f2d>
 8081390:	4a2d      	ldr	r2, [pc, #180]	; (8081448 <_Z12setDSTOffset6String+0xf0>)
 8081392:	e9cd 0100 	strd	r0, r1, [sp]
 8081396:	f44f 7180 	mov.w	r1, #256	; 0x100
 808139a:	a80c      	add	r0, sp, #48	; 0x30
 808139c:	f000 ff62 	bl	8082264 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 80813a0:	f002 f928 	bl	80835f4 <_ZN9TimeClass7isValidEv>
 80813a4:	b138      	cbz	r0, 80813b6 <_Z12setDSTOffset6String+0x5e>
 80813a6:	f7ff f9ef 	bl	8080788 <_Z8isDSTusav>
 80813aa:	b110      	cbz	r0, 80813b2 <_Z12setDSTOffset6String+0x5a>
 80813ac:	f002 f8f0 	bl	8083590 <_ZN9TimeClass8beginDSTEv>
 80813b0:	e001      	b.n	80813b6 <_Z12setDSTOffset6String+0x5e>
 80813b2:	f002 f8f7 	bl	80835a4 <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 80813b6:	f002 f8a7 	bl	8083508 <_ZN9TimeClass5localEv>
 80813ba:	4604      	mov	r4, r0
 80813bc:	f002 f93b 	bl	8083636 <_ZN9TimeClass3nowEv>
 80813c0:	1a20      	subs	r0, r4, r0
 80813c2:	f002 ffbd 	bl	8084340 <__aeabi_i2d>
 80813c6:	a31c      	add	r3, pc, #112	; (adr r3, 8081438 <_Z12setDSTOffset6String+0xe0>)
 80813c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813cc:	f003 f948 	bl	8084660 <__aeabi_ddiv>
 80813d0:	4a1e      	ldr	r2, [pc, #120]	; (808144c <_Z12setDSTOffset6String+0xf4>)
 80813d2:	e9cd 0100 	strd	r0, r1, [sp]
 80813d6:	210a      	movs	r1, #10
 80813d8:	481d      	ldr	r0, [pc, #116]	; (8081450 <_Z12setDSTOffset6String+0xf8>)
 80813da:	f000 ff43 	bl	8082264 <snprintf>
 80813de:	f000 fea1 	bl	8082124 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 80813e2:	b318      	cbz	r0, 808142c <_Z12setDSTOffset6String+0xd4>
 80813e4:	4d1b      	ldr	r5, [pc, #108]	; (8081454 <_Z12setDSTOffset6String+0xfc>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80813e6:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80813e8:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("Time",data, PRIVATE);
 80813ea:	aa0c      	add	r2, sp, #48	; 0x30
 80813ec:	491a      	ldr	r1, [pc, #104]	; (8081458 <_Z12setDSTOffset6String+0x100>)
 80813ee:	a808      	add	r0, sp, #32
 80813f0:	f88d 4000 	strb.w	r4, [sp]
 80813f4:	f7fe fef2 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 80813f8:	a809      	add	r0, sp, #36	; 0x24
 80813fa:	f7ff fad1 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
 80813fe:	4631      	mov	r1, r6
 8081400:	a808      	add	r0, sp, #32
 8081402:	f002 f8d5 	bl	80835b0 <_ZN9TimeClass7timeStrEl>
 8081406:	9b08      	ldr	r3, [sp, #32]
 8081408:	4913      	ldr	r1, [pc, #76]	; (8081458 <_Z12setDSTOffset6String+0x100>)
 808140a:	9303      	str	r3, [sp, #12]
 808140c:	9a03      	ldr	r2, [sp, #12]
 808140e:	782b      	ldrb	r3, [r5, #0]
 8081410:	a806      	add	r0, sp, #24
 8081412:	f88d 4000 	strb.w	r4, [sp]
 8081416:	f7fe fee1 	bl	80801dc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.28>
 808141a:	a807      	add	r0, sp, #28
 808141c:	f7ff fac0 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081420:	a808      	add	r0, sp, #32
 8081422:	f001 fe5d 	bl	80830e0 <_ZN6StringD1Ev>
 8081426:	e001      	b.n	808142c <_Z12setDSTOffset6String+0xd4>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 8081428:	2000      	movs	r0, #0
 808142a:	e000      	b.n	808142e <_Z12setDSTOffset6String+0xd6>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    Particle.publish("Time",data, PRIVATE);
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
 808142c:	2001      	movs	r0, #1
}
 808142e:	b04c      	add	sp, #304	; 0x130
 8081430:	bd70      	pop	{r4, r5, r6, pc}
 8081432:	bf00      	nop
 8081434:	f3af 8000 	nop.w
 8081438:	00000000 	.word	0x00000000
 808143c:	40ac2000 	.word	0x40ac2000
 8081440:	200002a0 	.word	0x200002a0
 8081444:	200001d8 	.word	0x200001d8
 8081448:	08085eb6 	.word	0x08085eb6
 808144c:	08085dd1 	.word	0x08085dd1
 8081450:	200001a9 	.word	0x200001a9
 8081454:	200001c4 	.word	0x200001c4
 8081458:	08085efd 	.word	0x08085efd

0808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 808145c:	2300      	movs	r3, #0
 808145e:	2202      	movs	r2, #2
 8081460:	f000 be38 	b.w	80820d4 <spark_variable>

08081464 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>:
 8081464:	2300      	movs	r3, #0
 8081466:	2204      	movs	r2, #4
 8081468:	f000 be34 	b.w	80820d4 <spark_variable>

0808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 808146c:	4602      	mov	r2, r0
 808146e:	4801      	ldr	r0, [pc, #4]	; (8081474 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081470:	f001 b8d2 	b.w	8082618 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081474:	080825ed 	.word	0x080825ed

08081478 <setup>:
// This section is where we will initialize sensor specific variables, libraries and function prototypes
// Pressure Sensor Variables
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered

void setup()                                        // Note: Disconnected Setup()
{
 8081478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808147c:	b088      	sub	sp, #32

  Serial1.begin(115200);
 808147e:	f002 f979 	bl	8083774 <_Z22__fetch_global_Serial1v>
 8081482:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8081486:	f002 f96f 	bl	8083768 <_ZN11USARTSerial5beginEm>
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
 808148a:	2100      	movs	r1, #0
 808148c:	2011      	movs	r0, #17
 808148e:	f002 fbbb 	bl	8083c08 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
 8081492:	2100      	movs	r1, #0
 8081494:	2005      	movs	r0, #5
 8081496:	f002 fbb7 	bl	8083c08 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808149a:	4c97      	ldr	r4, [pc, #604]	; (80816f8 <setup+0x280>)
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
 808149c:	2101      	movs	r1, #1
 808149e:	2007      	movs	r0, #7
 80814a0:	f002 fbb2 	bl	8083c08 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
 80814a4:	2101      	movs	r1, #1
 80814a6:	2006      	movs	r0, #6
 80814a8:	f002 fbae 	bl	8083c08 <pinMode>
 80814ac:	6823      	ldr	r3, [r4, #0]
  pinResetFast(hardResetPin);
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH
 80814ae:	2101      	movs	r1, #1
 80814b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80814b2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80814b6:	2004      	movs	r0, #4
 80814b8:	8353      	strh	r3, [r2, #26]
 80814ba:	f002 fba5 	bl	8083c08 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                     // Turn on the temp sensor
 80814be:	2101      	movs	r1, #1
 80814c0:	201d      	movs	r0, #29
 80814c2:	f002 fba1 	bl	8083c08 <pinMode>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80814c6:	6823      	ldr	r3, [r4, #0]
  pinSetFast(tmp36Shutdwn);                         // The sensor draws only 50uA so will just leave it on.
  //pinSetFast(dataLogResetPin);
  pinMode(dataLogResetPin,OUTPUT);
 80814c8:	2101      	movs	r1, #1
 80814ca:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 80814ce:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 80814d2:	200c      	movs	r0, #12
 80814d4:	8313      	strh	r3, [r2, #24]
 80814d6:	f002 fb97 	bl	8083c08 <pinMode>
  digitalWrite(dataLogResetPin,HIGH);
 80814da:	2101      	movs	r1, #1
 80814dc:	200c      	movs	r0, #12
 80814de:	f002 fba4 	bl	8083c2a <digitalWrite>

  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
 80814e2:	2103      	movs	r1, #3
 80814e4:	2019      	movs	r0, #25
 80814e6:	f002 fb8f 	bl	8083c08 <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
 80814ea:	2101      	movs	r1, #1
 80814ec:	201b      	movs	r0, #27
 80814ee:	f002 fb8b 	bl	8083c08 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80814f2:	6823      	ldr	r3, [r4, #0]
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
 80814f4:	2101      	movs	r1, #1
 80814f6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80814fa:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80814fe:	201c      	movs	r0, #28
 8081500:	8353      	strh	r3, [r2, #26]
 8081502:	f002 fb81 	bl	8083c08 <pinMode>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8081506:	6823      	ldr	r3, [r4, #0]
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
 8081508:	2101      	movs	r1, #1
 808150a:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 808150e:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
 8081512:	2007      	movs	r0, #7
 8081514:	8313      	strh	r3, [r2, #24]

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
 8081516:	2600      	movs	r6, #0
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
 8081518:	f002 fb87 	bl	8083c2a <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
 808151c:	f7ff f806 	bl	808052c <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
 8081520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081524:	2201      	movs	r2, #1
 8081526:	4975      	ldr	r1, [pc, #468]	; (80816fc <setup+0x284>)
 8081528:	9600      	str	r6, [sp, #0]
 808152a:	2011      	movs	r0, #17
 808152c:	f001 fbb2 	bl	8082c94 <_Z15attachInterrupttPFvvE13InterruptModeah>

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
 8081530:	4973      	ldr	r1, [pc, #460]	; (8081700 <setup+0x288>)
 8081532:	4874      	ldr	r0, [pc, #464]	; (8081704 <setup+0x28c>)
 8081534:	f7ff ff92 	bl	808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
 8081538:	4973      	ldr	r1, [pc, #460]	; (8081708 <setup+0x290>)
 808153a:	4874      	ldr	r0, [pc, #464]	; (808170c <setup+0x294>)
 808153c:	f7ff ff8e 	bl	808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Signal", SignalString);
 8081540:	4973      	ldr	r1, [pc, #460]	; (8081710 <setup+0x298>)
 8081542:	4874      	ldr	r0, [pc, #464]	; (8081714 <setup+0x29c>)
 8081544:	f7ff ff8e 	bl	8081464 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
 8081548:	4973      	ldr	r1, [pc, #460]	; (8081718 <setup+0x2a0>)
 808154a:	4874      	ldr	r0, [pc, #464]	; (808171c <setup+0x2a4>)
 808154c:	f7ff ff8a 	bl	8081464 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
 8081550:	4973      	ldr	r1, [pc, #460]	; (8081720 <setup+0x2a8>)
 8081552:	4874      	ldr	r0, [pc, #464]	; (8081724 <setup+0x2ac>)
 8081554:	f7ff ff82 	bl	808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("OpenTime",sysStatus.openTime);
 8081558:	4973      	ldr	r1, [pc, #460]	; (8081728 <setup+0x2b0>)
 808155a:	4874      	ldr	r0, [pc, #464]	; (808172c <setup+0x2b4>)
 808155c:	f7ff ff7e 	bl	808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
 8081560:	4973      	ldr	r1, [pc, #460]	; (8081730 <setup+0x2b8>)
 8081562:	4874      	ldr	r0, [pc, #464]	; (8081734 <setup+0x2bc>)
 8081564:	f7ff ff7a 	bl	808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
 8081568:	4973      	ldr	r1, [pc, #460]	; (8081738 <setup+0x2c0>)
 808156a:	4874      	ldr	r0, [pc, #464]	; (808173c <setup+0x2c4>)
 808156c:	f7ff ff76 	bl	808145c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
 8081570:	4973      	ldr	r1, [pc, #460]	; (8081740 <setup+0x2c8>)
 8081572:	4874      	ldr	r0, [pc, #464]	; (8081744 <setup+0x2cc>)
 8081574:	f7ff ff76 	bl	8081464 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
 8081578:	4973      	ldr	r1, [pc, #460]	; (8081748 <setup+0x2d0>)
 808157a:	4874      	ldr	r0, [pc, #464]	; (808174c <setup+0x2d4>)
 808157c:	f7ff ff72 	bl	8081464 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SensorStatus",sensorTypeConfigStr);
 8081580:	4973      	ldr	r1, [pc, #460]	; (8081750 <setup+0x2d8>)
 8081582:	4874      	ldr	r0, [pc, #464]	; (8081754 <setup+0x2dc>)
 8081584:	f7ff ff6e 	bl	8081464 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
 8081588:	4973      	ldr	r1, [pc, #460]	; (8081758 <setup+0x2e0>)
 808158a:	4874      	ldr	r0, [pc, #464]	; (808175c <setup+0x2e4>)
 808158c:	f7ff ff6e 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
 8081590:	4973      	ldr	r1, [pc, #460]	; (8081760 <setup+0x2e8>)
 8081592:	4874      	ldr	r0, [pc, #464]	; (8081764 <setup+0x2ec>)
 8081594:	f7ff ff6a 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
 8081598:	4973      	ldr	r1, [pc, #460]	; (8081768 <setup+0x2f0>)
 808159a:	4874      	ldr	r0, [pc, #464]	; (808176c <setup+0x2f4>)
 808159c:	f7ff ff66 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 80815a0:	4973      	ldr	r1, [pc, #460]	; (8081770 <setup+0x2f8>)
 80815a2:	4874      	ldr	r0, [pc, #464]	; (8081774 <setup+0x2fc>)
 80815a4:	f7ff ff62 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
 80815a8:	4973      	ldr	r1, [pc, #460]	; (8081778 <setup+0x300>)
 80815aa:	4874      	ldr	r0, [pc, #464]	; (808177c <setup+0x304>)
 80815ac:	f7ff ff5e 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
 80815b0:	4973      	ldr	r1, [pc, #460]	; (8081780 <setup+0x308>)
 80815b2:	4874      	ldr	r0, [pc, #464]	; (8081784 <setup+0x30c>)
 80815b4:	f7ff ff5a 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
 80815b8:	4973      	ldr	r1, [pc, #460]	; (8081788 <setup+0x310>)
 80815ba:	4874      	ldr	r0, [pc, #464]	; (808178c <setup+0x314>)
 80815bc:	f7ff ff56 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-SensorType",setSensorType);
 80815c0:	4973      	ldr	r1, [pc, #460]	; (8081790 <setup+0x318>)
 80815c2:	4874      	ldr	r0, [pc, #464]	; (8081794 <setup+0x31c>)
 80815c4:	f7ff ff52 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Disconnected", setDisconnectedMode);
 80815c8:	4973      	ldr	r1, [pc, #460]	; (8081798 <setup+0x320>)
 80815ca:	4874      	ldr	r0, [pc, #464]	; (808179c <setup+0x324>)
 80815cc:	f7ff ff4e 	bl	808146c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
 80815d0:	4873      	ldr	r0, [pc, #460]	; (80817a0 <setup+0x328>)
 80815d2:	f000 fa07 	bl	80819e4 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 80815d6:	4631      	mov	r1, r6
 80815d8:	2301      	movs	r3, #1
 80815da:	f10d 020f 	add.w	r2, sp, #15
 80815de:	4870      	ldr	r0, [pc, #448]	; (80817a0 <setup+0x328>)
 80815e0:	f000 fa42 	bl	8081a68 <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
 80815e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80815e8:	4627      	mov	r7, r4
 80815ea:	2901      	cmp	r1, #1
 80815ec:	4d6d      	ldr	r5, [pc, #436]	; (80817a4 <setup+0x32c>)
 80815ee:	d00b      	beq.n	8081608 <setup+0x190>
    fram.erase();                                                     // Reset the FRAM to correct the issue
 80815f0:	486b      	ldr	r0, [pc, #428]	; (80817a0 <setup+0x328>)
 80815f2:	f000 fa01 	bl	80819f8 <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 80815f6:	2304      	movs	r3, #4
 80815f8:	4a6b      	ldr	r2, [pc, #428]	; (80817a8 <setup+0x330>)
 80815fa:	4631      	mov	r1, r6
 80815fc:	4868      	ldr	r0, [pc, #416]	; (80817a0 <setup+0x328>)
 80815fe:	f000 fa89 	bl	8081b14 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    loadSystemDefaults();                                             // Out of the box, we need the device to be awake and connected
 8081602:	f7ff fc93 	bl	8080f2c <_Z18loadSystemDefaultsv>
 8081606:	e004      	b.n	8081612 <setup+0x19a>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8081608:	232c      	movs	r3, #44	; 0x2c
 808160a:	462a      	mov	r2, r5
 808160c:	4864      	ldr	r0, [pc, #400]	; (80817a0 <setup+0x328>)
 808160e:	f000 fa2b 	bl	8081a68 <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081612:	2600      	movs	r6, #0
 8081614:	ac08      	add	r4, sp, #32
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
 8081616:	f7ff f95b 	bl	80808d0 <_Z17checkSystemValuesv>
 808161a:	f844 6d10 	str.w	r6, [r4, #-16]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 808161e:	4632      	mov	r2, r6
 8081620:	4631      	mov	r1, r6
 8081622:	4620      	mov	r0, r4
 8081624:	f000 fb5c 	bl	8081ce0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081628:	9b04      	ldr	r3, [sp, #16]

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 808162a:	2b14      	cmp	r3, #20
 808162c:	f000 811d 	beq.w	808186a <setup+0x3f2>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081630:	4632      	mov	r2, r6
 8081632:	4631      	mov	r1, r6
 8081634:	4620      	mov	r0, r4
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081636:	9604      	str	r6, [sp, #16]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081638:	f000 fb52 	bl	8081ce0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 808163c:	9b04      	ldr	r3, [sp, #16]
 808163e:	2b8c      	cmp	r3, #140	; 0x8c
 8081640:	f000 8113 	beq.w	808186a <setup+0x3f2>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"True") : strcpy(lowPowerModeStr,"False");
 8081644:	79ab      	ldrb	r3, [r5, #6]
 8081646:	b10b      	cbz	r3, 808164c <setup+0x1d4>
 8081648:	4958      	ldr	r1, [pc, #352]	; (80817ac <setup+0x334>)
 808164a:	e000      	b.n	808164e <setup+0x1d6>
 808164c:	4958      	ldr	r1, [pc, #352]	; (80817b0 <setup+0x338>)
 808164e:	4859      	ldr	r0, [pc, #356]	; (80817b4 <setup+0x33c>)
 8081650:	f003 fdf7 	bl	8085242 <strcpy>

  if (sysStatus.sensorType == 0) strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8081654:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8081658:	b90b      	cbnz	r3, 808165e <setup+0x1e6>
 808165a:	4957      	ldr	r1, [pc, #348]	; (80817b8 <setup+0x340>)
 808165c:	e003      	b.n	8081666 <setup+0x1ee>
  else if (sysStatus.sensorType == 1) strcpy(sensorTypeConfigStr,"PIR Sensor");
 808165e:	2b01      	cmp	r3, #1
 8081660:	bf0c      	ite	eq
 8081662:	4956      	ldreq	r1, [pc, #344]	; (80817bc <setup+0x344>)
  else strcpy(sensorTypeConfigStr,"Legacy Sensor");
 8081664:	4956      	ldrne	r1, [pc, #344]	; (80817c0 <setup+0x348>)
 8081666:	483a      	ldr	r0, [pc, #232]	; (8081750 <setup+0x2d8>)
 8081668:	f003 fdeb 	bl	8085242 <strcpy>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
 808166c:	69a8      	ldr	r0, [r5, #24]
 808166e:	f001 ff75 	bl	808355c <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();    // Perform the DST calculation here
 8081672:	f7ff f889 	bl	8080788 <_Z8isDSTusav>
 8081676:	b110      	cbz	r0, 808167e <setup+0x206>
 8081678:	f001 ff8a 	bl	8083590 <_ZN9TimeClass8beginDSTEv>
 808167c:	e001      	b.n	8081682 <setup+0x20a>
 808167e:	f001 ff91 	bl	80835a4 <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
 8081682:	6968      	ldr	r0, [r5, #20]
 8081684:	f001 ff4e 	bl	8083524 <_ZN9TimeClass4zoneEf>

  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 8081688:	f001 ff3e 	bl	8083508 <_ZN9TimeClass5localEv>
 808168c:	4606      	mov	r6, r0
 808168e:	f001 ffd2 	bl	8083636 <_ZN9TimeClass3nowEv>
 8081692:	1a30      	subs	r0, r6, r0
 8081694:	f002 fe54 	bl	8084340 <__aeabi_i2d>
 8081698:	a315      	add	r3, pc, #84	; (adr r3, 80816f0 <setup+0x278>)
 808169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808169e:	f002 ffdf 	bl	8084660 <__aeabi_ddiv>
 80816a2:	4e17      	ldr	r6, [pc, #92]	; (8081700 <setup+0x288>)
 80816a4:	e9cd 0100 	strd	r0, r1, [sp]
 80816a8:	4a46      	ldr	r2, [pc, #280]	; (80817c4 <setup+0x34c>)
 80816aa:	210a      	movs	r1, #10
 80816ac:	4824      	ldr	r0, [pc, #144]	; (8081740 <setup+0x2c8>)
 80816ae:	f000 fdd9 	bl	8082264 <snprintf>
 80816b2:	231c      	movs	r3, #28
 80816b4:	4632      	mov	r2, r6
 80816b6:	2150      	movs	r1, #80	; 0x50
 80816b8:	4839      	ldr	r0, [pc, #228]	; (80817a0 <setup+0x328>)
 80816ba:	f000 f9d5 	bl	8081a68 <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr, current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
 80816be:	6833      	ldr	r3, [r6, #0]
 80816c0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80817cc <setup+0x354>
 80816c4:	b11b      	cbz	r3, 80816ce <setup+0x256>
 80816c6:	68f0      	ldr	r0, [r6, #12]
 80816c8:	f001 fefa 	bl	80834c0 <_ZN9TimeClass4hourEl>
 80816cc:	e001      	b.n	80816d2 <setup+0x25a>
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
 80816ce:	f001 ffb9 	bl	8083644 <_ZN9TimeClass4hourEv>
 80816d2:	f8c8 0000 	str.w	r0, [r8]

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
 80816d6:	f7fe ff51 	bl	808057c <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) {
 80816da:	2005      	movs	r0, #5
 80816dc:	f002 fabe 	bl	8083c5c <digitalRead>
 80816e0:	2800      	cmp	r0, #0
 80816e2:	d17f      	bne.n	80817e4 <setup+0x36c>
    if (sysStatus.disconnectedLogger) setDisconnectedMode("0");        // If we want to make the device connect for updates / configuration - or switch it back to disconnected
 80816e4:	786b      	ldrb	r3, [r5, #1]
 80816e6:	2b00      	cmp	r3, #0
 80816e8:	d072      	beq.n	80817d0 <setup+0x358>
 80816ea:	4937      	ldr	r1, [pc, #220]	; (80817c8 <setup+0x350>)
 80816ec:	e071      	b.n	80817d2 <setup+0x35a>
 80816ee:	bf00      	nop
 80816f0:	00000000 	.word	0x00000000
 80816f4:	40ac2000 	.word	0x40ac2000
 80816f8:	20000218 	.word	0x20000218
 80816fc:	080800b9 	.word	0x080800b9
 8081700:	20000270 	.word	0x20000270
 8081704:	08085ec7 	.word	0x08085ec7
 8081708:	20000278 	.word	0x20000278
 808170c:	08085ed3 	.word	0x08085ed3
 8081710:	20000220 	.word	0x20000220
 8081714:	08085ede 	.word	0x08085ede
 8081718:	20000070 	.word	0x20000070
 808171c:	08085ee5 	.word	0x08085ee5
 8081720:	200002a8 	.word	0x200002a8
 8081724:	08085eed 	.word	0x08085eed
 8081728:	200002bc 	.word	0x200002bc
 808172c:	08085f6f 	.word	0x08085f6f
 8081730:	200002c0 	.word	0x200002c0
 8081734:	08085ef8 	.word	0x08085ef8
 8081738:	20000284 	.word	0x20000284
 808173c:	08085f02 	.word	0x08085f02
 8081740:	200001a9 	.word	0x200001a9
 8081744:	08085f09 	.word	0x08085f09
 8081748:	200001c7 	.word	0x200001c7
 808174c:	08085f14 	.word	0x08085f14
 8081750:	20000290 	.word	0x20000290
 8081754:	08085f23 	.word	0x08085f23
 8081758:	080800dd 	.word	0x080800dd
 808175c:	08085f30 	.word	0x08085f30
 8081760:	080809cd 	.word	0x080809cd
 8081764:	08085f3a 	.word	0x08085f3a
 8081768:	08080a69 	.word	0x08080a69
 808176c:	08085f46 	.word	0x08085f46
 8081770:	08080c49 	.word	0x08080c49
 8081774:	08085f50 	.word	0x08085f50
 8081778:	08081359 	.word	0x08081359
 808177c:	08085f5d 	.word	0x08085f5d
 8081780:	08080dbd 	.word	0x08080dbd
 8081784:	08085f6b 	.word	0x08085f6b
 8081788:	08080df5 	.word	0x08080df5
 808178c:	08085f78 	.word	0x08085f78
 8081790:	08080b4d 	.word	0x08080b4d
 8081794:	08085f82 	.word	0x08085f82
 8081798:	08080abd 	.word	0x08080abd
 808179c:	08085f91 	.word	0x08085f91
 80817a0:	200001b4 	.word	0x200001b4
 80817a4:	200002a0 	.word	0x200002a0
 80817a8:	08085b88 	.word	0x08085b88
 80817ac:	08085e29 	.word	0x08085e29
 80817b0:	08085e40 	.word	0x08085e40
 80817b4:	20000269 	.word	0x20000269
 80817b8:	08085c5b 	.word	0x08085c5b
 80817bc:	08085d5f 	.word	0x08085d5f
 80817c0:	08085d83 	.word	0x08085d83
 80817c4:	08085dd1 	.word	0x08085dd1
 80817c8:	08085cd3 	.word	0x08085cd3
 80817cc:	200001e8 	.word	0x200001e8
    else setDisconnectedMode("1");
 80817d0:	492b      	ldr	r1, [pc, #172]	; (8081880 <setup+0x408>)
 80817d2:	4620      	mov	r0, r4
 80817d4:	f001 fccb 	bl	808316e <_ZN6StringC1EPK19__FlashStringHelper>
 80817d8:	4620      	mov	r0, r4
 80817da:	f7ff f96f 	bl	8080abc <_Z19setDisconnectedMode6String>
 80817de:	4620      	mov	r0, r4
 80817e0:	f001 fc7e 	bl	80830e0 <_ZN6StringD1Ev>
  }

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  
  if (Time.day() != Time.day(current.lastCountTime)) resetCounts("1"); // Zero the counts for the new day
 80817e4:	f001 ff42 	bl	808366c <_ZN9TimeClass3dayEv>
 80817e8:	4680      	mov	r8, r0
 80817ea:	68f0      	ldr	r0, [r6, #12]
 80817ec:	f001 fe70 	bl	80834d0 <_ZN9TimeClass3dayEl>
 80817f0:	4580      	cmp	r8, r0
 80817f2:	d009      	beq.n	8081808 <setup+0x390>
 80817f4:	4922      	ldr	r1, [pc, #136]	; (8081880 <setup+0x408>)
 80817f6:	4620      	mov	r0, r4
 80817f8:	f001 fcb9 	bl	808316e <_ZN6StringC1EPK19__FlashStringHelper>
 80817fc:	4620      	mov	r0, r4
 80817fe:	f7ff f8e5 	bl	80809cc <_Z11resetCounts6String>
 8081802:	4620      	mov	r0, r4
 8081804:	f001 fc6c 	bl	80830e0 <_ZN6StringD1Ev>

  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
 8081808:	f001 ff1c 	bl	8083644 <_ZN9TimeClass4hourEv>
 808180c:	6a2b      	ldr	r3, [r5, #32]
 808180e:	4c1d      	ldr	r4, [pc, #116]	; (8081884 <setup+0x40c>)
 8081810:	4298      	cmp	r0, r3
 8081812:	da18      	bge.n	8081846 <setup+0x3ce>
 8081814:	f001 ff16 	bl	8083644 <_ZN9TimeClass4hourEv>
 8081818:	69e3      	ldr	r3, [r4, #28]
 808181a:	4298      	cmp	r0, r3
 808181c:	db13      	blt.n	8081846 <setup+0x3ce>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808181e:	4a1a      	ldr	r2, [pc, #104]	; (8081888 <setup+0x410>)
 8081820:	2300      	movs	r3, #0
 8081822:	6013      	str	r3, [r2, #0]
 8081824:	4a19      	ldr	r2, [pc, #100]	; (808188c <setup+0x414>)
  else {                                                              // Park is open let's get ready for the day
    hourlyAtomic.store(0,std::memory_order_relaxed);
    dailyAtomic.store(0,std::memory_order_relaxed);
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
 8081826:	491a      	ldr	r1, [pc, #104]	; (8081890 <setup+0x418>)
 8081828:	6013      	str	r3, [r2, #0]
 808182a:	2019      	movs	r0, #25
 808182c:	9300      	str	r3, [sp, #0]
 808182e:	2201      	movs	r2, #1
 8081830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081834:	f001 fa2e 	bl	8082c94 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
 8081838:	78e3      	ldrb	r3, [r4, #3]
 808183a:	b113      	cbz	r3, 8081842 <setup+0x3ca>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808183c:	f000 fc72 	bl	8082124 <spark_cloud_flag_connected>
 8081840:	b1d0      	cbz	r0, 8081878 <setup+0x400>
    takeMeasurements();                                               // Populates values so you can read them before the hour
 8081842:	f7ff f809 	bl	8080858 <_Z16takeMeasurementsv>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8081846:	683b      	ldr	r3, [r7, #0]
 8081848:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 808184c:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
 8081850:	8353      	strh	r3, [r2, #26]
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
 8081852:	4b10      	ldr	r3, [pc, #64]	; (8081894 <setup+0x41c>)
 8081854:	781a      	ldrb	r2, [r3, #0]
 8081856:	b90a      	cbnz	r2, 808185c <setup+0x3e4>
 8081858:	2202      	movs	r2, #2
 808185a:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
 808185c:	2100      	movs	r1, #0
 808185e:	2007      	movs	r0, #7
 8081860:	f002 f9e3 	bl	8083c2a <digitalWrite>
}
 8081864:	b008      	add	sp, #32
 8081866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
 808186a:	692b      	ldr	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
 808186c:	2201      	movs	r2, #1
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
 808186e:	3301      	adds	r3, #1
 8081870:	612b      	str	r3, [r5, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
 8081872:	4b09      	ldr	r3, [pc, #36]	; (8081898 <setup+0x420>)
 8081874:	701a      	strb	r2, [r3, #0]
 8081876:	e6e5      	b.n	8081644 <setup+0x1cc>
  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                              // Park is open let's get ready for the day
    hourlyAtomic.store(0,std::memory_order_relaxed);
    dailyAtomic.store(0,std::memory_order_relaxed);
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
 8081878:	f7fe fece 	bl	8080618 <_Z17connectToParticlev>
 808187c:	e7e1      	b.n	8081842 <setup+0x3ca>
 808187e:	bf00      	nop
 8081880:	08086019 	.word	0x08086019
 8081884:	200002a0 	.word	0x200002a0
 8081888:	200001e0 	.word	0x200001e0
 808188c:	200001dc 	.word	0x200001dc
 8081890:	0808013d 	.word	0x0808013d
 8081894:	200001d9 	.word	0x200001d9
 8081898:	200001d8 	.word	0x200001d8

0808189c <_GLOBAL__sub_I___appProductID>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808189c:	4b2e      	ldr	r3, [pc, #184]	; (8081958 <_GLOBAL__sub_I___appProductID+0xbc>)
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 808189e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80818a2:	2400      	movs	r4, #0
 80818a4:	601c      	str	r4, [r3, #0]
 80818a6:	4b2d      	ldr	r3, [pc, #180]	; (808195c <_GLOBAL__sub_I___appProductID+0xc0>)
 80818a8:	2601      	movs	r6, #1
 80818aa:	701e      	strb	r6, [r3, #0]
 80818ac:	4b2c      	ldr	r3, [pc, #176]	; (8081960 <_GLOBAL__sub_I___appProductID+0xc4>)
 80818ae:	2208      	movs	r2, #8
 80818b0:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80818b2:	f000 fa4d 	bl	8081d50 <HAL_Pin_Map>
 80818b6:	4b2b      	ldr	r3, [pc, #172]	; (8081964 <_GLOBAL__sub_I___appProductID+0xc8>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80818b8:	4d2b      	ldr	r5, [pc, #172]	; (8081968 <_GLOBAL__sub_I___appProductID+0xcc>)
 80818ba:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80818bc:	f002 f946 	bl	8083b4c <spark_protocol_instance>
 80818c0:	4623      	mov	r3, r4
 80818c2:	4622      	mov	r2, r4
 80818c4:	f642 6166 	movw	r1, #11878	; 0x2e66
 80818c8:	f002 f948 	bl	8083b5c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80818cc:	f002 f93e 	bl	8083b4c <spark_protocol_instance>
 80818d0:	4622      	mov	r2, r4
 80818d2:	4631      	mov	r1, r6
 80818d4:	4623      	mov	r3, r4
 80818d6:	f002 f949 	bl	8083b6c <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80818da:	f64f 73ff 	movw	r3, #65535	; 0xffff
#include "electrondoc.h"                            // Pinout Documentation File
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include <atomic>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
 80818de:	4f23      	ldr	r7, [pc, #140]	; (808196c <_GLOBAL__sub_I___appProductID+0xd0>)
 80818e0:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80818e2:	602c      	str	r4, [r5, #0]
 80818e4:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80818e6:	71ac      	strb	r4, [r5, #6]
 80818e8:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80818ea:	2002      	movs	r0, #2
 80818ec:	f000 fb92 	bl	8082014 <set_system_mode>
 80818f0:	463a      	mov	r2, r7
 80818f2:	491f      	ldr	r1, [pc, #124]	; (8081970 <_GLOBAL__sub_I___appProductID+0xd4>)
 80818f4:	4628      	mov	r0, r5
 80818f6:	f002 fa65 	bl	8083dc4 <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 80818fa:	4d1e      	ldr	r5, [pc, #120]	; (8081974 <_GLOBAL__sub_I___appProductID+0xd8>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
 80818fc:	4621      	mov	r1, r4
 80818fe:	4630      	mov	r0, r6
 8081900:	f000 fba0 	bl	8082044 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081904:	4631      	mov	r1, r6
 8081906:	2004      	movs	r0, #4
 8081908:	f000 f9da 	bl	8081cc0 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 808190c:	f04f 0810 	mov.w	r8, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081910:	1d28      	adds	r0, r5, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081912:	4642      	mov	r2, r8
 8081914:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081916:	6028      	str	r0, [r5, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081918:	f003 fc49 	bl	80851ae <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
 808191c:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
 808191e:	463a      	mov	r2, r7
 8081920:	4915      	ldr	r1, [pc, #84]	; (8081978 <_GLOBAL__sub_I___appProductID+0xdc>)
 8081922:	4628      	mov	r0, r5
 8081924:	80eb      	strh	r3, [r5, #6]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081926:	752e      	strb	r6, [r5, #20]
        config_.size = sizeof(hal_sleep_config_t);
 8081928:	f8a5 8004 	strh.w	r8, [r5, #4]
 808192c:	f002 fa4a 	bl	8083dc4 <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 8081930:	f002 f9e4 	bl	8083cfc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 8081934:	4d11      	ldr	r5, [pc, #68]	; (808197c <_GLOBAL__sub_I___appProductID+0xe0>)
 8081936:	4623      	mov	r3, r4
 8081938:	4601      	mov	r1, r0
 808193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 808193e:	4628      	mov	r0, r5
 8081940:	f000 f846 	bl	80819d0 <_ZN6MB85RCC1ER7TwoWireji>
 8081944:	4b0e      	ldr	r3, [pc, #56]	; (8081980 <_GLOBAL__sub_I___appProductID+0xe4>)
 8081946:	463a      	mov	r2, r7
 8081948:	602b      	str	r3, [r5, #0]
 808194a:	4628      	mov	r0, r5
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 808194c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 8081950:	490c      	ldr	r1, [pc, #48]	; (8081984 <_GLOBAL__sub_I___appProductID+0xe8>)
 8081952:	f002 ba37 	b.w	8083dc4 <__aeabi_atexit>
 8081956:	bf00      	nop
 8081958:	20000208 	.word	0x20000208
 808195c:	200001c4 	.word	0x200001c4
 8081960:	200001c6 	.word	0x200001c6
 8081964:	20000218 	.word	0x20000218
 8081968:	2000020c 	.word	0x2000020c
 808196c:	20000134 	.word	0x20000134
 8081970:	080801f7 	.word	0x080801f7
 8081974:	200001f0 	.word	0x200001f0
 8081978:	080800c5 	.word	0x080800c5
 808197c:	200001b4 	.word	0x200001b4
 8081980:	08085b30 	.word	0x08085b30
 8081984:	080800f9 	.word	0x080800f9

08081988 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081988:	4770      	bx	lr

0808198a <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
 808198a:	b510      	push	{r4, lr}
 808198c:	4604      	mov	r4, r0
}
 808198e:	2110      	movs	r1, #16
 8081990:	f002 fa1d 	bl	8083dce <_ZdlPvj>
 8081994:	4620      	mov	r0, r4
 8081996:	bd10      	pop	{r4, pc}

08081998 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 8081998:	6803      	ldr	r3, [r0, #0]
 808199a:	b2c9      	uxtb	r1, r1
 808199c:	689b      	ldr	r3, [r3, #8]
 808199e:	4718      	bx	r3

080819a0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80819a0:	b40e      	push	{r1, r2, r3}
 80819a2:	b500      	push	{lr}
 80819a4:	b08c      	sub	sp, #48	; 0x30
 80819a6:	aa0d      	add	r2, sp, #52	; 0x34
 80819a8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80819ac:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80819ae:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80819b2:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80819b4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80819b6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80819b8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80819ba:	aa04      	add	r2, sp, #16
 80819bc:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80819be:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80819c0:	f000 fb0e 	bl	8081fe0 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80819c4:	b00c      	add	sp, #48	; 0x30
 80819c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80819ca:	b003      	add	sp, #12
 80819cc:	4770      	bx	lr
	...

080819d0 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 80819d0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 80819d2:	4d03      	ldr	r5, [pc, #12]	; (80819e0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 80819d4:	6041      	str	r1, [r0, #4]
 80819d6:	6005      	str	r5, [r0, #0]
 80819d8:	6082      	str	r2, [r0, #8]
 80819da:	60c3      	str	r3, [r0, #12]
}
 80819dc:	bd30      	pop	{r4, r5, pc}
 80819de:	bf00      	nop
 80819e0:	080860a0 	.word	0x080860a0

080819e4 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
 80819e4:	6840      	ldr	r0, [r0, #4]
 80819e6:	f001 b8ff 	b.w	8082be8 <_ZN7TwoWire5beginEv>

080819ea <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80819ea:	b510      	push	{r4, lr}
 80819ec:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80819ee:	6800      	ldr	r0, [r0, #0]
 80819f0:	f001 f946 	bl	8082c80 <_ZN7TwoWire6unlockEv>
 80819f4:	4620      	mov	r0, r4
 80819f6:	bd10      	pop	{r4, pc}

080819f8 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 80819f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80819fc:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
 80819fe:	6840      	ldr	r0, [r0, #4]

void MB85RC::begin() {
	wire.begin();
}

bool MB85RC::erase() {
 8081a00:	b08a      	sub	sp, #40	; 0x28
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081a02:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081a04:	f001 f933 	bl	8082c6e <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081a08:	221e      	movs	r2, #30
 8081a0a:	2100      	movs	r1, #0
 8081a0c:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
 8081a0e:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081a10:	f003 fbcd 	bl	80851ae <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
 8081a14:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 8081a16:	b1de      	cbz	r6, 8081a50 <_ZN6MB85RC5eraseEv+0x58>
 8081a18:	46b0      	mov	r8, r6
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 8081a1a:	683b      	ldr	r3, [r7, #0]
 8081a1c:	2e1e      	cmp	r6, #30
 8081a1e:	bf28      	it	cs
 8081a20:	f04f 081e 	movcs.w	r8, #30
 8081a24:	68dc      	ldr	r4, [r3, #12]
 8081a26:	aa02      	add	r2, sp, #8
 8081a28:	4643      	mov	r3, r8
 8081a2a:	4629      	mov	r1, r5
 8081a2c:	4638      	mov	r0, r7
 8081a2e:	47a0      	blx	r4
			if (!result) {
 8081a30:	4604      	mov	r4, r0
 8081a32:	b948      	cbnz	r0, 8081a48 <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 8081a34:	462a      	mov	r2, r5
 8081a36:	490a      	ldr	r1, [pc, #40]	; (8081a60 <_ZN6MB85RC5eraseEv+0x68>)
 8081a38:	480a      	ldr	r0, [pc, #40]	; (8081a64 <_ZN6MB85RC5eraseEv+0x6c>)
 8081a3a:	f7ff ffb1 	bl	80819a0 <_ZNK5spark6Logger4infoEPKcz>
 8081a3e:	a801      	add	r0, sp, #4
 8081a40:	f7ff ffd3 	bl	80819ea <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
 8081a44:	4620      	mov	r0, r4
 8081a46:	e007      	b.n	8081a58 <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
 8081a48:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
 8081a4c:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 8081a4e:	e7e2      	b.n	8081a16 <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
 8081a50:	a801      	add	r0, sp, #4
 8081a52:	f7ff ffca 	bl	80819ea <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
 8081a56:	2001      	movs	r0, #1
}
 8081a58:	b00a      	add	sp, #40	; 0x28
 8081a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081a5e:	bf00      	nop
 8081a60:	0808601b 	.word	0x0808601b
 8081a64:	200003bc 	.word	0x200003bc

08081a68 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081a68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8081a6c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081a6e:	6840      	ldr	r0, [r0, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081a70:	460e      	mov	r6, r1
 8081a72:	4617      	mov	r7, r2
 8081a74:	4698      	mov	r8, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081a76:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081a78:	f001 f8f9 	bl	8082c6e <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
 8081a7c:	f1b8 0f00 	cmp.w	r8, #0
 8081a80:	d101      	bne.n	8081a86 <_ZN6MB85RC8readDataEjPhj+0x1e>
 8081a82:	2401      	movs	r4, #1
 8081a84:	e03f      	b.n	8081b06 <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081a86:	68e1      	ldr	r1, [r4, #12]
 8081a88:	6860      	ldr	r0, [r4, #4]
 8081a8a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081a8e:	f001 f8e3 	bl	8082c58 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081a92:	0a31      	lsrs	r1, r6, #8
 8081a94:	6860      	ldr	r0, [r4, #4]
 8081a96:	f7ff ff7f 	bl	8081998 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081a9a:	4631      	mov	r1, r6
 8081a9c:	6860      	ldr	r0, [r4, #4]
 8081a9e:	f7ff ff7b 	bl	8081998 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 8081aa2:	2100      	movs	r1, #0
 8081aa4:	6860      	ldr	r0, [r4, #4]
 8081aa6:	f001 f8da 	bl	8082c5e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081aaa:	b108      	cbz	r0, 8081ab0 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 8081aac:	2400      	movs	r4, #0
 8081aae:	e02a      	b.n	8081b06 <_ZN6MB85RC8readDataEjPhj+0x9e>
 8081ab0:	46c1      	mov	r9, r8
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
 8081ab2:	68e1      	ldr	r1, [r4, #12]
 8081ab4:	f1b8 0f20 	cmp.w	r8, #32
 8081ab8:	bf28      	it	cs
 8081aba:	f04f 0920 	movcs.w	r9, #32
 8081abe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081ac2:	2301      	movs	r3, #1
 8081ac4:	464a      	mov	r2, r9
 8081ac6:	b2c9      	uxtb	r1, r1
 8081ac8:	6860      	ldr	r0, [r4, #4]
 8081aca:	f001 f8af 	bl	8082c2c <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
 8081ace:	f002 f915 	bl	8083cfc <_Z19__fetch_global_Wirev>
 8081ad2:	6803      	ldr	r3, [r0, #0]
 8081ad4:	691b      	ldr	r3, [r3, #16]
 8081ad6:	4798      	blx	r3
 8081ad8:	4548      	cmp	r0, r9
 8081ada:	dbe7      	blt.n	8081aac <_ZN6MB85RC8readDataEjPhj+0x44>
 8081adc:	463d      	mov	r5, r7
 8081ade:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
 8081ae2:	f002 f90b 	bl	8083cfc <_Z19__fetch_global_Wirev>
 8081ae6:	6803      	ldr	r3, [r0, #0]
 8081ae8:	695b      	ldr	r3, [r3, #20]
 8081aea:	4798      	blx	r3
 8081aec:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
 8081af0:	1bea      	subs	r2, r5, r7
 8081af2:	ebc5 0308 	rsb	r3, r5, r8
 8081af6:	4591      	cmp	r9, r2
 8081af8:	eb05 060a 	add.w	r6, r5, sl
 8081afc:	443b      	add	r3, r7
 8081afe:	d8f0      	bhi.n	8081ae2 <_ZN6MB85RC8readDataEjPhj+0x7a>
 8081b00:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
 8081b02:	462f      	mov	r7, r5
 8081b04:	e7ba      	b.n	8081a7c <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 8081b06:	a801      	add	r0, sp, #4
 8081b08:	f7ff ff6f 	bl	80819ea <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 8081b0c:	4620      	mov	r0, r4
 8081b0e:	b002      	add	sp, #8
 8081b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081b14 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081b14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8081b18:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081b1a:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081b1c:	460d      	mov	r5, r1
 8081b1e:	4690      	mov	r8, r2
 8081b20:	461f      	mov	r7, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081b22:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081b24:	f001 f8a3 	bl	8082c6e <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
 8081b28:	b34f      	cbz	r7, 8081b7e <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081b2a:	68e1      	ldr	r1, [r4, #12]
 8081b2c:	6860      	ldr	r0, [r4, #4]
 8081b2e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081b32:	f001 f891 	bl	8082c58 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081b36:	0a29      	lsrs	r1, r5, #8
 8081b38:	6860      	ldr	r0, [r4, #4]
 8081b3a:	f7ff ff2d 	bl	8081998 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081b3e:	4629      	mov	r1, r5
 8081b40:	6860      	ldr	r0, [r4, #4]
 8081b42:	f7ff ff29 	bl	8081998 <_ZN7TwoWire5writeEj>
 8081b46:	4646      	mov	r6, r8
 8081b48:	f108 091e 	add.w	r9, r8, #30
 8081b4c:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 8081b50:	6860      	ldr	r0, [r4, #4]
 8081b52:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081b56:	6803      	ldr	r3, [r0, #0]
 8081b58:	eb06 050a 	add.w	r5, r6, sl
 8081b5c:	689b      	ldr	r3, [r3, #8]
 8081b5e:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081b60:	45b1      	cmp	r9, r6
				wire.write(*data);
				framAddr++;
				data++;
 8081b62:	46b0      	mov	r8, r6
				dataLen--;
 8081b64:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081b68:	d001      	beq.n	8081b6e <_ZN6MB85RC9writeDataEjPKhj+0x5a>
 8081b6a:	2f00      	cmp	r7, #0
 8081b6c:	d1f0      	bne.n	8081b50 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
 8081b6e:	2101      	movs	r1, #1
 8081b70:	6860      	ldr	r0, [r4, #4]
 8081b72:	f001 f874 	bl	8082c5e <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081b76:	2800      	cmp	r0, #0
 8081b78:	d0d6      	beq.n	8081b28 <_ZN6MB85RC9writeDataEjPKhj+0x14>
 8081b7a:	2400      	movs	r4, #0
 8081b7c:	e000      	b.n	8081b80 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
 8081b7e:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 8081b80:	a801      	add	r0, sp, #4
 8081b82:	f7ff ff32 	bl	80819ea <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081b86:	4620      	mov	r0, r4
 8081b88:	b002      	add	sp, #8
 8081b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081b8e <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081b8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081b92:	460e      	mov	r6, r1
 8081b94:	4615      	mov	r5, r2
 8081b96:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081b98:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081b9a:	b08b      	sub	sp, #44	; 0x2c
 8081b9c:	461c      	mov	r4, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081b9e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081ba0:	f001 f865 	bl	8082c6e <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
 8081ba4:	42ae      	cmp	r6, r5
 8081ba6:	d223      	bcs.n	8081bf0 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 8081ba8:	4426      	add	r6, r4
			framAddrTo += numBytes;
 8081baa:	4425      	add	r5, r4
			while(numBytes > 0) {
 8081bac:	b90c      	cbnz	r4, 8081bb2 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081bae:	2401      	movs	r4, #1
 8081bb0:	e03f      	b.n	8081c32 <_ZN6MB85RC8moveDataEjjj+0xa4>
 8081bb2:	4627      	mov	r7, r4
 8081bb4:	2c1e      	cmp	r4, #30
 8081bb6:	bf28      	it	cs
 8081bb8:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081bba:	f8d8 3000 	ldr.w	r3, [r8]
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
 8081bbe:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081bc0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081bc4:	aa02      	add	r2, sp, #8
 8081bc6:	463b      	mov	r3, r7
 8081bc8:	4631      	mov	r1, r6
 8081bca:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
 8081bcc:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
 8081bce:	47c8      	blx	r9
				if (!result) {
 8081bd0:	b908      	cbnz	r0, 8081bd6 <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081bd2:	2400      	movs	r4, #0
 8081bd4:	e02d      	b.n	8081c32 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
 8081bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8081bda:	aa02      	add	r2, sp, #8
 8081bdc:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081be0:	4629      	mov	r1, r5
 8081be2:	463b      	mov	r3, r7
 8081be4:	4640      	mov	r0, r8
 8081be6:	47c8      	blx	r9
				if (!result) {
 8081be8:	2800      	cmp	r0, #0
 8081bea:	d0f2      	beq.n	8081bd2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
 8081bec:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
 8081bee:	e7dd      	b.n	8081bac <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
 8081bf0:	d9dd      	bls.n	8081bae <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 8081bf2:	2c00      	cmp	r4, #0
 8081bf4:	d0db      	beq.n	8081bae <_ZN6MB85RC8moveDataEjjj+0x20>
 8081bf6:	4627      	mov	r7, r4
 8081bf8:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
 8081bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8081bfe:	bf28      	it	cs
 8081c00:	271e      	movcs	r7, #30
 8081c02:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081c06:	aa02      	add	r2, sp, #8
 8081c08:	463b      	mov	r3, r7
 8081c0a:	4631      	mov	r1, r6
 8081c0c:	4640      	mov	r0, r8
 8081c0e:	47c8      	blx	r9
				if (!result) {
 8081c10:	2800      	cmp	r0, #0
 8081c12:	d0de      	beq.n	8081bd2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
 8081c14:	f8d8 3000 	ldr.w	r3, [r8]
 8081c18:	aa02      	add	r2, sp, #8
 8081c1a:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081c1e:	4629      	mov	r1, r5
 8081c20:	463b      	mov	r3, r7
 8081c22:	4640      	mov	r0, r8
 8081c24:	47c8      	blx	r9
				if (!result) {
 8081c26:	2800      	cmp	r0, #0
 8081c28:	d0d3      	beq.n	8081bd2 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
 8081c2a:	443e      	add	r6, r7
				framAddrTo += count;
 8081c2c:	443d      	add	r5, r7
				numBytes -= count;
 8081c2e:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 8081c30:	e7df      	b.n	8081bf2 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081c32:	a801      	add	r0, sp, #4
 8081c34:	f7ff fed9 	bl	80819ea <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 8081c38:	4620      	mov	r0, r4
 8081c3a:	b00b      	add	sp, #44	; 0x2c
 8081c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08081c40 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
 8081c40:	f000 b886 	b.w	8081d50 <HAL_Pin_Map>

08081c44 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081c44:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081c46:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081c48:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081c4a:	b113      	cbz	r3, 8081c52 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081c4c:	2203      	movs	r2, #3
 8081c4e:	4601      	mov	r1, r0
 8081c50:	4798      	blx	r3
    }
 8081c52:	4620      	mov	r0, r4
 8081c54:	bd10      	pop	{r4, pc}
	...

08081c58 <_GLOBAL__sub_I_pubqLogger>:
 8081c58:	b508      	push	{r3, lr}
 8081c5a:	f000 f879 	bl	8081d50 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081c5e:	4a02      	ldr	r2, [pc, #8]	; (8081c68 <_GLOBAL__sub_I_pubqLogger+0x10>)
 8081c60:	4b02      	ldr	r3, [pc, #8]	; (8081c6c <_GLOBAL__sub_I_pubqLogger+0x14>)
 8081c62:	601a      	str	r2, [r3, #0]
 8081c64:	bd08      	pop	{r3, pc}
 8081c66:	bf00      	nop
 8081c68:	08086166 	.word	0x08086166
 8081c6c:	200002cc 	.word	0x200002cc

08081c70 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081c70:	b508      	push	{r3, lr}
 8081c72:	4b02      	ldr	r3, [pc, #8]	; (8081c7c <inet_gethostbyname+0xc>)
 8081c74:	681b      	ldr	r3, [r3, #0]
 8081c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081c78:	9301      	str	r3, [sp, #4]
 8081c7a:	bd08      	pop	{r3, pc}
 8081c7c:	08060020 	.word	0x08060020

08081c80 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081c80:	b508      	push	{r3, lr}
 8081c82:	4b02      	ldr	r3, [pc, #8]	; (8081c8c <cellular_signal+0xc>)
 8081c84:	681b      	ldr	r3, [r3, #0]
 8081c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081c88:	9301      	str	r3, [sp, #4]
 8081c8a:	bd08      	pop	{r3, pc}
 8081c8c:	08060020 	.word	0x08060020

08081c90 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081c90:	b508      	push	{r3, lr}
 8081c92:	4b02      	ldr	r3, [pc, #8]	; (8081c9c <cellular_command+0xc>)
 8081c94:	681b      	ldr	r3, [r3, #0]
 8081c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081c98:	9301      	str	r3, [sp, #4]
 8081c9a:	bd08      	pop	{r3, pc}
 8081c9c:	08060020 	.word	0x08060020

08081ca0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081ca0:	b508      	push	{r3, lr}
 8081ca2:	4b02      	ldr	r3, [pc, #8]	; (8081cac <os_mutex_recursive_create+0xc>)
 8081ca4:	681b      	ldr	r3, [r3, #0]
 8081ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081ca8:	9301      	str	r3, [sp, #4]
 8081caa:	bd08      	pop	{r3, pc}
 8081cac:	080401d0 	.word	0x080401d0

08081cb0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081cb0:	b508      	push	{r3, lr}
 8081cb2:	4b02      	ldr	r3, [pc, #8]	; (8081cbc <os_mutex_recursive_destroy+0xc>)
 8081cb4:	681b      	ldr	r3, [r3, #0]
 8081cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081cb8:	9301      	str	r3, [sp, #4]
 8081cba:	bd08      	pop	{r3, pc}
 8081cbc:	080401d0 	.word	0x080401d0

08081cc0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081cc0:	b508      	push	{r3, lr}
 8081cc2:	4b02      	ldr	r3, [pc, #8]	; (8081ccc <HAL_Feature_Set+0xc>)
 8081cc4:	681b      	ldr	r3, [r3, #0]
 8081cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081cc8:	9301      	str	r3, [sp, #4]
 8081cca:	bd08      	pop	{r3, pc}
 8081ccc:	080401b8 	.word	0x080401b8

08081cd0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081cd0:	b508      	push	{r3, lr}
 8081cd2:	4b02      	ldr	r3, [pc, #8]	; (8081cdc <HAL_Core_System_Reset_Ex+0xc>)
 8081cd4:	681b      	ldr	r3, [r3, #0]
 8081cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8081cd8:	9301      	str	r3, [sp, #4]
 8081cda:	bd08      	pop	{r3, pc}
 8081cdc:	080401b8 	.word	0x080401b8

08081ce0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081ce0:	b508      	push	{r3, lr}
 8081ce2:	4b02      	ldr	r3, [pc, #8]	; (8081cec <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081ce4:	681b      	ldr	r3, [r3, #0]
 8081ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081ce8:	9301      	str	r3, [sp, #4]
 8081cea:	bd08      	pop	{r3, pc}
 8081cec:	080401b8 	.word	0x080401b8

08081cf0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081cf0:	b508      	push	{r3, lr}
 8081cf2:	4b02      	ldr	r3, [pc, #8]	; (8081cfc <HAL_RNG_GetRandomNumber+0xc>)
 8081cf4:	681b      	ldr	r3, [r3, #0]
 8081cf6:	685b      	ldr	r3, [r3, #4]
 8081cf8:	9301      	str	r3, [sp, #4]
 8081cfa:	bd08      	pop	{r3, pc}
 8081cfc:	0804019c 	.word	0x0804019c

08081d00 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081d00:	b508      	push	{r3, lr}
 8081d02:	4b02      	ldr	r3, [pc, #8]	; (8081d0c <HAL_Delay_Microseconds+0xc>)
 8081d04:	681b      	ldr	r3, [r3, #0]
 8081d06:	68db      	ldr	r3, [r3, #12]
 8081d08:	9301      	str	r3, [sp, #4]
 8081d0a:	bd08      	pop	{r3, pc}
 8081d0c:	0804019c 	.word	0x0804019c

08081d10 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081d10:	b508      	push	{r3, lr}
 8081d12:	4b02      	ldr	r3, [pc, #8]	; (8081d1c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081d14:	681b      	ldr	r3, [r3, #0]
 8081d16:	695b      	ldr	r3, [r3, #20]
 8081d18:	9301      	str	r3, [sp, #4]
 8081d1a:	bd08      	pop	{r3, pc}
 8081d1c:	0804019c 	.word	0x0804019c

08081d20 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081d20:	b508      	push	{r3, lr}
 8081d22:	4b02      	ldr	r3, [pc, #8]	; (8081d2c <HAL_RTC_Get_UnixTime+0xc>)
 8081d24:	681b      	ldr	r3, [r3, #0]
 8081d26:	69db      	ldr	r3, [r3, #28]
 8081d28:	9301      	str	r3, [sp, #4]
 8081d2a:	bd08      	pop	{r3, pc}
 8081d2c:	0804019c 	.word	0x0804019c

08081d30 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081d30:	b508      	push	{r3, lr}
 8081d32:	4b02      	ldr	r3, [pc, #8]	; (8081d3c <HAL_RTC_Time_Is_Valid+0xc>)
 8081d34:	681b      	ldr	r3, [r3, #0]
 8081d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081d38:	9301      	str	r3, [sp, #4]
 8081d3a:	bd08      	pop	{r3, pc}
 8081d3c:	0804019c 	.word	0x0804019c

08081d40 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081d40:	b508      	push	{r3, lr}
 8081d42:	4b02      	ldr	r3, [pc, #8]	; (8081d4c <hal_timer_millis+0xc>)
 8081d44:	681b      	ldr	r3, [r3, #0]
 8081d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081d48:	9301      	str	r3, [sp, #4]
 8081d4a:	bd08      	pop	{r3, pc}
 8081d4c:	0804019c 	.word	0x0804019c

08081d50 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081d50:	b508      	push	{r3, lr}
 8081d52:	4b02      	ldr	r3, [pc, #8]	; (8081d5c <HAL_Pin_Map+0xc>)
 8081d54:	681b      	ldr	r3, [r3, #0]
 8081d56:	681b      	ldr	r3, [r3, #0]
 8081d58:	9301      	str	r3, [sp, #4]
 8081d5a:	bd08      	pop	{r3, pc}
 8081d5c:	080401b0 	.word	0x080401b0

08081d60 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081d60:	b508      	push	{r3, lr}
 8081d62:	4b02      	ldr	r3, [pc, #8]	; (8081d6c <HAL_Validate_Pin_Function+0xc>)
 8081d64:	681b      	ldr	r3, [r3, #0]
 8081d66:	685b      	ldr	r3, [r3, #4]
 8081d68:	9301      	str	r3, [sp, #4]
 8081d6a:	bd08      	pop	{r3, pc}
 8081d6c:	080401b0 	.word	0x080401b0

08081d70 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081d70:	b508      	push	{r3, lr}
 8081d72:	4b02      	ldr	r3, [pc, #8]	; (8081d7c <HAL_Pin_Mode+0xc>)
 8081d74:	681b      	ldr	r3, [r3, #0]
 8081d76:	689b      	ldr	r3, [r3, #8]
 8081d78:	9301      	str	r3, [sp, #4]
 8081d7a:	bd08      	pop	{r3, pc}
 8081d7c:	080401b0 	.word	0x080401b0

08081d80 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081d80:	b508      	push	{r3, lr}
 8081d82:	4b02      	ldr	r3, [pc, #8]	; (8081d8c <HAL_Get_Pin_Mode+0xc>)
 8081d84:	681b      	ldr	r3, [r3, #0]
 8081d86:	68db      	ldr	r3, [r3, #12]
 8081d88:	9301      	str	r3, [sp, #4]
 8081d8a:	bd08      	pop	{r3, pc}
 8081d8c:	080401b0 	.word	0x080401b0

08081d90 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081d90:	b508      	push	{r3, lr}
 8081d92:	4b02      	ldr	r3, [pc, #8]	; (8081d9c <HAL_GPIO_Write+0xc>)
 8081d94:	681b      	ldr	r3, [r3, #0]
 8081d96:	691b      	ldr	r3, [r3, #16]
 8081d98:	9301      	str	r3, [sp, #4]
 8081d9a:	bd08      	pop	{r3, pc}
 8081d9c:	080401b0 	.word	0x080401b0

08081da0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081da0:	b508      	push	{r3, lr}
 8081da2:	4b02      	ldr	r3, [pc, #8]	; (8081dac <HAL_GPIO_Read+0xc>)
 8081da4:	681b      	ldr	r3, [r3, #0]
 8081da6:	695b      	ldr	r3, [r3, #20]
 8081da8:	9301      	str	r3, [sp, #4]
 8081daa:	bd08      	pop	{r3, pc}
 8081dac:	080401b0 	.word	0x080401b0

08081db0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081db0:	b508      	push	{r3, lr}
 8081db2:	4b02      	ldr	r3, [pc, #8]	; (8081dbc <HAL_Interrupts_Attach+0xc>)
 8081db4:	681b      	ldr	r3, [r3, #0]
 8081db6:	699b      	ldr	r3, [r3, #24]
 8081db8:	9301      	str	r3, [sp, #4]
 8081dba:	bd08      	pop	{r3, pc}
 8081dbc:	080401b0 	.word	0x080401b0

08081dc0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081dc0:	b508      	push	{r3, lr}
 8081dc2:	4b02      	ldr	r3, [pc, #8]	; (8081dcc <HAL_Interrupts_Detach+0xc>)
 8081dc4:	681b      	ldr	r3, [r3, #0]
 8081dc6:	69db      	ldr	r3, [r3, #28]
 8081dc8:	9301      	str	r3, [sp, #4]
 8081dca:	bd08      	pop	{r3, pc}
 8081dcc:	080401b0 	.word	0x080401b0

08081dd0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8081dd0:	b508      	push	{r3, lr}
 8081dd2:	4b02      	ldr	r3, [pc, #8]	; (8081ddc <HAL_ADC_Read+0xc>)
 8081dd4:	681b      	ldr	r3, [r3, #0]
 8081dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081dd8:	9301      	str	r3, [sp, #4]
 8081dda:	bd08      	pop	{r3, pc}
 8081ddc:	080401b0 	.word	0x080401b0

08081de0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081de0:	b508      	push	{r3, lr}
 8081de2:	4b02      	ldr	r3, [pc, #8]	; (8081dec <HAL_I2C_Begin+0xc>)
 8081de4:	681b      	ldr	r3, [r3, #0]
 8081de6:	68db      	ldr	r3, [r3, #12]
 8081de8:	9301      	str	r3, [sp, #4]
 8081dea:	bd08      	pop	{r3, pc}
 8081dec:	080401ac 	.word	0x080401ac

08081df0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8081df0:	b508      	push	{r3, lr}
 8081df2:	4b02      	ldr	r3, [pc, #8]	; (8081dfc <HAL_I2C_Begin_Transmission+0xc>)
 8081df4:	681b      	ldr	r3, [r3, #0]
 8081df6:	699b      	ldr	r3, [r3, #24]
 8081df8:	9301      	str	r3, [sp, #4]
 8081dfa:	bd08      	pop	{r3, pc}
 8081dfc:	080401ac 	.word	0x080401ac

08081e00 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081e00:	b508      	push	{r3, lr}
 8081e02:	4b02      	ldr	r3, [pc, #8]	; (8081e0c <HAL_I2C_End_Transmission+0xc>)
 8081e04:	681b      	ldr	r3, [r3, #0]
 8081e06:	69db      	ldr	r3, [r3, #28]
 8081e08:	9301      	str	r3, [sp, #4]
 8081e0a:	bd08      	pop	{r3, pc}
 8081e0c:	080401ac 	.word	0x080401ac

08081e10 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081e10:	b508      	push	{r3, lr}
 8081e12:	4b02      	ldr	r3, [pc, #8]	; (8081e1c <HAL_I2C_Write_Data+0xc>)
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	6a1b      	ldr	r3, [r3, #32]
 8081e18:	9301      	str	r3, [sp, #4]
 8081e1a:	bd08      	pop	{r3, pc}
 8081e1c:	080401ac 	.word	0x080401ac

08081e20 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081e20:	b508      	push	{r3, lr}
 8081e22:	4b02      	ldr	r3, [pc, #8]	; (8081e2c <HAL_I2C_Available_Data+0xc>)
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081e28:	9301      	str	r3, [sp, #4]
 8081e2a:	bd08      	pop	{r3, pc}
 8081e2c:	080401ac 	.word	0x080401ac

08081e30 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081e30:	b508      	push	{r3, lr}
 8081e32:	4b02      	ldr	r3, [pc, #8]	; (8081e3c <HAL_I2C_Read_Data+0xc>)
 8081e34:	681b      	ldr	r3, [r3, #0]
 8081e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081e38:	9301      	str	r3, [sp, #4]
 8081e3a:	bd08      	pop	{r3, pc}
 8081e3c:	080401ac 	.word	0x080401ac

08081e40 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081e40:	b508      	push	{r3, lr}
 8081e42:	4b02      	ldr	r3, [pc, #8]	; (8081e4c <HAL_I2C_Peek_Data+0xc>)
 8081e44:	681b      	ldr	r3, [r3, #0]
 8081e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081e48:	9301      	str	r3, [sp, #4]
 8081e4a:	bd08      	pop	{r3, pc}
 8081e4c:	080401ac 	.word	0x080401ac

08081e50 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081e50:	b508      	push	{r3, lr}
 8081e52:	4b02      	ldr	r3, [pc, #8]	; (8081e5c <HAL_I2C_Flush_Data+0xc>)
 8081e54:	681b      	ldr	r3, [r3, #0]
 8081e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e58:	9301      	str	r3, [sp, #4]
 8081e5a:	bd08      	pop	{r3, pc}
 8081e5c:	080401ac 	.word	0x080401ac

08081e60 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081e60:	b508      	push	{r3, lr}
 8081e62:	4b02      	ldr	r3, [pc, #8]	; (8081e6c <HAL_I2C_Is_Enabled+0xc>)
 8081e64:	681b      	ldr	r3, [r3, #0]
 8081e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081e68:	9301      	str	r3, [sp, #4]
 8081e6a:	bd08      	pop	{r3, pc}
 8081e6c:	080401ac 	.word	0x080401ac

08081e70 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 8081e70:	b508      	push	{r3, lr}
 8081e72:	4b02      	ldr	r3, [pc, #8]	; (8081e7c <HAL_I2C_Init+0xc>)
 8081e74:	681b      	ldr	r3, [r3, #0]
 8081e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081e78:	9301      	str	r3, [sp, #4]
 8081e7a:	bd08      	pop	{r3, pc}
 8081e7c:	080401ac 	.word	0x080401ac

08081e80 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081e80:	b508      	push	{r3, lr}
 8081e82:	4b02      	ldr	r3, [pc, #8]	; (8081e8c <HAL_I2C_Acquire+0xc>)
 8081e84:	681b      	ldr	r3, [r3, #0]
 8081e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081e88:	9301      	str	r3, [sp, #4]
 8081e8a:	bd08      	pop	{r3, pc}
 8081e8c:	080401ac 	.word	0x080401ac

08081e90 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081e90:	b508      	push	{r3, lr}
 8081e92:	4b02      	ldr	r3, [pc, #8]	; (8081e9c <HAL_I2C_Release+0xc>)
 8081e94:	681b      	ldr	r3, [r3, #0]
 8081e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081e98:	9301      	str	r3, [sp, #4]
 8081e9a:	bd08      	pop	{r3, pc}
 8081e9c:	080401ac 	.word	0x080401ac

08081ea0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8081ea0:	b508      	push	{r3, lr}
 8081ea2:	4b02      	ldr	r3, [pc, #8]	; (8081eac <HAL_I2C_Request_Data_Ex+0xc>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081ea8:	9301      	str	r3, [sp, #4]
 8081eaa:	bd08      	pop	{r3, pc}
 8081eac:	080401ac 	.word	0x080401ac

08081eb0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081eb0:	b508      	push	{r3, lr}
 8081eb2:	4b02      	ldr	r3, [pc, #8]	; (8081ebc <HAL_SPI_Init+0xc>)
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	69db      	ldr	r3, [r3, #28]
 8081eb8:	9301      	str	r3, [sp, #4]
 8081eba:	bd08      	pop	{r3, pc}
 8081ebc:	080401b4 	.word	0x080401b4

08081ec0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081ec0:	b508      	push	{r3, lr}
 8081ec2:	4b02      	ldr	r3, [pc, #8]	; (8081ecc <HAL_SPI_Is_Enabled+0xc>)
 8081ec4:	681b      	ldr	r3, [r3, #0]
 8081ec6:	6a1b      	ldr	r3, [r3, #32]
 8081ec8:	9301      	str	r3, [sp, #4]
 8081eca:	bd08      	pop	{r3, pc}
 8081ecc:	080401b4 	.word	0x080401b4

08081ed0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081ed0:	b508      	push	{r3, lr}
 8081ed2:	4b02      	ldr	r3, [pc, #8]	; (8081edc <HAL_USART_Init+0xc>)
 8081ed4:	681b      	ldr	r3, [r3, #0]
 8081ed6:	699b      	ldr	r3, [r3, #24]
 8081ed8:	9301      	str	r3, [sp, #4]
 8081eda:	bd08      	pop	{r3, pc}
 8081edc:	080401c4 	.word	0x080401c4

08081ee0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081ee0:	b508      	push	{r3, lr}
 8081ee2:	4b02      	ldr	r3, [pc, #8]	; (8081eec <HAL_USART_Write_Data+0xc>)
 8081ee4:	681b      	ldr	r3, [r3, #0]
 8081ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081ee8:	9301      	str	r3, [sp, #4]
 8081eea:	bd08      	pop	{r3, pc}
 8081eec:	080401c4 	.word	0x080401c4

08081ef0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081ef0:	b508      	push	{r3, lr}
 8081ef2:	4b02      	ldr	r3, [pc, #8]	; (8081efc <HAL_USART_Available_Data+0xc>)
 8081ef4:	681b      	ldr	r3, [r3, #0]
 8081ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081ef8:	9301      	str	r3, [sp, #4]
 8081efa:	bd08      	pop	{r3, pc}
 8081efc:	080401c4 	.word	0x080401c4

08081f00 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081f00:	b508      	push	{r3, lr}
 8081f02:	4b02      	ldr	r3, [pc, #8]	; (8081f0c <HAL_USART_Read_Data+0xc>)
 8081f04:	681b      	ldr	r3, [r3, #0]
 8081f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081f08:	9301      	str	r3, [sp, #4]
 8081f0a:	bd08      	pop	{r3, pc}
 8081f0c:	080401c4 	.word	0x080401c4

08081f10 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081f10:	b508      	push	{r3, lr}
 8081f12:	4b02      	ldr	r3, [pc, #8]	; (8081f1c <HAL_USART_Peek_Data+0xc>)
 8081f14:	681b      	ldr	r3, [r3, #0]
 8081f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f18:	9301      	str	r3, [sp, #4]
 8081f1a:	bd08      	pop	{r3, pc}
 8081f1c:	080401c4 	.word	0x080401c4

08081f20 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081f20:	b508      	push	{r3, lr}
 8081f22:	4b02      	ldr	r3, [pc, #8]	; (8081f2c <HAL_USART_Flush_Data+0xc>)
 8081f24:	681b      	ldr	r3, [r3, #0]
 8081f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081f28:	9301      	str	r3, [sp, #4]
 8081f2a:	bd08      	pop	{r3, pc}
 8081f2c:	080401c4 	.word	0x080401c4

08081f30 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081f30:	b508      	push	{r3, lr}
 8081f32:	4b02      	ldr	r3, [pc, #8]	; (8081f3c <HAL_USART_Is_Enabled+0xc>)
 8081f34:	681b      	ldr	r3, [r3, #0]
 8081f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081f38:	9301      	str	r3, [sp, #4]
 8081f3a:	bd08      	pop	{r3, pc}
 8081f3c:	080401c4 	.word	0x080401c4

08081f40 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081f40:	b508      	push	{r3, lr}
 8081f42:	4b02      	ldr	r3, [pc, #8]	; (8081f4c <HAL_USART_Available_Data_For_Write+0xc>)
 8081f44:	681b      	ldr	r3, [r3, #0]
 8081f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f48:	9301      	str	r3, [sp, #4]
 8081f4a:	bd08      	pop	{r3, pc}
 8081f4c:	080401c4 	.word	0x080401c4

08081f50 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8081f50:	b508      	push	{r3, lr}
 8081f52:	4b02      	ldr	r3, [pc, #8]	; (8081f5c <HAL_USART_BeginConfig+0xc>)
 8081f54:	681b      	ldr	r3, [r3, #0]
 8081f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081f58:	9301      	str	r3, [sp, #4]
 8081f5a:	bd08      	pop	{r3, pc}
 8081f5c:	080401c4 	.word	0x080401c4

08081f60 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081f60:	b508      	push	{r3, lr}
 8081f62:	4b02      	ldr	r3, [pc, #8]	; (8081f6c <HAL_USB_USART_Init+0xc>)
 8081f64:	681b      	ldr	r3, [r3, #0]
 8081f66:	681b      	ldr	r3, [r3, #0]
 8081f68:	9301      	str	r3, [sp, #4]
 8081f6a:	bd08      	pop	{r3, pc}
 8081f6c:	0806001c 	.word	0x0806001c

08081f70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081f70:	b508      	push	{r3, lr}
 8081f72:	4b02      	ldr	r3, [pc, #8]	; (8081f7c <HAL_USB_USART_Available_Data+0xc>)
 8081f74:	681b      	ldr	r3, [r3, #0]
 8081f76:	691b      	ldr	r3, [r3, #16]
 8081f78:	9301      	str	r3, [sp, #4]
 8081f7a:	bd08      	pop	{r3, pc}
 8081f7c:	0806001c 	.word	0x0806001c

08081f80 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081f80:	b508      	push	{r3, lr}
 8081f82:	4b02      	ldr	r3, [pc, #8]	; (8081f8c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081f84:	681b      	ldr	r3, [r3, #0]
 8081f86:	695b      	ldr	r3, [r3, #20]
 8081f88:	9301      	str	r3, [sp, #4]
 8081f8a:	bd08      	pop	{r3, pc}
 8081f8c:	0806001c 	.word	0x0806001c

08081f90 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081f90:	b508      	push	{r3, lr}
 8081f92:	4b02      	ldr	r3, [pc, #8]	; (8081f9c <HAL_USB_USART_Receive_Data+0xc>)
 8081f94:	681b      	ldr	r3, [r3, #0]
 8081f96:	699b      	ldr	r3, [r3, #24]
 8081f98:	9301      	str	r3, [sp, #4]
 8081f9a:	bd08      	pop	{r3, pc}
 8081f9c:	0806001c 	.word	0x0806001c

08081fa0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081fa0:	b508      	push	{r3, lr}
 8081fa2:	4b02      	ldr	r3, [pc, #8]	; (8081fac <HAL_USB_USART_Send_Data+0xc>)
 8081fa4:	681b      	ldr	r3, [r3, #0]
 8081fa6:	69db      	ldr	r3, [r3, #28]
 8081fa8:	9301      	str	r3, [sp, #4]
 8081faa:	bd08      	pop	{r3, pc}
 8081fac:	0806001c 	.word	0x0806001c

08081fb0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081fb0:	b508      	push	{r3, lr}
 8081fb2:	4b02      	ldr	r3, [pc, #8]	; (8081fbc <HAL_USB_USART_Flush_Data+0xc>)
 8081fb4:	681b      	ldr	r3, [r3, #0]
 8081fb6:	6a1b      	ldr	r3, [r3, #32]
 8081fb8:	9301      	str	r3, [sp, #4]
 8081fba:	bd08      	pop	{r3, pc}
 8081fbc:	0806001c 	.word	0x0806001c

08081fc0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081fc0:	b508      	push	{r3, lr}
 8081fc2:	4b02      	ldr	r3, [pc, #8]	; (8081fcc <panic_+0xc>)
 8081fc4:	681b      	ldr	r3, [r3, #0]
 8081fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081fc8:	9301      	str	r3, [sp, #4]
 8081fca:	bd08      	pop	{r3, pc}
 8081fcc:	080201a0 	.word	0x080201a0

08081fd0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8081fd0:	b508      	push	{r3, lr}
 8081fd2:	4b02      	ldr	r3, [pc, #8]	; (8081fdc <log_message+0xc>)
 8081fd4:	681b      	ldr	r3, [r3, #0]
 8081fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081fd8:	9301      	str	r3, [sp, #4]
 8081fda:	bd08      	pop	{r3, pc}
 8081fdc:	080201a0 	.word	0x080201a0

08081fe0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081fe0:	b508      	push	{r3, lr}
 8081fe2:	4b02      	ldr	r3, [pc, #8]	; (8081fec <log_message_v+0xc>)
 8081fe4:	681b      	ldr	r3, [r3, #0]
 8081fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081fe8:	9301      	str	r3, [sp, #4]
 8081fea:	bd08      	pop	{r3, pc}
 8081fec:	080201a0 	.word	0x080201a0

08081ff0 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 8081ff0:	b508      	push	{r3, lr}
 8081ff2:	4b03      	ldr	r3, [pc, #12]	; (8082000 <diag_get_source+0x10>)
 8081ff4:	681b      	ldr	r3, [r3, #0]
 8081ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8081ffa:	9301      	str	r3, [sp, #4]
 8081ffc:	bd08      	pop	{r3, pc}
 8081ffe:	0000      	.short	0x0000
 8082000:	080201a0 	.word	0x080201a0

08082004 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8082004:	b508      	push	{r3, lr}
 8082006:	4b02      	ldr	r3, [pc, #8]	; (8082010 <system_mode+0xc>)
 8082008:	681b      	ldr	r3, [r3, #0]
 808200a:	681b      	ldr	r3, [r3, #0]
 808200c:	9301      	str	r3, [sp, #4]
 808200e:	bd08      	pop	{r3, pc}
 8082010:	080401a4 	.word	0x080401a4

08082014 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8082014:	b508      	push	{r3, lr}
 8082016:	4b02      	ldr	r3, [pc, #8]	; (8082020 <set_system_mode+0xc>)
 8082018:	681b      	ldr	r3, [r3, #0]
 808201a:	685b      	ldr	r3, [r3, #4]
 808201c:	9301      	str	r3, [sp, #4]
 808201e:	bd08      	pop	{r3, pc}
 8082020:	080401a4 	.word	0x080401a4

08082024 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8082024:	b508      	push	{r3, lr}
 8082026:	4b02      	ldr	r3, [pc, #8]	; (8082030 <system_delay_ms+0xc>)
 8082028:	681b      	ldr	r3, [r3, #0]
 808202a:	695b      	ldr	r3, [r3, #20]
 808202c:	9301      	str	r3, [sp, #4]
 808202e:	bd08      	pop	{r3, pc}
 8082030:	080401a4 	.word	0x080401a4

08082034 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8082034:	b508      	push	{r3, lr}
 8082036:	4b02      	ldr	r3, [pc, #8]	; (8082040 <system_sleep+0xc>)
 8082038:	681b      	ldr	r3, [r3, #0]
 808203a:	699b      	ldr	r3, [r3, #24]
 808203c:	9301      	str	r3, [sp, #4]
 808203e:	bd08      	pop	{r3, pc}
 8082040:	080401a4 	.word	0x080401a4

08082044 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8082044:	b508      	push	{r3, lr}
 8082046:	4b02      	ldr	r3, [pc, #8]	; (8082050 <system_thread_set_state+0xc>)
 8082048:	681b      	ldr	r3, [r3, #0]
 808204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808204c:	9301      	str	r3, [sp, #4]
 808204e:	bd08      	pop	{r3, pc}
 8082050:	080401a4 	.word	0x080401a4

08082054 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8082054:	b508      	push	{r3, lr}
 8082056:	4b02      	ldr	r3, [pc, #8]	; (8082060 <application_thread_current+0xc>)
 8082058:	681b      	ldr	r3, [r3, #0]
 808205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808205c:	9301      	str	r3, [sp, #4]
 808205e:	bd08      	pop	{r3, pc}
 8082060:	080401a4 	.word	0x080401a4

08082064 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8082064:	b508      	push	{r3, lr}
 8082066:	4b02      	ldr	r3, [pc, #8]	; (8082070 <application_thread_invoke+0xc>)
 8082068:	681b      	ldr	r3, [r3, #0]
 808206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808206c:	9301      	str	r3, [sp, #4]
 808206e:	bd08      	pop	{r3, pc}
 8082070:	080401a4 	.word	0x080401a4

08082074 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8082074:	b508      	push	{r3, lr}
 8082076:	4b02      	ldr	r3, [pc, #8]	; (8082080 <system_thread_get_state+0xc>)
 8082078:	681b      	ldr	r3, [r3, #0]
 808207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808207c:	9301      	str	r3, [sp, #4]
 808207e:	bd08      	pop	{r3, pc}
 8082080:	080401a4 	.word	0x080401a4

08082084 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8082084:	b508      	push	{r3, lr}
 8082086:	4b03      	ldr	r3, [pc, #12]	; (8082094 <system_ctrl_set_app_request_handler+0x10>)
 8082088:	681b      	ldr	r3, [r3, #0]
 808208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808208e:	9301      	str	r3, [sp, #4]
 8082090:	bd08      	pop	{r3, pc}
 8082092:	0000      	.short	0x0000
 8082094:	080401a4 	.word	0x080401a4

08082098 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082098:	b508      	push	{r3, lr}
 808209a:	4b03      	ldr	r3, [pc, #12]	; (80820a8 <system_ctrl_set_result+0x10>)
 808209c:	681b      	ldr	r3, [r3, #0]
 808209e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80820a2:	9301      	str	r3, [sp, #4]
 80820a4:	bd08      	pop	{r3, pc}
 80820a6:	0000      	.short	0x0000
 80820a8:	080401a4 	.word	0x080401a4

080820ac <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 80820ac:	b508      	push	{r3, lr}
 80820ae:	4b03      	ldr	r3, [pc, #12]	; (80820bc <system_power_management_set_config+0x10>)
 80820b0:	681b      	ldr	r3, [r3, #0]
 80820b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80820b6:	9301      	str	r3, [sp, #4]
 80820b8:	bd08      	pop	{r3, pc}
 80820ba:	0000      	.short	0x0000
 80820bc:	080401a4 	.word	0x080401a4

080820c0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 80820c0:	b508      	push	{r3, lr}
 80820c2:	4b03      	ldr	r3, [pc, #12]	; (80820d0 <system_sleep_ext+0x10>)
 80820c4:	681b      	ldr	r3, [r3, #0]
 80820c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80820ca:	9301      	str	r3, [sp, #4]
 80820cc:	bd08      	pop	{r3, pc}
 80820ce:	0000      	.short	0x0000
 80820d0:	080401a4 	.word	0x080401a4

080820d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80820d4:	b508      	push	{r3, lr}
 80820d6:	4b02      	ldr	r3, [pc, #8]	; (80820e0 <spark_variable+0xc>)
 80820d8:	681b      	ldr	r3, [r3, #0]
 80820da:	681b      	ldr	r3, [r3, #0]
 80820dc:	9301      	str	r3, [sp, #4]
 80820de:	bd08      	pop	{r3, pc}
 80820e0:	080401cc 	.word	0x080401cc

080820e4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80820e4:	b508      	push	{r3, lr}
 80820e6:	4b02      	ldr	r3, [pc, #8]	; (80820f0 <spark_function+0xc>)
 80820e8:	681b      	ldr	r3, [r3, #0]
 80820ea:	685b      	ldr	r3, [r3, #4]
 80820ec:	9301      	str	r3, [sp, #4]
 80820ee:	bd08      	pop	{r3, pc}
 80820f0:	080401cc 	.word	0x080401cc

080820f4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80820f4:	b508      	push	{r3, lr}
 80820f6:	4b02      	ldr	r3, [pc, #8]	; (8082100 <spark_process+0xc>)
 80820f8:	681b      	ldr	r3, [r3, #0]
 80820fa:	689b      	ldr	r3, [r3, #8]
 80820fc:	9301      	str	r3, [sp, #4]
 80820fe:	bd08      	pop	{r3, pc}
 8082100:	080401cc 	.word	0x080401cc

08082104 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8082104:	b508      	push	{r3, lr}
 8082106:	4b02      	ldr	r3, [pc, #8]	; (8082110 <spark_cloud_flag_connect+0xc>)
 8082108:	681b      	ldr	r3, [r3, #0]
 808210a:	68db      	ldr	r3, [r3, #12]
 808210c:	9301      	str	r3, [sp, #4]
 808210e:	bd08      	pop	{r3, pc}
 8082110:	080401cc 	.word	0x080401cc

08082114 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8082114:	b508      	push	{r3, lr}
 8082116:	4b02      	ldr	r3, [pc, #8]	; (8082120 <spark_cloud_flag_disconnect+0xc>)
 8082118:	681b      	ldr	r3, [r3, #0]
 808211a:	691b      	ldr	r3, [r3, #16]
 808211c:	9301      	str	r3, [sp, #4]
 808211e:	bd08      	pop	{r3, pc}
 8082120:	080401cc 	.word	0x080401cc

08082124 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8082124:	b508      	push	{r3, lr}
 8082126:	4b02      	ldr	r3, [pc, #8]	; (8082130 <spark_cloud_flag_connected+0xc>)
 8082128:	681b      	ldr	r3, [r3, #0]
 808212a:	695b      	ldr	r3, [r3, #20]
 808212c:	9301      	str	r3, [sp, #4]
 808212e:	bd08      	pop	{r3, pc}
 8082130:	080401cc 	.word	0x080401cc

08082134 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8082134:	b508      	push	{r3, lr}
 8082136:	4b02      	ldr	r3, [pc, #8]	; (8082140 <spark_send_event+0xc>)
 8082138:	681b      	ldr	r3, [r3, #0]
 808213a:	6a1b      	ldr	r3, [r3, #32]
 808213c:	9301      	str	r3, [sp, #4]
 808213e:	bd08      	pop	{r3, pc}
 8082140:	080401cc 	.word	0x080401cc

08082144 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8082144:	b508      	push	{r3, lr}
 8082146:	4b02      	ldr	r3, [pc, #8]	; (8082150 <spark_sync_time+0xc>)
 8082148:	681b      	ldr	r3, [r3, #0]
 808214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808214c:	9301      	str	r3, [sp, #4]
 808214e:	bd08      	pop	{r3, pc}
 8082150:	080401cc 	.word	0x080401cc

08082154 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8082154:	b508      	push	{r3, lr}
 8082156:	4b02      	ldr	r3, [pc, #8]	; (8082160 <spark_sync_time_pending+0xc>)
 8082158:	681b      	ldr	r3, [r3, #0]
 808215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808215c:	9301      	str	r3, [sp, #4]
 808215e:	bd08      	pop	{r3, pc}
 8082160:	080401cc 	.word	0x080401cc

08082164 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8082164:	b508      	push	{r3, lr}
 8082166:	4b02      	ldr	r3, [pc, #8]	; (8082170 <spark_set_random_seed_from_cloud_handler+0xc>)
 8082168:	681b      	ldr	r3, [r3, #0]
 808216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808216c:	9301      	str	r3, [sp, #4]
 808216e:	bd08      	pop	{r3, pc}
 8082170:	080401cc 	.word	0x080401cc

08082174 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8082174:	b508      	push	{r3, lr}
 8082176:	4b02      	ldr	r3, [pc, #8]	; (8082180 <network_connect+0xc>)
 8082178:	681b      	ldr	r3, [r3, #0]
 808217a:	685b      	ldr	r3, [r3, #4]
 808217c:	9301      	str	r3, [sp, #4]
 808217e:	bd08      	pop	{r3, pc}
 8082180:	080401c8 	.word	0x080401c8

08082184 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8082184:	b508      	push	{r3, lr}
 8082186:	4b02      	ldr	r3, [pc, #8]	; (8082190 <network_connecting+0xc>)
 8082188:	681b      	ldr	r3, [r3, #0]
 808218a:	689b      	ldr	r3, [r3, #8]
 808218c:	9301      	str	r3, [sp, #4]
 808218e:	bd08      	pop	{r3, pc}
 8082190:	080401c8 	.word	0x080401c8

08082194 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8082194:	b508      	push	{r3, lr}
 8082196:	4b02      	ldr	r3, [pc, #8]	; (80821a0 <network_disconnect+0xc>)
 8082198:	681b      	ldr	r3, [r3, #0]
 808219a:	68db      	ldr	r3, [r3, #12]
 808219c:	9301      	str	r3, [sp, #4]
 808219e:	bd08      	pop	{r3, pc}
 80821a0:	080401c8 	.word	0x080401c8

080821a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80821a4:	b508      	push	{r3, lr}
 80821a6:	4b02      	ldr	r3, [pc, #8]	; (80821b0 <network_ready+0xc>)
 80821a8:	681b      	ldr	r3, [r3, #0]
 80821aa:	691b      	ldr	r3, [r3, #16]
 80821ac:	9301      	str	r3, [sp, #4]
 80821ae:	bd08      	pop	{r3, pc}
 80821b0:	080401c8 	.word	0x080401c8

080821b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80821b4:	b508      	push	{r3, lr}
 80821b6:	4b02      	ldr	r3, [pc, #8]	; (80821c0 <network_on+0xc>)
 80821b8:	681b      	ldr	r3, [r3, #0]
 80821ba:	695b      	ldr	r3, [r3, #20]
 80821bc:	9301      	str	r3, [sp, #4]
 80821be:	bd08      	pop	{r3, pc}
 80821c0:	080401c8 	.word	0x080401c8

080821c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80821c4:	b508      	push	{r3, lr}
 80821c6:	4b02      	ldr	r3, [pc, #8]	; (80821d0 <network_off+0xc>)
 80821c8:	681b      	ldr	r3, [r3, #0]
 80821ca:	699b      	ldr	r3, [r3, #24]
 80821cc:	9301      	str	r3, [sp, #4]
 80821ce:	bd08      	pop	{r3, pc}
 80821d0:	080401c8 	.word	0x080401c8

080821d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80821d4:	b508      	push	{r3, lr}
 80821d6:	4b02      	ldr	r3, [pc, #8]	; (80821e0 <network_listen+0xc>)
 80821d8:	681b      	ldr	r3, [r3, #0]
 80821da:	69db      	ldr	r3, [r3, #28]
 80821dc:	9301      	str	r3, [sp, #4]
 80821de:	bd08      	pop	{r3, pc}
 80821e0:	080401c8 	.word	0x080401c8

080821e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80821e4:	b508      	push	{r3, lr}
 80821e6:	4b02      	ldr	r3, [pc, #8]	; (80821f0 <network_listening+0xc>)
 80821e8:	681b      	ldr	r3, [r3, #0]
 80821ea:	6a1b      	ldr	r3, [r3, #32]
 80821ec:	9301      	str	r3, [sp, #4]
 80821ee:	bd08      	pop	{r3, pc}
 80821f0:	080401c8 	.word	0x080401c8

080821f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80821f4:	b508      	push	{r3, lr}
 80821f6:	4b02      	ldr	r3, [pc, #8]	; (8082200 <network_set_listen_timeout+0xc>)
 80821f8:	681b      	ldr	r3, [r3, #0]
 80821fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80821fc:	9301      	str	r3, [sp, #4]
 80821fe:	bd08      	pop	{r3, pc}
 8082200:	080401c8 	.word	0x080401c8

08082204 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8082204:	b508      	push	{r3, lr}
 8082206:	4b02      	ldr	r3, [pc, #8]	; (8082210 <network_get_listen_timeout+0xc>)
 8082208:	681b      	ldr	r3, [r3, #0]
 808220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808220c:	9301      	str	r3, [sp, #4]
 808220e:	bd08      	pop	{r3, pc}
 8082210:	080401c8 	.word	0x080401c8

08082214 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8082214:	b508      	push	{r3, lr}
 8082216:	4b02      	ldr	r3, [pc, #8]	; (8082220 <malloc+0xc>)
 8082218:	681b      	ldr	r3, [r3, #0]
 808221a:	681b      	ldr	r3, [r3, #0]
 808221c:	9301      	str	r3, [sp, #4]
 808221e:	bd08      	pop	{r3, pc}
 8082220:	080401a0 	.word	0x080401a0

08082224 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8082224:	b508      	push	{r3, lr}
 8082226:	4b02      	ldr	r3, [pc, #8]	; (8082230 <free+0xc>)
 8082228:	681b      	ldr	r3, [r3, #0]
 808222a:	685b      	ldr	r3, [r3, #4]
 808222c:	9301      	str	r3, [sp, #4]
 808222e:	bd08      	pop	{r3, pc}
 8082230:	080401a0 	.word	0x080401a0

08082234 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8082234:	b508      	push	{r3, lr}
 8082236:	4b02      	ldr	r3, [pc, #8]	; (8082240 <realloc+0xc>)
 8082238:	681b      	ldr	r3, [r3, #0]
 808223a:	689b      	ldr	r3, [r3, #8]
 808223c:	9301      	str	r3, [sp, #4]
 808223e:	bd08      	pop	{r3, pc}
 8082240:	080401a0 	.word	0x080401a0

08082244 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8082244:	b508      	push	{r3, lr}
 8082246:	4b02      	ldr	r3, [pc, #8]	; (8082250 <siprintf+0xc>)
 8082248:	681b      	ldr	r3, [r3, #0]
 808224a:	691b      	ldr	r3, [r3, #16]
 808224c:	9301      	str	r3, [sp, #4]
 808224e:	bd08      	pop	{r3, pc}
 8082250:	080401a0 	.word	0x080401a0

08082254 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8082254:	b508      	push	{r3, lr}
 8082256:	4b02      	ldr	r3, [pc, #8]	; (8082260 <siscanf+0xc>)
 8082258:	681b      	ldr	r3, [r3, #0]
 808225a:	699b      	ldr	r3, [r3, #24]
 808225c:	9301      	str	r3, [sp, #4]
 808225e:	bd08      	pop	{r3, pc}
 8082260:	080401a0 	.word	0x080401a0

08082264 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8082264:	b508      	push	{r3, lr}
 8082266:	4b02      	ldr	r3, [pc, #8]	; (8082270 <snprintf+0xc>)
 8082268:	681b      	ldr	r3, [r3, #0]
 808226a:	69db      	ldr	r3, [r3, #28]
 808226c:	9301      	str	r3, [sp, #4]
 808226e:	bd08      	pop	{r3, pc}
 8082270:	080401a0 	.word	0x080401a0

08082274 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8082274:	b508      	push	{r3, lr}
 8082276:	4b02      	ldr	r3, [pc, #8]	; (8082280 <abort+0xc>)
 8082278:	681b      	ldr	r3, [r3, #0]
 808227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808227c:	9301      	str	r3, [sp, #4]
 808227e:	bd08      	pop	{r3, pc}
 8082280:	080401a0 	.word	0x080401a0

08082284 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082284:	b508      	push	{r3, lr}
 8082286:	4b02      	ldr	r3, [pc, #8]	; (8082290 <_malloc_r+0xc>)
 8082288:	681b      	ldr	r3, [r3, #0]
 808228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808228c:	9301      	str	r3, [sp, #4]
 808228e:	bd08      	pop	{r3, pc}
 8082290:	080401a0 	.word	0x080401a0

08082294 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8082294:	2100      	movs	r1, #0
 8082296:	f7ff bec5 	b.w	8082024 <system_delay_ms>

0808229a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808229a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808229c:	6883      	ldr	r3, [r0, #8]
 808229e:	4604      	mov	r4, r0
 80822a0:	b90b      	cbnz	r3, 80822a6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80822a2:	f001 fdb0 	bl	8083e06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80822a6:	68c3      	ldr	r3, [r0, #12]
 80822a8:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80822aa:	68a3      	ldr	r3, [r4, #8]
 80822ac:	b11b      	cbz	r3, 80822b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80822ae:	2203      	movs	r2, #3
 80822b0:	4621      	mov	r1, r4
 80822b2:	4620      	mov	r0, r4
 80822b4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80822b6:	4620      	mov	r0, r4
}
 80822b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80822bc:	2110      	movs	r1, #16
 80822be:	f001 bd86 	b.w	8083dce <_ZdlPvj>

080822c2 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80822c2:	2200      	movs	r2, #0
 80822c4:	4611      	mov	r1, r2
 80822c6:	6840      	ldr	r0, [r0, #4]
 80822c8:	f7ff bf6c 	b.w	80821a4 <network_ready>

080822cc <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80822cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80822d0:	2600      	movs	r6, #0
 80822d2:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80822d4:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80822d6:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80822d8:	4688      	mov	r8, r1
 80822da:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80822dc:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80822e0:	f002 ffd3 	bl	808528a <strlen>
 80822e4:	9600      	str	r6, [sp, #0]
 80822e6:	b281      	uxth	r1, r0
 80822e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80822ec:	4622      	mov	r2, r4
 80822ee:	4638      	mov	r0, r7
 80822f0:	f7ff fcbe 	bl	8081c70 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80822f4:	b120      	cbz	r0, 8082300 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80822f6:	4631      	mov	r1, r6
 80822f8:	4628      	mov	r0, r5
 80822fa:	f000 fd3f 	bl	8082d7c <_ZN9IPAddressC1Em>
 80822fe:	e003      	b.n	8082308 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082300:	4621      	mov	r1, r4
 8082302:	4628      	mov	r0, r5
 8082304:	f000 fd32 	bl	8082d6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082308:	4628      	mov	r0, r5
 808230a:	b004      	add	sp, #16
 808230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082310 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8082310:	2200      	movs	r2, #0
 8082312:	4611      	mov	r1, r2
 8082314:	6840      	ldr	r0, [r0, #4]
 8082316:	f7ff bf65 	b.w	80821e4 <network_listening>

0808231a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808231a:	2200      	movs	r2, #0
 808231c:	4611      	mov	r1, r2
 808231e:	6840      	ldr	r0, [r0, #4]
 8082320:	f7ff bf70 	b.w	8082204 <network_get_listen_timeout>

08082324 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8082324:	2200      	movs	r2, #0
 8082326:	6840      	ldr	r0, [r0, #4]
 8082328:	f7ff bf64 	b.w	80821f4 <network_set_listen_timeout>

0808232c <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808232c:	2200      	movs	r2, #0
 808232e:	f081 0101 	eor.w	r1, r1, #1
 8082332:	6840      	ldr	r0, [r0, #4]
 8082334:	f7ff bf4e 	b.w	80821d4 <network_listen>

08082338 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8082338:	2300      	movs	r3, #0
 808233a:	461a      	mov	r2, r3
 808233c:	4619      	mov	r1, r3
 808233e:	6840      	ldr	r0, [r0, #4]
 8082340:	f7ff bf40 	b.w	80821c4 <network_off>

08082344 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8082344:	2300      	movs	r3, #0
 8082346:	461a      	mov	r2, r3
 8082348:	4619      	mov	r1, r3
 808234a:	6840      	ldr	r0, [r0, #4]
 808234c:	f7ff bf32 	b.w	80821b4 <network_on>

08082350 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8082350:	2200      	movs	r2, #0
 8082352:	4611      	mov	r1, r2
 8082354:	6840      	ldr	r0, [r0, #4]
 8082356:	f7ff bf15 	b.w	8082184 <network_connecting>

0808235a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808235a:	2200      	movs	r2, #0
 808235c:	2102      	movs	r1, #2
 808235e:	6840      	ldr	r0, [r0, #4]
 8082360:	f7ff bf18 	b.w	8082194 <network_disconnect>

08082364 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8082364:	2300      	movs	r3, #0
 8082366:	461a      	mov	r2, r3
 8082368:	6840      	ldr	r0, [r0, #4]
 808236a:	f7ff bf03 	b.w	8082174 <network_connect>
	...

08082370 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082372:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8082374:	4b1a      	ldr	r3, [pc, #104]	; (80823e0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8082376:	2500      	movs	r5, #0
 8082378:	6003      	str	r3, [r0, #0]
 808237a:	2618      	movs	r6, #24
 808237c:	3328      	adds	r3, #40	; 0x28
 808237e:	b089      	sub	sp, #36	; 0x24
 8082380:	6043      	str	r3, [r0, #4]
 8082382:	6085      	str	r5, [r0, #8]
 8082384:	60c5      	str	r5, [r0, #12]
 8082386:	4632      	mov	r2, r6
 8082388:	4629      	mov	r1, r5
 808238a:	4604      	mov	r4, r0
 808238c:	3010      	adds	r0, #16
 808238e:	f002 ff0e 	bl	80851ae <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082392:	462a      	mov	r2, r5
 8082394:	4629      	mov	r1, r5
 8082396:	6878      	ldr	r0, [r7, #4]
 8082398:	f7ff ff04 	bl	80821a4 <network_ready>
 808239c:	b908      	cbnz	r0, 80823a2 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 808239e:	60a0      	str	r0, [r4, #8]
            return sig;
 80823a0:	e01b      	b.n	80823da <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 80823a2:	4629      	mov	r1, r5
 80823a4:	4632      	mov	r2, r6
 80823a6:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 80823a8:	9500      	str	r5, [sp, #0]
 80823aa:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 80823ac:	f002 feff 	bl	80851ae <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80823b0:	a902      	add	r1, sp, #8
 80823b2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 80823b4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80823b8:	f7ff fc62 	bl	8081c80 <cellular_signal>
 80823bc:	b110      	cbz	r0, 80823c4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 80823be:	2301      	movs	r3, #1
 80823c0:	60a3      	str	r3, [r4, #8]
            return sig;
 80823c2:	e00a      	b.n	80823da <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 80823c4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80823c6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80823c8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80823ca:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80823cc:	b90b      	cbnz	r3, 80823d2 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 80823ce:	2302      	movs	r3, #2
 80823d0:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80823d2:	a902      	add	r1, sp, #8
 80823d4:	4620      	mov	r0, r4
 80823d6:	f000 f87d 	bl	80824d4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80823da:	4620      	mov	r0, r4
 80823dc:	b009      	add	sp, #36	; 0x24
 80823de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80823e0:	080861ac 	.word	0x080861ac

080823e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80823e4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80823e6:	4c08      	ldr	r4, [pc, #32]	; (8082408 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80823e8:	2528      	movs	r5, #40	; 0x28
 80823ea:	462a      	mov	r2, r5
 80823ec:	2100      	movs	r1, #0
 80823ee:	4620      	mov	r0, r4
 80823f0:	f002 fedd 	bl	80851ae <memset>
        cid = -1;
 80823f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80823f8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80823fa:	4b04      	ldr	r3, [pc, #16]	; (808240c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 80823fc:	2204      	movs	r2, #4
 80823fe:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082400:	4a03      	ldr	r2, [pc, #12]	; (8082410 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8082402:	8025      	strh	r5, [r4, #0]
 8082404:	601a      	str	r2, [r3, #0]
 8082406:	bd38      	pop	{r3, r4, r5, pc}
 8082408:	200002d8 	.word	0x200002d8
 808240c:	200002d0 	.word	0x200002d0
 8082410:	08086178 	.word	0x08086178

08082414 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082414:	4770      	bx	lr

08082416 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8082416:	7d00      	ldrb	r0, [r0, #20]
 8082418:	4770      	bx	lr
	...

0808241c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 808241c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 808241e:	7d03      	ldrb	r3, [r0, #20]
 8082420:	b11b      	cbz	r3, 808242a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8082422:	6980      	ldr	r0, [r0, #24]
 8082424:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082428:	d101      	bne.n	808242e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 808242a:	2000      	movs	r0, #0
 808242c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 808242e:	f002 fb31 	bl	8084a94 <__aeabi_i2f>
 8082432:	4902      	ldr	r1, [pc, #8]	; (808243c <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8082434:	f002 fc36 	bl	8084ca4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082438:	bd08      	pop	{r3, pc}
 808243a:	bf00      	nop
 808243c:	42c80000 	.word	0x42c80000

08082440 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8082440:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8082442:	7d03      	ldrb	r3, [r0, #20]
 8082444:	b11b      	cbz	r3, 808244e <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8082446:	6a00      	ldr	r0, [r0, #32]
 8082448:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 808244c:	d101      	bne.n	8082452 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 808244e:	2000      	movs	r0, #0
 8082450:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8082452:	f002 fb1f 	bl	8084a94 <__aeabi_i2f>
 8082456:	4902      	ldr	r1, [pc, #8]	; (8082460 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082458:	f002 fc24 	bl	8084ca4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 808245c:	bd08      	pop	{r3, pc}
 808245e:	bf00      	nop
 8082460:	42c80000 	.word	0x42c80000

08082464 <_ZN14CellularSignalD0Ev>:
 8082464:	b510      	push	{r4, lr}
 8082466:	4604      	mov	r4, r0
 8082468:	2128      	movs	r1, #40	; 0x28
 808246a:	f001 fcb0 	bl	8083dce <_ZdlPvj>
 808246e:	4620      	mov	r0, r4
 8082470:	bd10      	pop	{r4, pc}
	...

08082474 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8082474:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8082476:	7d03      	ldrb	r3, [r0, #20]
 8082478:	b15b      	cbz	r3, 8082492 <_ZNK14CellularSignal10getQualityEv+0x1e>
 808247a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 808247c:	2800      	cmp	r0, #0
 808247e:	db08      	blt.n	8082492 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8082480:	f002 fb08 	bl	8084a94 <__aeabi_i2f>
 8082484:	4904      	ldr	r1, [pc, #16]	; (8082498 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8082486:	f002 fc0d 	bl	8084ca4 <__aeabi_fdiv>
 808248a:	4904      	ldr	r1, [pc, #16]	; (808249c <_ZNK14CellularSignal10getQualityEv+0x28>)
 808248c:	f002 fb56 	bl	8084b3c <__aeabi_fmul>
 8082490:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8082492:	4803      	ldr	r0, [pc, #12]	; (80824a0 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8082494:	bd08      	pop	{r3, pc}
 8082496:	bf00      	nop
 8082498:	477fff00 	.word	0x477fff00
 808249c:	42c80000 	.word	0x42c80000
 80824a0:	bf800000 	.word	0xbf800000

080824a4 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 80824a4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80824a6:	7d03      	ldrb	r3, [r0, #20]
 80824a8:	b15b      	cbz	r3, 80824c2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 80824aa:	69c0      	ldr	r0, [r0, #28]
 80824ac:	2800      	cmp	r0, #0
 80824ae:	db08      	blt.n	80824c2 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 80824b0:	f002 faf0 	bl	8084a94 <__aeabi_i2f>
 80824b4:	4904      	ldr	r1, [pc, #16]	; (80824c8 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 80824b6:	f002 fbf5 	bl	8084ca4 <__aeabi_fdiv>
 80824ba:	4904      	ldr	r1, [pc, #16]	; (80824cc <_ZNK14CellularSignal11getStrengthEv+0x28>)
 80824bc:	f002 fb3e 	bl	8084b3c <__aeabi_fmul>
 80824c0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80824c2:	4803      	ldr	r0, [pc, #12]	; (80824d0 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 80824c4:	bd08      	pop	{r3, pc}
 80824c6:	bf00      	nop
 80824c8:	477fff00 	.word	0x477fff00
 80824cc:	42c80000 	.word	0x42c80000
 80824d0:	bf800000 	.word	0xbf800000

080824d4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 80824d4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 80824d6:	460d      	mov	r5, r1
 80824d8:	f100 0410 	add.w	r4, r0, #16
 80824dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80824de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80824e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80824e4:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 80824e8:	2001      	movs	r0, #1
 80824ea:	bd30      	pop	{r4, r5, pc}

080824ec <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 80824ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80824f0:	4607      	mov	r7, r0
 80824f2:	460c      	mov	r4, r1
{
    if (base == 0) {
 80824f4:	4615      	mov	r5, r2
 80824f6:	b92a      	cbnz	r2, 8082504 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 80824f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 80824fc:	6803      	ldr	r3, [r0, #0]
 80824fe:	b2c9      	uxtb	r1, r1
 8082500:	689b      	ldr	r3, [r3, #8]
 8082502:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 8082504:	2900      	cmp	r1, #0
 8082506:	da07      	bge.n	8082518 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 8082508:	2a0a      	cmp	r2, #10
 808250a:	d105      	bne.n	8082518 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 808250c:	212d      	movs	r1, #45	; 0x2d
 808250e:	f000 fd89 	bl	8083024 <_ZN5Print5printEc>
            val = -n;
 8082512:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 8082514:	4606      	mov	r6, r0
            val = -n;
 8082516:	e001      	b.n	808251c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 8082518:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 808251a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 808251c:	b2ea      	uxtb	r2, r5
 808251e:	4638      	mov	r0, r7
 8082520:	f000 fd99 	bl	8083056 <_ZN5Print11printNumberEmh>
    }
}
 8082524:	4430      	add	r0, r6
 8082526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808252a <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
 808252a:	b570      	push	{r4, r5, r6, lr}
 808252c:	460d      	mov	r5, r1
 808252e:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082530:	220a      	movs	r2, #10
 8082532:	6881      	ldr	r1, [r0, #8]
 8082534:	4628      	mov	r0, r5
 8082536:	f7ff ffd9 	bl	80824ec <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
 808253a:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 808253c:	4604      	mov	r4, r0
    n += p.print(',');
 808253e:	4628      	mov	r0, r5
 8082540:	f000 fd70 	bl	8083024 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8082544:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8082546:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8082548:	68f1      	ldr	r1, [r6, #12]
 808254a:	4628      	mov	r0, r5
 808254c:	f7ff ffce 	bl	80824ec <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
 8082550:	4420      	add	r0, r4
 8082552:	bd70      	pop	{r4, r5, r6, pc}

08082554 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8082554:	f1a0 0004 	sub.w	r0, r0, #4
 8082558:	f7ff bfe7 	b.w	808252a <_ZNK14CellularSignal7printToER5Print>

0808255c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808255c:	4770      	bx	lr

0808255e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808255e:	2000      	movs	r0, #0
 8082560:	4770      	bx	lr

08082562 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082562:	b510      	push	{r4, lr}
 8082564:	4604      	mov	r4, r0
 8082566:	2110      	movs	r1, #16
 8082568:	f001 fc31 	bl	8083dce <_ZdlPvj>
 808256c:	4620      	mov	r0, r4
 808256e:	bd10      	pop	{r4, pc}

08082570 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082570:	b508      	push	{r3, lr}
      { delete this; }
 8082572:	b108      	cbz	r0, 8082578 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8082574:	f7ff fff5 	bl	8082562 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082578:	bd08      	pop	{r3, pc}

0808257a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808257a:	2200      	movs	r2, #0
 808257c:	6002      	str	r2, [r0, #0]
 808257e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8082582:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8082584:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082586:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808258a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808258c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808258e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082590:	680c      	ldr	r4, [r1, #0]
 8082592:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8082594:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8082596:	bd10      	pop	{r4, pc}

08082598 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082598:	b510      	push	{r4, lr}
 808259a:	4604      	mov	r4, r0
    free((void*)msg_);
 808259c:	6800      	ldr	r0, [r0, #0]
 808259e:	f7ff fe41 	bl	8082224 <free>
}
 80825a2:	4620      	mov	r0, r4
 80825a4:	bd10      	pop	{r4, pc}

080825a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80825a6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80825a8:	68c4      	ldr	r4, [r0, #12]
 80825aa:	b1f4      	cbz	r4, 80825ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80825ac:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80825ae:	2b02      	cmp	r3, #2
 80825b0:	d103      	bne.n	80825ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80825b2:	f104 000c 	add.w	r0, r4, #12
 80825b6:	f7ff ffef 	bl	8082598 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80825ba:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80825bc:	b135      	cbz	r5, 80825cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80825be:	4628      	mov	r0, r5
 80825c0:	f7ff fb40 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
 80825c4:	2110      	movs	r1, #16
 80825c6:	4628      	mov	r0, r5
 80825c8:	f001 fc01 	bl	8083dce <_ZdlPvj>
 80825cc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80825ce:	b135      	cbz	r5, 80825de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80825d0:	4628      	mov	r0, r5
 80825d2:	f7ff fb37 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
 80825d6:	2110      	movs	r1, #16
 80825d8:	4628      	mov	r0, r5
 80825da:	f001 fbf8 	bl	8083dce <_ZdlPvj>
 80825de:	4620      	mov	r0, r4
 80825e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80825e4:	2114      	movs	r1, #20
 80825e6:	f001 bbf2 	b.w	8083dce <_ZdlPvj>
 80825ea:	bd38      	pop	{r3, r4, r5, pc}

080825ec <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80825ec:	b510      	push	{r4, lr}
 80825ee:	b088      	sub	sp, #32
 80825f0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80825f2:	4668      	mov	r0, sp
 80825f4:	f000 fdbb 	bl	808316e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80825f8:	4669      	mov	r1, sp
 80825fa:	a804      	add	r0, sp, #16
 80825fc:	f000 fdd9 	bl	80831b2 <_ZN6StringC1ERKS_>
 8082600:	a804      	add	r0, sp, #16
 8082602:	47a0      	blx	r4
 8082604:	4604      	mov	r4, r0
 8082606:	a804      	add	r0, sp, #16
 8082608:	f000 fd6a 	bl	80830e0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808260c:	4668      	mov	r0, sp
 808260e:	f000 fd67 	bl	80830e0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8082612:	4620      	mov	r0, r4
 8082614:	b008      	add	sp, #32
 8082616:	bd10      	pop	{r4, pc}

08082618 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082618:	b5f0      	push	{r4, r5, r6, r7, lr}
 808261a:	4607      	mov	r7, r0
 808261c:	460e      	mov	r6, r1
 808261e:	4615      	mov	r5, r2
 8082620:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082622:	2410      	movs	r4, #16
 8082624:	4622      	mov	r2, r4
 8082626:	2100      	movs	r1, #0
 8082628:	4668      	mov	r0, sp
 808262a:	f002 fdc0 	bl	80851ae <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808262e:	2200      	movs	r2, #0
 8082630:	4669      	mov	r1, sp
 8082632:	4610      	mov	r0, r2
         size = sizeof(*this);
 8082634:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8082638:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808263a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808263c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808263e:	f7ff fd51 	bl	80820e4 <spark_function>
}
 8082642:	b005      	add	sp, #20
 8082644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082646 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8082646:	b513      	push	{r0, r1, r4, lr}
 8082648:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808264a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808264e:	2300      	movs	r3, #0
 8082650:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082652:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082654:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8082656:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082658:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808265a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808265c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808265e:	f7fe f99f 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082662:	4620      	mov	r0, r4
 8082664:	b002      	add	sp, #8
 8082666:	bd10      	pop	{r4, pc}

08082668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8082668:	680b      	ldr	r3, [r1, #0]
 808266a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808266c:	b113      	cbz	r3, 8082674 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808266e:	685a      	ldr	r2, [r3, #4]
 8082670:	3201      	adds	r2, #1
 8082672:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8082674:	4770      	bx	lr

08082676 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082678:	460c      	mov	r4, r1
 808267a:	4606      	mov	r6, r0
 808267c:	460f      	mov	r7, r1
 808267e:	f854 3b04 	ldr.w	r3, [r4], #4
 8082682:	ad02      	add	r5, sp, #8
 8082684:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082688:	4621      	mov	r1, r4
 808268a:	a801      	add	r0, sp, #4
 808268c:	f7ff ffec 	bl	8082668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082690:	4629      	mov	r1, r5
 8082692:	4630      	mov	r0, r6
 8082694:	f7ff ffd7 	bl	8082646 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082698:	a801      	add	r0, sp, #4
 808269a:	f7fe f981 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808269e:	4620      	mov	r0, r4
 80826a0:	f7fe f97e 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80826a4:	4638      	mov	r0, r7
 80826a6:	2108      	movs	r1, #8
 80826a8:	f001 fb91 	bl	8083dce <_ZdlPvj>
        return p;
    }
 80826ac:	4630      	mov	r0, r6
 80826ae:	b003      	add	sp, #12
 80826b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080826b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80826b2:	b513      	push	{r0, r1, r4, lr}
 80826b4:	460b      	mov	r3, r1
 80826b6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80826b8:	c803      	ldmia	r0, {r0, r1}
 80826ba:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80826be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80826c2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80826c6:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80826ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80826ce:	b002      	add	sp, #8
 80826d0:	bd10      	pop	{r4, pc}
	...

080826d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80826d4:	b538      	push	{r3, r4, r5, lr}
 80826d6:	2300      	movs	r3, #0
 80826d8:	4604      	mov	r4, r0
 80826da:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80826dc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80826de:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80826e0:	f7fd fcdd 	bl	808009e <_Znwj>
 80826e4:	b128      	cbz	r0, 80826f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80826e6:	2301      	movs	r3, #1
 80826e8:	6043      	str	r3, [r0, #4]
 80826ea:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80826ec:	4b02      	ldr	r3, [pc, #8]	; (80826f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80826ee:	60c5      	str	r5, [r0, #12]
 80826f0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80826f2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80826f4:	4620      	mov	r0, r4
 80826f6:	bd38      	pop	{r3, r4, r5, pc}
 80826f8:	080861e0 	.word	0x080861e0

080826fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80826fc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80826fe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082700:	b90a      	cbnz	r2, 8082706 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082702:	f001 fb80 	bl	8083e06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082706:	68c3      	ldr	r3, [r0, #12]
    }
 8082708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808270c:	4718      	bx	r3

0808270e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808270e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082710:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082712:	f100 0110 	add.w	r1, r0, #16
 8082716:	f7ff fff1 	bl	80826fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808271a:	bd08      	pop	{r3, pc}

0808271c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808271c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808271e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082720:	b90a      	cbnz	r2, 8082726 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082722:	f001 fb70 	bl	8083e06 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082726:	68c3      	ldr	r3, [r0, #12]
    }
 8082728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808272c:	4718      	bx	r3

0808272e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808272e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082730:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082732:	f100 0110 	add.w	r1, r0, #16
 8082736:	f7ff fff1 	bl	808271c <_ZNKSt8functionIFvRKbEEclES1_>
 808273a:	bd08      	pop	{r3, pc}

0808273c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808273c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808273e:	2300      	movs	r3, #0
 8082740:	6083      	str	r3, [r0, #8]
 8082742:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082744:	4604      	mov	r4, r0
 8082746:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082748:	b12b      	cbz	r3, 8082756 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808274a:	2202      	movs	r2, #2
 808274c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808274e:	68eb      	ldr	r3, [r5, #12]
 8082750:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082752:	68ab      	ldr	r3, [r5, #8]
 8082754:	60a3      	str	r3, [r4, #8]
	}
    }
 8082756:	4620      	mov	r0, r4
 8082758:	bd38      	pop	{r3, r4, r5, pc}
	...

0808275c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808275e:	b089      	sub	sp, #36	; 0x24
 8082760:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8082762:	4668      	mov	r0, sp
 8082764:	f7ff ff09 	bl	808257a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082768:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808276c:	2300      	movs	r3, #0
 808276e:	f88d 3008 	strb.w	r3, [sp, #8]
 8082772:	e8d4 3f4f 	ldrexb	r3, [r4]
 8082776:	2b00      	cmp	r3, #0
 8082778:	d103      	bne.n	8082782 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808277a:	e8c4 2f41 	strexb	r1, r2, [r4]
 808277e:	2900      	cmp	r1, #0
 8082780:	d1f7      	bne.n	8082772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8082782:	d002      	beq.n	808278a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8082784:	f88d 3008 	strb.w	r3, [sp, #8]
 8082788:	e063      	b.n	8082852 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808278a:	f114 050c 	adds.w	r5, r4, #12
 808278e:	d003      	beq.n	8082798 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8082790:	4669      	mov	r1, sp
 8082792:	4628      	mov	r0, r5
 8082794:	f7ff fef1 	bl	808257a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082798:	f3bf 8f5f 	dmb	sy
 808279c:	2301      	movs	r3, #1
 808279e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80827a0:	f3bf 8f5f 	dmb	sy
 80827a4:	f104 0308 	add.w	r3, r4, #8
 80827a8:	2000      	movs	r0, #0
 80827aa:	e853 6f00 	ldrex	r6, [r3]
 80827ae:	e843 0200 	strex	r2, r0, [r3]
 80827b2:	2a00      	cmp	r2, #0
 80827b4:	d1f9      	bne.n	80827aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80827b6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80827ba:	2e00      	cmp	r6, #0
 80827bc:	d049      	beq.n	8082852 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80827be:	f7ff fc49 	bl	8082054 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80827c2:	b120      	cbz	r0, 80827ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80827c4:	4629      	mov	r1, r5
 80827c6:	4630      	mov	r0, r6
 80827c8:	f7ff ff98 	bl	80826fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80827cc:	e03a      	b.n	8082844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80827ce:	4631      	mov	r1, r6
 80827d0:	a802      	add	r0, sp, #8
 80827d2:	f7ff ffb3 	bl	808273c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80827d6:	68e0      	ldr	r0, [r4, #12]
 80827d8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80827dc:	b108      	cbz	r0, 80827e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80827de:	f002 fd39 	bl	8085254 <strdup>
 80827e2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80827e4:	2010      	movs	r0, #16
 80827e6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80827ea:	f7fd fc58 	bl	808009e <_Znwj>
 80827ee:	4605      	mov	r5, r0
 80827f0:	b1e8      	cbz	r0, 808282e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80827f2:	2700      	movs	r7, #0
 80827f4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80827f6:	2018      	movs	r0, #24
 80827f8:	f7fd fc51 	bl	808009e <_Znwj>
 80827fc:	4604      	mov	r4, r0
 80827fe:	b188      	cbz	r0, 8082824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082800:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082802:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082804:	a802      	add	r0, sp, #8
 8082806:	f7ff ff54 	bl	80826b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808280a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808280c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808280e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082810:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082812:	9204      	str	r2, [sp, #16]
 8082814:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082816:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082818:	60e3      	str	r3, [r4, #12]
 808281a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808281e:	9205      	str	r2, [sp, #20]
 8082820:	f7ff feab 	bl	808257a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082824:	4b0d      	ldr	r3, [pc, #52]	; (808285c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082826:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082828:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808282a:	4b0d      	ldr	r3, [pc, #52]	; (8082860 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 808282c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808282e:	a806      	add	r0, sp, #24
 8082830:	f7ff feb2 	bl	8082598 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082834:	a802      	add	r0, sp, #8
 8082836:	f7ff fa05 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808283a:	2200      	movs	r2, #0
 808283c:	4629      	mov	r1, r5
 808283e:	4809      	ldr	r0, [pc, #36]	; (8082864 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8082840:	f7ff fc10 	bl	8082064 <application_thread_invoke>
 8082844:	4630      	mov	r0, r6
 8082846:	f7ff f9fd 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808284a:	2110      	movs	r1, #16
 808284c:	4630      	mov	r0, r6
 808284e:	f001 fabe 	bl	8083dce <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8082852:	4668      	mov	r0, sp
 8082854:	f7ff fea0 	bl	8082598 <_ZN8particle5ErrorD1Ev>
    }
 8082858:	b009      	add	sp, #36	; 0x24
 808285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808285c:	0808270f 	.word	0x0808270f
 8082860:	08082985 	.word	0x08082985
 8082864:	0808229b 	.word	0x0808229b

08082868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808286c:	b08b      	sub	sp, #44	; 0x2c
 808286e:	4606      	mov	r6, r0
 8082870:	460f      	mov	r7, r1
 8082872:	4690      	mov	r8, r2
 8082874:	4699      	mov	r9, r3
 8082876:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808287a:	f7ff fc53 	bl	8082124 <spark_cloud_flag_connected>
 808287e:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8082880:	4683      	mov	fp, r0
 8082882:	bb30      	cbnz	r0, 80828d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082884:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082888:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808288a:	a905      	add	r1, sp, #20
 808288c:	4628      	mov	r0, r5
 808288e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082892:	f7ff fe72 	bl	808257a <_ZN8particle5ErrorC1EOS0_>
 8082896:	2014      	movs	r0, #20
 8082898:	f7fd fc01 	bl	808009e <_Znwj>
 808289c:	4604      	mov	r4, r0
 808289e:	b158      	cbz	r0, 80828b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80828a0:	2302      	movs	r3, #2
 80828a2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80828a4:	2301      	movs	r3, #1
 80828a6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80828a8:	f8c0 b004 	str.w	fp, [r0, #4]
 80828ac:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80828b0:	4629      	mov	r1, r5
 80828b2:	300c      	adds	r0, #12
 80828b4:	f7ff fe61 	bl	808257a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80828b8:	4630      	mov	r0, r6
 80828ba:	4621      	mov	r1, r4
 80828bc:	f840 4b04 	str.w	r4, [r0], #4
 80828c0:	f7ff ff08 	bl	80826d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80828c4:	4628      	mov	r0, r5
 80828c6:	f7ff fe67 	bl	8082598 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80828ca:	a805      	add	r0, sp, #20
 80828cc:	f7ff fe64 	bl	8082598 <_ZN8particle5ErrorD1Ev>
 80828d0:	e052      	b.n	8082978 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80828d2:	2400      	movs	r4, #0
 80828d4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80828d6:	2014      	movs	r0, #20
 80828d8:	606c      	str	r4, [r5, #4]
 80828da:	60ac      	str	r4, [r5, #8]
 80828dc:	9307      	str	r3, [sp, #28]
 80828de:	f7fd fbde 	bl	808009e <_Znwj>
 80828e2:	4601      	mov	r1, r0
 80828e4:	b118      	cbz	r0, 80828ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80828e6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80828e8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80828ea:	6044      	str	r4, [r0, #4]
 80828ec:	6084      	str	r4, [r0, #8]
 80828ee:	a804      	add	r0, sp, #16
 80828f0:	9103      	str	r1, [sp, #12]
 80828f2:	f7ff feef 	bl	80826d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80828f6:	4b22      	ldr	r3, [pc, #136]	; (8082980 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80828f8:	2008      	movs	r0, #8
 80828fa:	9308      	str	r3, [sp, #32]
 80828fc:	f7fd fbcf 	bl	808009e <_Znwj>
 8082900:	4604      	mov	r4, r0
 8082902:	b128      	cbz	r0, 8082910 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082904:	9b03      	ldr	r3, [sp, #12]
 8082906:	a904      	add	r1, sp, #16
 8082908:	f840 3b04 	str.w	r3, [r0], #4
 808290c:	f7ff feac 	bl	8082668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082910:	9500      	str	r5, [sp, #0]
 8082912:	fa5f f38a 	uxtb.w	r3, sl
 8082916:	464a      	mov	r2, r9
 8082918:	4641      	mov	r1, r8
 808291a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808291c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808291e:	f7ff fc09 	bl	8082134 <spark_send_event>
 8082922:	b920      	cbnz	r0, 808292e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082924:	9b03      	ldr	r3, [sp, #12]
 8082926:	785b      	ldrb	r3, [r3, #1]
 8082928:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808292c:	b183      	cbz	r3, 8082950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808292e:	9b03      	ldr	r3, [sp, #12]
 8082930:	a904      	add	r1, sp, #16
 8082932:	a806      	add	r0, sp, #24
 8082934:	9305      	str	r3, [sp, #20]
 8082936:	f7ff fe97 	bl	8082668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808293a:	a905      	add	r1, sp, #20
 808293c:	4630      	mov	r0, r6
 808293e:	f7ff fe82 	bl	8082646 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082942:	a806      	add	r0, sp, #24
 8082944:	f7fe f82c 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082948:	a804      	add	r0, sp, #16
 808294a:	f7fe f829 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808294e:	e013      	b.n	8082978 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8082950:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8082954:	a905      	add	r1, sp, #20
 8082956:	a803      	add	r0, sp, #12
 8082958:	9205      	str	r2, [sp, #20]
 808295a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808295e:	f7ff fefd 	bl	808275c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082962:	a805      	add	r0, sp, #20
 8082964:	f7ff fe18 	bl	8082598 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082968:	a805      	add	r0, sp, #20
 808296a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808296c:	f7ff fe83 	bl	8082676 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8082970:	a806      	add	r0, sp, #24
 8082972:	f7fe f815 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082976:	e7da      	b.n	808292e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8082978:	4630      	mov	r0, r6
 808297a:	b00b      	add	sp, #44	; 0x2c
 808297c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082980:	08082af5 	.word	0x08082af5

08082984 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082984:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082988:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808298a:	d006      	beq.n	808299a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808298c:	2a03      	cmp	r2, #3
 808298e:	d017      	beq.n	80829c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082990:	2a01      	cmp	r2, #1
 8082992:	d122      	bne.n	80829da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082994:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082996:	6003      	str	r3, [r0, #0]
	      break;
 8082998:	e01f      	b.n	80829da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808299a:	2018      	movs	r0, #24
 808299c:	680e      	ldr	r6, [r1, #0]
 808299e:	f7fd fb7e 	bl	808009e <_Znwj>
 80829a2:	4605      	mov	r5, r0
 80829a4:	b150      	cbz	r0, 80829bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80829a6:	4631      	mov	r1, r6
 80829a8:	f7ff fec8 	bl	808273c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80829ac:	6930      	ldr	r0, [r6, #16]
 80829ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80829b2:	b108      	cbz	r0, 80829b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80829b4:	f002 fc4e 	bl	8085254 <strdup>
 80829b8:	6128      	str	r0, [r5, #16]
 80829ba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80829bc:	6025      	str	r5, [r4, #0]
 80829be:	e00c      	b.n	80829da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80829c0:	6804      	ldr	r4, [r0, #0]
 80829c2:	b154      	cbz	r4, 80829da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80829c4:	f104 0010 	add.w	r0, r4, #16
 80829c8:	f7ff fde6 	bl	8082598 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80829cc:	4620      	mov	r0, r4
 80829ce:	f7ff f939 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80829d2:	2118      	movs	r1, #24
 80829d4:	4620      	mov	r0, r4
 80829d6:	f001 f9fa 	bl	8083dce <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80829da:	2000      	movs	r0, #0
 80829dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080829de <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80829de:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80829e0:	2300      	movs	r3, #0
 80829e2:	6083      	str	r3, [r0, #8]
 80829e4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80829e6:	4604      	mov	r4, r0
 80829e8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80829ea:	b12b      	cbz	r3, 80829f8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80829ec:	2202      	movs	r2, #2
 80829ee:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80829f0:	68eb      	ldr	r3, [r5, #12]
 80829f2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80829f4:	68ab      	ldr	r3, [r5, #8]
 80829f6:	60a3      	str	r3, [r4, #8]
	}
    }
 80829f8:	4620      	mov	r0, r4
 80829fa:	bd38      	pop	{r3, r4, r5, pc}

080829fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80829fc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80829fe:	b570      	push	{r4, r5, r6, lr}
 8082a00:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082a02:	d006      	beq.n	8082a12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082a04:	2a03      	cmp	r2, #3
 8082a06:	d011      	beq.n	8082a2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082a08:	2a01      	cmp	r2, #1
 8082a0a:	d118      	bne.n	8082a3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082a0c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082a0e:	6003      	str	r3, [r0, #0]
	      break;
 8082a10:	e015      	b.n	8082a3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082a12:	2014      	movs	r0, #20
 8082a14:	680e      	ldr	r6, [r1, #0]
 8082a16:	f7fd fb42 	bl	808009e <_Znwj>
 8082a1a:	4605      	mov	r5, r0
 8082a1c:	b120      	cbz	r0, 8082a28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082a1e:	4631      	mov	r1, r6
 8082a20:	f7ff ffdd 	bl	80829de <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082a24:	7c33      	ldrb	r3, [r6, #16]
 8082a26:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082a28:	6025      	str	r5, [r4, #0]
 8082a2a:	e008      	b.n	8082a3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082a2c:	6804      	ldr	r4, [r0, #0]
 8082a2e:	b134      	cbz	r4, 8082a3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082a30:	4620      	mov	r0, r4
 8082a32:	f7ff f907 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082a36:	2114      	movs	r1, #20
 8082a38:	4620      	mov	r0, r4
 8082a3a:	f001 f9c8 	bl	8083dce <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082a3e:	2000      	movs	r0, #0
 8082a40:	bd70      	pop	{r4, r5, r6, pc}
	...

08082a44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082a46:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082a48:	f3bf 8f5f 	dmb	sy
 8082a4c:	b087      	sub	sp, #28
 8082a4e:	2300      	movs	r3, #0
 8082a50:	e850 6f00 	ldrex	r6, [r0]
 8082a54:	e840 3200 	strex	r2, r3, [r0]
 8082a58:	2a00      	cmp	r2, #0
 8082a5a:	d1f9      	bne.n	8082a50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082a5c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082a60:	2e00      	cmp	r6, #0
 8082a62:	d03f      	beq.n	8082ae4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082a64:	4618      	mov	r0, r3
 8082a66:	f7ff faf5 	bl	8082054 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082a6a:	4607      	mov	r7, r0
 8082a6c:	b120      	cbz	r0, 8082a78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082a6e:	4621      	mov	r1, r4
 8082a70:	4630      	mov	r0, r6
 8082a72:	f7ff fe53 	bl	808271c <_ZNKSt8functionIFvRKbEEclES1_>
 8082a76:	e02e      	b.n	8082ad6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082a78:	4631      	mov	r1, r6
 8082a7a:	a801      	add	r0, sp, #4
 8082a7c:	f7ff ffaf 	bl	80829de <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082a80:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082a82:	2010      	movs	r0, #16
 8082a84:	f88d 3014 	strb.w	r3, [sp, #20]
 8082a88:	f7fd fb09 	bl	808009e <_Znwj>
 8082a8c:	4605      	mov	r5, r0
 8082a8e:	b1d0      	cbz	r0, 8082ac6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a90:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082a92:	2014      	movs	r0, #20
 8082a94:	f7fd fb03 	bl	808009e <_Znwj>
 8082a98:	4604      	mov	r4, r0
 8082a9a:	b178      	cbz	r0, 8082abc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a9c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082a9e:	4601      	mov	r1, r0
 8082aa0:	a801      	add	r0, sp, #4
 8082aa2:	f7ff fe06 	bl	80826b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082aa6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082aa8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082aaa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082aac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082aae:	9203      	str	r2, [sp, #12]
 8082ab0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082ab2:	60e3      	str	r3, [r4, #12]
 8082ab4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082ab8:	9204      	str	r2, [sp, #16]
 8082aba:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082abc:	4b0a      	ldr	r3, [pc, #40]	; (8082ae8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082abe:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082ac0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082ac2:	4b0a      	ldr	r3, [pc, #40]	; (8082aec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082ac4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082ac6:	a801      	add	r0, sp, #4
 8082ac8:	f7ff f8bc 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082acc:	2200      	movs	r2, #0
 8082ace:	4629      	mov	r1, r5
 8082ad0:	4807      	ldr	r0, [pc, #28]	; (8082af0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082ad2:	f7ff fac7 	bl	8082064 <application_thread_invoke>
 8082ad6:	4630      	mov	r0, r6
 8082ad8:	f7ff f8b4 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082adc:	2110      	movs	r1, #16
 8082ade:	4630      	mov	r0, r6
 8082ae0:	f001 f975 	bl	8083dce <_ZdlPvj>
        }
    }
 8082ae4:	b007      	add	sp, #28
 8082ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ae8:	0808272f 	.word	0x0808272f
 8082aec:	080829fd 	.word	0x080829fd
 8082af0:	0808229b 	.word	0x0808229b

08082af4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082af4:	b530      	push	{r4, r5, lr}
 8082af6:	4604      	mov	r4, r0
 8082af8:	b085      	sub	sp, #20
 8082afa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082afc:	4668      	mov	r0, sp
 8082afe:	4611      	mov	r1, r2
 8082b00:	f7ff fdb9 	bl	8082676 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082b04:	b17c      	cbz	r4, 8082b26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082b06:	b224      	sxth	r4, r4
 8082b08:	4628      	mov	r0, r5
 8082b0a:	b10d      	cbz	r5, 8082b10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082b0c:	f002 fba2 	bl	8085254 <strdup>
 8082b10:	9002      	str	r0, [sp, #8]
 8082b12:	a902      	add	r1, sp, #8
 8082b14:	4668      	mov	r0, sp
 8082b16:	f8ad 400c 	strh.w	r4, [sp, #12]
 8082b1a:	f7ff fe1f 	bl	808275c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082b1e:	a802      	add	r0, sp, #8
 8082b20:	f7ff fd3a 	bl	8082598 <_ZN8particle5ErrorD1Ev>
 8082b24:	e01d      	b.n	8082b62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082b26:	f04f 0201 	mov.w	r2, #1
 8082b2a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082b2c:	f88d 4008 	strb.w	r4, [sp, #8]
 8082b30:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082b34:	42a3      	cmp	r3, r4
 8082b36:	d103      	bne.n	8082b40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8082b38:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082b3c:	2900      	cmp	r1, #0
 8082b3e:	d1f7      	bne.n	8082b30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082b40:	d002      	beq.n	8082b48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082b42:	f88d 3008 	strb.w	r3, [sp, #8]
 8082b46:	e00c      	b.n	8082b62 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082b48:	f110 010c 	adds.w	r1, r0, #12
 8082b4c:	f04f 0301 	mov.w	r3, #1
 8082b50:	bf18      	it	ne
 8082b52:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082b54:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082b58:	3004      	adds	r0, #4
 8082b5a:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082b5e:	f7ff ff71 	bl	8082a44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082b62:	a801      	add	r0, sp, #4
 8082b64:	f7fd ff1c 	bl	80809a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082b68:	b005      	add	sp, #20
 8082b6a:	bd30      	pop	{r4, r5, pc}

08082b6c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8082b6c:	4770      	bx	lr

08082b6e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082b70:	4606      	mov	r6, r0
 8082b72:	4615      	mov	r5, r2
 8082b74:	460c      	mov	r4, r1
 8082b76:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082b78:	42bc      	cmp	r4, r7
 8082b7a:	d006      	beq.n	8082b8a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082b7c:	6833      	ldr	r3, [r6, #0]
 8082b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082b82:	689b      	ldr	r3, [r3, #8]
 8082b84:	4630      	mov	r0, r6
 8082b86:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082b88:	e7f6      	b.n	8082b78 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8082b8a:	4628      	mov	r0, r5
 8082b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082b8e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082b8e:	2200      	movs	r2, #0
 8082b90:	7c00      	ldrb	r0, [r0, #16]
 8082b92:	f7ff b93d 	b.w	8081e10 <HAL_I2C_Write_Data>

08082b96 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082b96:	2100      	movs	r1, #0
 8082b98:	7c00      	ldrb	r0, [r0, #16]
 8082b9a:	f7ff b941 	b.w	8081e20 <HAL_I2C_Available_Data>

08082b9e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8082b9e:	2100      	movs	r1, #0
 8082ba0:	7c00      	ldrb	r0, [r0, #16]
 8082ba2:	f7ff b945 	b.w	8081e30 <HAL_I2C_Read_Data>

08082ba6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082ba6:	2100      	movs	r1, #0
 8082ba8:	7c00      	ldrb	r0, [r0, #16]
 8082baa:	f7ff b949 	b.w	8081e40 <HAL_I2C_Peek_Data>

08082bae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082bae:	2100      	movs	r1, #0
 8082bb0:	7c00      	ldrb	r0, [r0, #16]
 8082bb2:	f7ff b94d 	b.w	8081e50 <HAL_I2C_Flush_Data>

08082bb6 <_ZN7TwoWireD0Ev>:
 8082bb6:	b510      	push	{r4, lr}
 8082bb8:	4604      	mov	r4, r0
 8082bba:	2114      	movs	r1, #20
 8082bbc:	f001 f907 	bl	8083dce <_ZdlPvj>
 8082bc0:	4620      	mov	r0, r4
 8082bc2:	bd10      	pop	{r4, pc}

08082bc4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8082bc4:	b510      	push	{r4, lr}
 8082bc6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082bc8:	2300      	movs	r3, #0
 8082bca:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082bd0:	60a3      	str	r3, [r4, #8]
 8082bd2:	4b04      	ldr	r3, [pc, #16]	; (8082be4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8082bd4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8082bd6:	4608      	mov	r0, r1
 8082bd8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8082bda:	4611      	mov	r1, r2
 8082bdc:	f7ff f948 	bl	8081e70 <HAL_I2C_Init>
}
 8082be0:	4620      	mov	r0, r4
 8082be2:	bd10      	pop	{r4, pc}
 8082be4:	080861fc 	.word	0x080861fc

08082be8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082be8:	2300      	movs	r3, #0
 8082bea:	461a      	mov	r2, r3
 8082bec:	4619      	mov	r1, r3
 8082bee:	7c00      	ldrb	r0, [r0, #16]
 8082bf0:	f7ff b8f6 	b.w	8081de0 <HAL_I2C_Begin>

08082bf4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8082bf4:	b570      	push	{r4, r5, r6, lr}
 8082bf6:	460c      	mov	r4, r1
 8082bf8:	4606      	mov	r6, r0
 8082bfa:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 8082bfc:	2514      	movs	r5, #20
 8082bfe:	462a      	mov	r2, r5
 8082c00:	2100      	movs	r1, #0
 8082c02:	a801      	add	r0, sp, #4
 8082c04:	f002 fad3 	bl	80851ae <memset>
 8082c08:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 8082c0a:	2200      	movs	r2, #0
 8082c0c:	f88d 3008 	strb.w	r3, [sp, #8]
 8082c10:	6863      	ldr	r3, [r4, #4]
 8082c12:	a901      	add	r1, sp, #4
 8082c14:	9303      	str	r3, [sp, #12]
 8082c16:	68e3      	ldr	r3, [r4, #12]
 8082c18:	7c30      	ldrb	r0, [r6, #16]
 8082c1a:	9304      	str	r3, [sp, #16]
 8082c1c:	7a23      	ldrb	r3, [r4, #8]
 8082c1e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8082c22:	9305      	str	r3, [sp, #20]
 8082c24:	f7ff f93c 	bl	8081ea0 <HAL_I2C_Request_Data_Ex>
}
 8082c28:	b006      	add	sp, #24
 8082c2a:	bd70      	pop	{r4, r5, r6, pc}

08082c2c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 8082c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082c2e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082c30:	f88d 1000 	strb.w	r1, [sp]
 8082c34:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082c38:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082c3a:	bf18      	it	ne
 8082c3c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082c3e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8082c40:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082c42:	f88d 3008 	strb.w	r3, [sp, #8]
 8082c46:	f7ff ffd5 	bl	8082bf4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082c4a:	b005      	add	sp, #20
 8082c4c:	f85d fb04 	ldr.w	pc, [sp], #4

08082c50 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8082c50:	2200      	movs	r2, #0
 8082c52:	7c00      	ldrb	r0, [r0, #16]
 8082c54:	f7ff b8cc 	b.w	8081df0 <HAL_I2C_Begin_Transmission>

08082c58 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8082c58:	b2c9      	uxtb	r1, r1
 8082c5a:	f7ff bff9 	b.w	8082c50 <_ZN7TwoWire17beginTransmissionEh>

08082c5e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082c5e:	2200      	movs	r2, #0
 8082c60:	7c00      	ldrb	r0, [r0, #16]
 8082c62:	f7ff b8cd 	b.w	8081e00 <HAL_I2C_End_Transmission>

08082c66 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082c66:	2100      	movs	r1, #0
 8082c68:	7c00      	ldrb	r0, [r0, #16]
 8082c6a:	f7ff b8f9 	b.w	8081e60 <HAL_I2C_Is_Enabled>

08082c6e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082c6e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8082c70:	2100      	movs	r1, #0
 8082c72:	7c00      	ldrb	r0, [r0, #16]
 8082c74:	f7ff f904 	bl	8081e80 <HAL_I2C_Acquire>
}
 8082c78:	fab0 f080 	clz	r0, r0
 8082c7c:	0940      	lsrs	r0, r0, #5
 8082c7e:	bd08      	pop	{r3, pc}

08082c80 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082c80:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8082c82:	2100      	movs	r1, #0
 8082c84:	7c00      	ldrb	r0, [r0, #16]
 8082c86:	f7ff f903 	bl	8081e90 <HAL_I2C_Release>
}
 8082c8a:	fab0 f080 	clz	r0, r0
 8082c8e:	0940      	lsrs	r0, r0, #5
 8082c90:	bd08      	pop	{r3, pc}

08082c92 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8082c92:	4700      	bx	r0

08082c94 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082c96:	461c      	mov	r4, r3
 8082c98:	b085      	sub	sp, #20
 8082c9a:	460e      	mov	r6, r1
 8082c9c:	4617      	mov	r7, r2
 8082c9e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 8082ca0:	f7ff f88e 	bl	8081dc0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 8082ca4:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8082ca6:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082ca8:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082cac:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082cae:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 8082cb2:	bfb4      	ite	lt
 8082cb4:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082cb6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082cba:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082cbc:	bfa4      	itt	ge
 8082cbe:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 8082cc2:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082cc4:	9300      	str	r3, [sp, #0]
 8082cc6:	4906      	ldr	r1, [pc, #24]	; (8082ce0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8082cc8:	463b      	mov	r3, r7
 8082cca:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082ccc:	bfa8      	it	ge
 8082cce:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082cd2:	f7ff f86d 	bl	8081db0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082cd6:	fab0 f080 	clz	r0, r0
 8082cda:	0940      	lsrs	r0, r0, #5
 8082cdc:	b005      	add	sp, #20
 8082cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ce0:	08082c93 	.word	0x08082c93

08082ce4 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8082ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082ce6:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8082ce8:	f7ff f86a 	bl	8081dc0 <HAL_Interrupts_Detach>
 8082cec:	4607      	mov	r7, r0
 8082cee:	b968      	cbnz	r0, 8082d0c <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 8082cf0:	4d08      	ldr	r5, [pc, #32]	; (8082d14 <_Z15detachInterruptt+0x30>)
 8082cf2:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8082cf6:	b15c      	cbz	r4, 8082d10 <_Z15detachInterruptt+0x2c>
 8082cf8:	4620      	mov	r0, r4
 8082cfa:	f7fe ffa3 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8082cfe:	2110      	movs	r1, #16
 8082d00:	4620      	mov	r0, r4
 8082d02:	f001 f864 	bl	8083dce <_ZdlPvj>
        handlers[pin] = nullptr;
 8082d06:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 8082d0a:	e001      	b.n	8082d10 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 8082d0c:	2000      	movs	r0, #0
 8082d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 8082d10:	2001      	movs	r0, #1
}
 8082d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082d14:	20000300 	.word	0x20000300

08082d18 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082d18:	4770      	bx	lr

08082d1a <_ZN9IPAddressD0Ev>:
 8082d1a:	b510      	push	{r4, lr}
 8082d1c:	4604      	mov	r4, r0
 8082d1e:	2108      	movs	r1, #8
 8082d20:	f001 f855 	bl	8083dce <_ZdlPvj>
 8082d24:	4620      	mov	r0, r4
 8082d26:	bd10      	pop	{r4, pc}

08082d28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082d2a:	460f      	mov	r7, r1
 8082d2c:	f100 0608 	add.w	r6, r0, #8
 8082d30:	1d05      	adds	r5, r0, #4
 8082d32:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8082d34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082d38:	220a      	movs	r2, #10
 8082d3a:	4638      	mov	r0, r7
 8082d3c:	f000 f98b 	bl	8083056 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082d40:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082d42:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082d44:	d007      	beq.n	8082d56 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082d46:	2c00      	cmp	r4, #0
 8082d48:	d0f4      	beq.n	8082d34 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082d4a:	212e      	movs	r1, #46	; 0x2e
 8082d4c:	4638      	mov	r0, r7
 8082d4e:	f000 f969 	bl	8083024 <_ZN5Print5printEc>
 8082d52:	4404      	add	r4, r0
 8082d54:	e7ee      	b.n	8082d34 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082d56:	4620      	mov	r0, r4
 8082d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08082d5c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082d5c:	4a02      	ldr	r2, [pc, #8]	; (8082d68 <_ZN9IPAddressC1Ev+0xc>)
 8082d5e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082d60:	2200      	movs	r2, #0
 8082d62:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082d64:	4770      	bx	lr
 8082d66:	bf00      	nop
 8082d68:	08086224 	.word	0x08086224

08082d6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082d6c:	4a02      	ldr	r2, [pc, #8]	; (8082d78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082d6e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082d70:	680a      	ldr	r2, [r1, #0]
 8082d72:	6042      	str	r2, [r0, #4]
}
 8082d74:	4770      	bx	lr
 8082d76:	bf00      	nop
 8082d78:	08086224 	.word	0x08086224

08082d7c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082d7c:	4a01      	ldr	r2, [pc, #4]	; (8082d84 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082d7e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082d80:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082d82:	4770      	bx	lr
 8082d84:	08086224 	.word	0x08086224

08082d88 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082d88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082d8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082d8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082d92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082d96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082d9a:	6041      	str	r1, [r0, #4]
 8082d9c:	bd10      	pop	{r4, pc}
	...

08082da0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082da2:	4d04      	ldr	r5, [pc, #16]	; (8082db4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082da4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082da6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082daa:	9500      	str	r5, [sp, #0]
 8082dac:	f7ff ffec 	bl	8082d88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082db0:	b003      	add	sp, #12
 8082db2:	bd30      	pop	{r4, r5, pc}
 8082db4:	08086224 	.word	0x08086224

08082db8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082db8:	4a01      	ldr	r2, [pc, #4]	; (8082dc0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082dba:	4b02      	ldr	r3, [pc, #8]	; (8082dc4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082dbc:	601a      	str	r2, [r3, #0]
 8082dbe:	4770      	bx	lr
 8082dc0:	080862a6 	.word	0x080862a6
 8082dc4:	200003bc 	.word	0x200003bc

08082dc8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082dc8:	2300      	movs	r3, #0
 8082dca:	461a      	mov	r2, r3
 8082dcc:	6840      	ldr	r0, [r0, #4]
 8082dce:	f7ff b9d1 	b.w	8082174 <network_connect>

08082dd2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082dd2:	2200      	movs	r2, #0
 8082dd4:	2102      	movs	r1, #2
 8082dd6:	6840      	ldr	r0, [r0, #4]
 8082dd8:	f7ff b9dc 	b.w	8082194 <network_disconnect>

08082ddc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082ddc:	2200      	movs	r2, #0
 8082dde:	4611      	mov	r1, r2
 8082de0:	6840      	ldr	r0, [r0, #4]
 8082de2:	f7ff b9cf 	b.w	8082184 <network_connecting>

08082de6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082de6:	2200      	movs	r2, #0
 8082de8:	4611      	mov	r1, r2
 8082dea:	6840      	ldr	r0, [r0, #4]
 8082dec:	f7ff b9da 	b.w	80821a4 <network_ready>

08082df0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082df0:	2300      	movs	r3, #0
 8082df2:	461a      	mov	r2, r3
 8082df4:	4619      	mov	r1, r3
 8082df6:	6840      	ldr	r0, [r0, #4]
 8082df8:	f7ff b9dc 	b.w	80821b4 <network_on>

08082dfc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082dfc:	2300      	movs	r3, #0
 8082dfe:	461a      	mov	r2, r3
 8082e00:	4619      	mov	r1, r3
 8082e02:	6840      	ldr	r0, [r0, #4]
 8082e04:	f7ff b9de 	b.w	80821c4 <network_off>

08082e08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082e08:	2200      	movs	r2, #0
 8082e0a:	f081 0101 	eor.w	r1, r1, #1
 8082e0e:	6840      	ldr	r0, [r0, #4]
 8082e10:	f7ff b9e0 	b.w	80821d4 <network_listen>

08082e14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082e14:	2200      	movs	r2, #0
 8082e16:	6840      	ldr	r0, [r0, #4]
 8082e18:	f7ff b9ec 	b.w	80821f4 <network_set_listen_timeout>

08082e1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082e1c:	2200      	movs	r2, #0
 8082e1e:	4611      	mov	r1, r2
 8082e20:	6840      	ldr	r0, [r0, #4]
 8082e22:	f7ff b9ef 	b.w	8082204 <network_get_listen_timeout>

08082e26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082e26:	2200      	movs	r2, #0
 8082e28:	4611      	mov	r1, r2
 8082e2a:	6840      	ldr	r0, [r0, #4]
 8082e2c:	f7ff b9da 	b.w	80821e4 <network_listening>

08082e30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082e32:	4617      	mov	r7, r2
 8082e34:	b087      	sub	sp, #28
 8082e36:	4605      	mov	r5, r0
    IPAddress addr;
 8082e38:	a804      	add	r0, sp, #16
 8082e3a:	f7ff ff8f 	bl	8082d5c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082e3e:	2600      	movs	r6, #0
 8082e40:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082e42:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082e44:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082e48:	f002 fa1f 	bl	808528a <strlen>
 8082e4c:	4b0a      	ldr	r3, [pc, #40]	; (8082e78 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082e4e:	9600      	str	r6, [sp, #0]
 8082e50:	b281      	uxth	r1, r0
 8082e52:	685b      	ldr	r3, [r3, #4]
 8082e54:	4622      	mov	r2, r4
 8082e56:	4638      	mov	r0, r7
 8082e58:	f7fe ff0a 	bl	8081c70 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082e5c:	b120      	cbz	r0, 8082e68 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082e5e:	4631      	mov	r1, r6
 8082e60:	4628      	mov	r0, r5
 8082e62:	f7ff ff8b 	bl	8082d7c <_ZN9IPAddressC1Em>
 8082e66:	e003      	b.n	8082e70 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082e68:	4621      	mov	r1, r4
 8082e6a:	4628      	mov	r0, r5
 8082e6c:	f7ff ff7e 	bl	8082d6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082e70:	4628      	mov	r0, r5
 8082e72:	b007      	add	sp, #28
 8082e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082e76:	bf00      	nop
 8082e78:	200002d0 	.word	0x200002d0

08082e7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082e7c:	4b02      	ldr	r3, [pc, #8]	; (8082e88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082e7e:	4a03      	ldr	r2, [pc, #12]	; (8082e8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082e80:	601a      	str	r2, [r3, #0]
 8082e82:	2200      	movs	r2, #0
 8082e84:	605a      	str	r2, [r3, #4]
 8082e86:	4770      	bx	lr
 8082e88:	200003c0 	.word	0x200003c0
 8082e8c:	08086310 	.word	0x08086310

08082e90 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082e90:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082e92:	f000 ff59 	bl	8083d48 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8082e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8082e9a:	f7ff bee8 	b.w	8082c6e <_ZN7TwoWire4lockEv>

08082e9e <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8082e9e:	b510      	push	{r4, lr}
 8082ea0:	4604      	mov	r4, r0
    lock_(_lock)
 8082ea2:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8082ea4:	b109      	cbz	r1, 8082eaa <_ZN4PMICC1Eb+0xc>
        lock();
 8082ea6:	f7ff fff3 	bl	8082e90 <_ZN4PMIC4lockEv>
    }
}
 8082eaa:	4620      	mov	r0, r4
 8082eac:	bd10      	pop	{r4, pc}

08082eae <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8082eae:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082eb0:	f000 ff4a 	bl	8083d48 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8082eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8082eb8:	f7ff bee2 	b.w	8082c80 <_ZN7TwoWire6unlockEv>

08082ebc <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082ebc:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082ebe:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082ec0:	4604      	mov	r4, r0
{
    if (lock_) {
 8082ec2:	b10b      	cbz	r3, 8082ec8 <_ZN4PMICD1Ev+0xc>
        unlock();
 8082ec4:	f7ff fff3 	bl	8082eae <_ZN4PMIC6unlockEv>
    }
}
 8082ec8:	4620      	mov	r0, r4
 8082eca:	bd10      	pop	{r4, pc}

08082ecc <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082ecc:	b510      	push	{r4, lr}
 8082ece:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082ed0:	6800      	ldr	r0, [r0, #0]
 8082ed2:	f7ff ffec 	bl	8082eae <_ZN4PMIC6unlockEv>
 8082ed6:	4620      	mov	r0, r4
 8082ed8:	bd10      	pop	{r4, pc}

08082eda <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8082eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082edc:	ac02      	add	r4, sp, #8
 8082ede:	460d      	mov	r5, r1
 8082ee0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082ee4:	f7ff ffd4 	bl	8082e90 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082ee8:	f000 ff2e 	bl	8083d48 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082eec:	216b      	movs	r1, #107	; 0x6b
 8082eee:	f7ff feb3 	bl	8082c58 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082ef2:	f000 ff29 	bl	8083d48 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8082ef6:	6803      	ldr	r3, [r0, #0]
 8082ef8:	4629      	mov	r1, r5
 8082efa:	689b      	ldr	r3, [r3, #8]
 8082efc:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082efe:	f000 ff23 	bl	8083d48 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8082f02:	2101      	movs	r1, #1
 8082f04:	f7ff feab 	bl	8082c5e <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082f08:	f000 ff1e 	bl	8083d48 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8082f0c:	2301      	movs	r3, #1
 8082f0e:	461a      	mov	r2, r3
 8082f10:	216b      	movs	r1, #107	; 0x6b
 8082f12:	f7ff fe8b 	bl	8082c2c <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082f16:	f000 ff17 	bl	8083d48 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8082f1a:	6803      	ldr	r3, [r0, #0]
 8082f1c:	695b      	ldr	r3, [r3, #20]
 8082f1e:	4798      	blx	r3
 8082f20:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8082f22:	4620      	mov	r0, r4
 8082f24:	f7ff ffd2 	bl	8082ecc <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8082f28:	b2e8      	uxtb	r0, r5
 8082f2a:	b003      	add	sp, #12
 8082f2c:	bd30      	pop	{r4, r5, pc}

08082f2e <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8082f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082f30:	ac02      	add	r4, sp, #8
 8082f32:	4615      	mov	r5, r2
 8082f34:	460e      	mov	r6, r1
 8082f36:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082f3a:	f7ff ffa9 	bl	8082e90 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082f3e:	f000 ff03 	bl	8083d48 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082f42:	216b      	movs	r1, #107	; 0x6b
 8082f44:	f7ff fe88 	bl	8082c58 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082f48:	f000 fefe 	bl	8083d48 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8082f4c:	6803      	ldr	r3, [r0, #0]
 8082f4e:	4631      	mov	r1, r6
 8082f50:	689b      	ldr	r3, [r3, #8]
 8082f52:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082f54:	f000 fef8 	bl	8083d48 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8082f58:	6803      	ldr	r3, [r0, #0]
 8082f5a:	4629      	mov	r1, r5
 8082f5c:	689b      	ldr	r3, [r3, #8]
 8082f5e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082f60:	f000 fef2 	bl	8083d48 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8082f64:	2101      	movs	r1, #1
 8082f66:	f7ff fe7a 	bl	8082c5e <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8082f6a:	4620      	mov	r0, r4
 8082f6c:	f7ff ffae 	bl	8082ecc <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8082f70:	b002      	add	sp, #8
 8082f72:	bd70      	pop	{r4, r5, r6, pc}

08082f74 <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
 8082f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082f76:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082f78:	ac02      	add	r4, sp, #8
 8082f7a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082f7e:	f7ff ff87 	bl	8082e90 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8082f82:	2101      	movs	r1, #1
 8082f84:	4628      	mov	r0, r5
 8082f86:	f7ff ffa8 	bl	8082eda <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
 8082f8a:	2101      	movs	r1, #1
 8082f8c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
 8082f90:	4628      	mov	r0, r5
 8082f92:	f7ff ffcc 	bl	8082f2e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
 8082f96:	4620      	mov	r0, r4
 8082f98:	f7ff ff98 	bl	8082ecc <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
 8082f9c:	2001      	movs	r0, #1
 8082f9e:	b003      	add	sp, #12
 8082fa0:	bd30      	pop	{r4, r5, pc}

08082fa2 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 8082fa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082fa4:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082fa6:	ac02      	add	r4, sp, #8
 8082fa8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082fac:	f7ff ff70 	bl	8082e90 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8082fb0:	2101      	movs	r1, #1
 8082fb2:	4628      	mov	r0, r5
 8082fb4:	f7ff ff91 	bl	8082eda <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8082fb8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8082fbc:	f042 0210 	orr.w	r2, r2, #16
 8082fc0:	2101      	movs	r1, #1
 8082fc2:	4628      	mov	r0, r5
 8082fc4:	f7ff ffb3 	bl	8082f2e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8082fc8:	4620      	mov	r0, r4
 8082fca:	f7ff ff7f 	bl	8082ecc <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8082fce:	2001      	movs	r0, #1
 8082fd0:	b003      	add	sp, #12
 8082fd2:	bd30      	pop	{r4, r5, pc}

08082fd4 <_ZN4PMIC14enableChargingEv>:
 8082fd4:	f7ff bfe5 	b.w	8082fa2 <_ZN4PMIC10disableOTGEv>

08082fd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082fda:	4606      	mov	r6, r0
 8082fdc:	460d      	mov	r5, r1
 8082fde:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082fe0:	2400      	movs	r4, #0
  while (size--) {
 8082fe2:	42bd      	cmp	r5, r7
 8082fe4:	d00c      	beq.n	8083000 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082fe6:	6833      	ldr	r3, [r6, #0]
 8082fe8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082fec:	689b      	ldr	r3, [r3, #8]
 8082fee:	4630      	mov	r0, r6
 8082ff0:	4798      	blx	r3
     if (chunk>=0)
 8082ff2:	2800      	cmp	r0, #0
 8082ff4:	db01      	blt.n	8082ffa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082ff6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082ff8:	e7f3      	b.n	8082fe2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082ffa:	2c00      	cmp	r4, #0
 8082ffc:	bf08      	it	eq
 8082ffe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8083000:	4620      	mov	r0, r4
 8083002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083004 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8083004:	b570      	push	{r4, r5, r6, lr}
 8083006:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8083008:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808300a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 808300c:	b149      	cbz	r1, 8083022 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808300e:	f002 f93c 	bl	808528a <strlen>
 8083012:	682b      	ldr	r3, [r5, #0]
 8083014:	4602      	mov	r2, r0
 8083016:	4621      	mov	r1, r4
 8083018:	4628      	mov	r0, r5
    }
 808301a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808301e:	68db      	ldr	r3, [r3, #12]
 8083020:	4718      	bx	r3
    }
 8083022:	bd70      	pop	{r4, r5, r6, pc}

08083024 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8083024:	6803      	ldr	r3, [r0, #0]
 8083026:	689b      	ldr	r3, [r3, #8]
 8083028:	4718      	bx	r3

0808302a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808302a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808302c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808302e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8083030:	f7ff fff8 	bl	8083024 <_ZN5Print5printEc>
  n += print('\n');
 8083034:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8083036:	4604      	mov	r4, r0
  n += print('\n');
 8083038:	4628      	mov	r0, r5
 808303a:	f7ff fff3 	bl	8083024 <_ZN5Print5printEc>
  return n;
}
 808303e:	4420      	add	r0, r4
 8083040:	bd38      	pop	{r3, r4, r5, pc}

08083042 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8083042:	b538      	push	{r3, r4, r5, lr}
 8083044:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8083046:	f7ff ffdd 	bl	8083004 <_ZN5Print5writeEPKc>
 808304a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808304c:	4628      	mov	r0, r5
 808304e:	f7ff ffec 	bl	808302a <_ZN5Print7printlnEv>
  return n;
}
 8083052:	4420      	add	r0, r4
 8083054:	bd38      	pop	{r3, r4, r5, pc}

08083056 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8083056:	2a01      	cmp	r2, #1
 8083058:	bf98      	it	ls
 808305a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808305c:	b530      	push	{r4, r5, lr}
 808305e:	460b      	mov	r3, r1
 8083060:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8083062:	2100      	movs	r1, #0
 8083064:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8083068:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 808306c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 8083070:	fb05 3312 	mls	r3, r5, r2, r3
 8083074:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8083076:	2b09      	cmp	r3, #9
 8083078:	bf94      	ite	ls
 808307a:	3330      	addls	r3, #48	; 0x30
 808307c:	3337      	addhi	r3, #55	; 0x37
 808307e:	b2db      	uxtb	r3, r3
 8083080:	4621      	mov	r1, r4
 8083082:	f804 3901 	strb.w	r3, [r4], #-1
 8083086:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8083088:	2d00      	cmp	r5, #0
 808308a:	d1ef      	bne.n	808306c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808308c:	f7ff ffba 	bl	8083004 <_ZN5Print5writeEPKc>
}
 8083090:	b00b      	add	sp, #44	; 0x2c
 8083092:	bd30      	pop	{r4, r5, pc}

08083094 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8083094:	b510      	push	{r4, lr}
 8083096:	4604      	mov	r4, r0
 8083098:	f7fe fdd4 	bl	8081c44 <_ZNSt14_Function_baseD1Ev>
 808309c:	4620      	mov	r0, r4
 808309e:	bd10      	pop	{r4, pc}

080830a0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80830a0:	4803      	ldr	r0, [pc, #12]	; (80830b0 <_GLOBAL__sub_I_RGB+0x10>)
 80830a2:	2300      	movs	r3, #0
 80830a4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80830a6:	4a03      	ldr	r2, [pc, #12]	; (80830b4 <_GLOBAL__sub_I_RGB+0x14>)
 80830a8:	4903      	ldr	r1, [pc, #12]	; (80830b8 <_GLOBAL__sub_I_RGB+0x18>)
 80830aa:	f000 be8b 	b.w	8083dc4 <__aeabi_atexit>
 80830ae:	bf00      	nop
 80830b0:	200003c8 	.word	0x200003c8
 80830b4:	20000134 	.word	0x20000134
 80830b8:	08083095 	.word	0x08083095

080830bc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80830bc:	b570      	push	{r4, r5, r6, lr}
 80830be:	4604      	mov	r4, r0
 80830c0:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80830c2:	2500      	movs	r5, #0
 80830c4:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80830c8:	f7fe fdea 	bl	8081ca0 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80830cc:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80830ce:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80830d0:	f7fe feee 	bl	8081eb0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80830d4:	6065      	str	r5, [r4, #4]
}
 80830d6:	4620      	mov	r0, r4
 80830d8:	bd70      	pop	{r4, r5, r6, pc}

080830da <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80830da:	7800      	ldrb	r0, [r0, #0]
 80830dc:	f7fe bef0 	b.w	8081ec0 <HAL_SPI_Is_Enabled>

080830e0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80830e0:	b510      	push	{r4, lr}
 80830e2:	4604      	mov	r4, r0
{
	free(buffer);
 80830e4:	6800      	ldr	r0, [r0, #0]
 80830e6:	f7ff f89d 	bl	8082224 <free>
}
 80830ea:	4620      	mov	r0, r4
 80830ec:	bd10      	pop	{r4, pc}

080830ee <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80830ee:	b510      	push	{r4, lr}
 80830f0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80830f2:	6800      	ldr	r0, [r0, #0]
 80830f4:	b108      	cbz	r0, 80830fa <_ZN6String10invalidateEv+0xc>
 80830f6:	f7ff f895 	bl	8082224 <free>
	buffer = NULL;
 80830fa:	2300      	movs	r3, #0
 80830fc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80830fe:	60a3      	str	r3, [r4, #8]
 8083100:	6063      	str	r3, [r4, #4]
 8083102:	bd10      	pop	{r4, pc}

08083104 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8083104:	b538      	push	{r3, r4, r5, lr}
 8083106:	4604      	mov	r4, r0
 8083108:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808310a:	6800      	ldr	r0, [r0, #0]
 808310c:	3101      	adds	r1, #1
 808310e:	f7ff f891 	bl	8082234 <realloc>
	if (newbuffer) {
 8083112:	b110      	cbz	r0, 808311a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8083114:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8083118:	2001      	movs	r0, #1
	}
	return 0;
}
 808311a:	bd38      	pop	{r3, r4, r5, pc}

0808311c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808311c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808311e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083120:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8083122:	b113      	cbz	r3, 808312a <_ZN6String7reserveEj+0xe>
 8083124:	6843      	ldr	r3, [r0, #4]
 8083126:	428b      	cmp	r3, r1
 8083128:	d207      	bcs.n	808313a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808312a:	4620      	mov	r0, r4
 808312c:	f7ff ffea 	bl	8083104 <_ZN6String12changeBufferEj>
 8083130:	b120      	cbz	r0, 808313c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8083132:	68a3      	ldr	r3, [r4, #8]
 8083134:	b90b      	cbnz	r3, 808313a <_ZN6String7reserveEj+0x1e>
 8083136:	6822      	ldr	r2, [r4, #0]
 8083138:	7013      	strb	r3, [r2, #0]
 808313a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808313c:	bd10      	pop	{r4, pc}

0808313e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808313e:	b570      	push	{r4, r5, r6, lr}
 8083140:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083142:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083144:	4604      	mov	r4, r0
 8083146:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8083148:	f7ff ffe8 	bl	808311c <_ZN6String7reserveEj>
 808314c:	b918      	cbnz	r0, 8083156 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808314e:	4620      	mov	r0, r4
 8083150:	f7ff ffcd 	bl	80830ee <_ZN6String10invalidateEv>
		return *this;
 8083154:	e009      	b.n	808316a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8083156:	462a      	mov	r2, r5
 8083158:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808315a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808315c:	6820      	ldr	r0, [r4, #0]
 808315e:	f002 f81b 	bl	8085198 <memcpy>
	buffer[len] = 0;
 8083162:	6822      	ldr	r2, [r4, #0]
 8083164:	68a3      	ldr	r3, [r4, #8]
 8083166:	2100      	movs	r1, #0
 8083168:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808316a:	4620      	mov	r0, r4
 808316c:	bd70      	pop	{r4, r5, r6, pc}

0808316e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808316e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083170:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083172:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083174:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083176:	6043      	str	r3, [r0, #4]
	len = 0;
 8083178:	6083      	str	r3, [r0, #8]
	flags = 0;
 808317a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808317c:	460d      	mov	r5, r1
 808317e:	b139      	cbz	r1, 8083190 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8083180:	4608      	mov	r0, r1
 8083182:	f002 f882 	bl	808528a <strlen>
 8083186:	4629      	mov	r1, r5
 8083188:	4602      	mov	r2, r0
 808318a:	4620      	mov	r0, r4
 808318c:	f7ff ffd7 	bl	808313e <_ZN6String4copyEPKcj>
}
 8083190:	4620      	mov	r0, r4
 8083192:	bd38      	pop	{r3, r4, r5, pc}

08083194 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8083194:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8083196:	b510      	push	{r4, lr}
 8083198:	460b      	mov	r3, r1
 808319a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808319c:	d007      	beq.n	80831ae <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808319e:	6809      	ldr	r1, [r1, #0]
 80831a0:	b119      	cbz	r1, 80831aa <_ZN6StringaSERKS_+0x16>
 80831a2:	689a      	ldr	r2, [r3, #8]
 80831a4:	f7ff ffcb 	bl	808313e <_ZN6String4copyEPKcj>
 80831a8:	e001      	b.n	80831ae <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80831aa:	f7ff ffa0 	bl	80830ee <_ZN6String10invalidateEv>

	return *this;
}
 80831ae:	4620      	mov	r0, r4
 80831b0:	bd10      	pop	{r4, pc}

080831b2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80831b2:	b510      	push	{r4, lr}
 80831b4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80831b6:	2300      	movs	r3, #0
 80831b8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80831ba:	6043      	str	r3, [r0, #4]
	len = 0;
 80831bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80831be:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80831c0:	f7ff ffe8 	bl	8083194 <_ZN6StringaSERKS_>
}
 80831c4:	4620      	mov	r0, r4
 80831c6:	bd10      	pop	{r4, pc}

080831c8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80831c8:	b538      	push	{r3, r4, r5, lr}
 80831ca:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80831cc:	460c      	mov	r4, r1
 80831ce:	b141      	cbz	r1, 80831e2 <_ZN6StringaSEPKc+0x1a>
 80831d0:	4608      	mov	r0, r1
 80831d2:	f002 f85a 	bl	808528a <strlen>
 80831d6:	4621      	mov	r1, r4
 80831d8:	4602      	mov	r2, r0
 80831da:	4628      	mov	r0, r5
 80831dc:	f7ff ffaf 	bl	808313e <_ZN6String4copyEPKcj>
 80831e0:	e001      	b.n	80831e6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80831e2:	f7ff ff84 	bl	80830ee <_ZN6String10invalidateEv>

	return *this;
}
 80831e6:	4628      	mov	r0, r5
 80831e8:	bd38      	pop	{r3, r4, r5, pc}

080831ea <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80831ea:	b510      	push	{r4, lr}
 80831ec:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80831ee:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80831f0:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80831f2:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80831f4:	6063      	str	r3, [r4, #4]
	len = 0;
 80831f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80831f8:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80831fa:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80831fc:	a901      	add	r1, sp, #4
 80831fe:	f000 fbe6 	bl	80839ce <itoa>
	*this = buf;
 8083202:	a901      	add	r1, sp, #4
 8083204:	4620      	mov	r0, r4
 8083206:	f7ff ffdf 	bl	80831c8 <_ZN6StringaSEPKc>
}
 808320a:	4620      	mov	r0, r4
 808320c:	b00a      	add	sp, #40	; 0x28
 808320e:	bd10      	pop	{r4, pc}

08083210 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083210:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083212:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083214:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8083216:	b912      	cbnz	r2, 808321e <_ZNK6String6equalsEPKc+0xe>
 8083218:	b919      	cbnz	r1, 8083222 <_ZNK6String6equalsEPKc+0x12>
 808321a:	2001      	movs	r0, #1
 808321c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808321e:	b911      	cbnz	r1, 8083226 <_ZNK6String6equalsEPKc+0x16>
 8083220:	6803      	ldr	r3, [r0, #0]
 8083222:	7818      	ldrb	r0, [r3, #0]
 8083224:	e002      	b.n	808322c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8083226:	6800      	ldr	r0, [r0, #0]
 8083228:	f002 f801 	bl	808522e <strcmp>
 808322c:	fab0 f080 	clz	r0, r0
 8083230:	0940      	lsrs	r0, r0, #5
}
 8083232:	bd08      	pop	{r3, pc}

08083234 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8083234:	b510      	push	{r4, lr}
 8083236:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8083238:	6800      	ldr	r0, [r0, #0]
 808323a:	b118      	cbz	r0, 8083244 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 808323c:	f7fe fff2 	bl	8082224 <free>
            wakeupSource_ = nullptr;
 8083240:	2300      	movs	r3, #0
 8083242:	6023      	str	r3, [r4, #0]
 8083244:	bd10      	pop	{r4, pc}

08083246 <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083246:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8083248:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808324c:	460d      	mov	r5, r1
        error_ = result.error_;
 808324e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8083250:	460b      	mov	r3, r1
 8083252:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8083256:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083258:	f8c0 2006 	str.w	r2, [r0, #6]
 808325c:	889b      	ldrh	r3, [r3, #4]
 808325e:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8083260:	f7ff ffe8 	bl	8083234 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 8083264:	682b      	ldr	r3, [r5, #0]
 8083266:	b113      	cbz	r3, 808326e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8083268:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808326a:	2300      	movs	r3, #0
 808326c:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 808326e:	4620      	mov	r0, r4
 8083270:	bd38      	pop	{r3, r4, r5, pc}

08083272 <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 8083272:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 8083276:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 8083278:	b90b      	cbnz	r3, 808327e <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 808327a:	680a      	ldr	r2, [r1, #0]
 808327c:	b19a      	cbz	r2, 80832a6 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 808327e:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 8083280:	b15c      	cbz	r4, 808329a <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 8083282:	88a2      	ldrh	r2, [r4, #4]
 8083284:	2a01      	cmp	r2, #1
 8083286:	d003      	beq.n	8083290 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8083288:	2a04      	cmp	r2, #4
 808328a:	d106      	bne.n	808329a <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 808328c:	2202      	movs	r2, #2
 808328e:	e005      	b.n	808329c <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8083290:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8083292:	718a      	strb	r2, [r1, #6]
 8083294:	810b      	strh	r3, [r1, #8]
 8083296:	814c      	strh	r4, [r1, #10]
                    break;
 8083298:	e005      	b.n	80832a6 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808329a:	2204      	movs	r2, #4
 808329c:	810b      	strh	r3, [r1, #8]
 808329e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80832a2:	718a      	strb	r2, [r1, #6]
 80832a4:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 80832a6:	f851 3f06 	ldr.w	r3, [r1, #6]!
 80832aa:	6003      	str	r3, [r0, #0]
 80832ac:	888b      	ldrh	r3, [r1, #4]
 80832ae:	8083      	strh	r3, [r0, #4]
    }
 80832b0:	bd10      	pop	{r4, pc}
	...

080832b4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 80832b4:	b538      	push	{r3, r4, r5, lr}
 80832b6:	460c      	mov	r4, r1
 80832b8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 80832ba:	f7ff ffbb 	bl	8083234 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
 80832be:	b144      	cbz	r4, 80832d2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 80832c0:	8820      	ldrh	r0, [r4, #0]
 80832c2:	f7fe ffa7 	bl	8082214 <malloc>
 80832c6:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 80832c8:	b128      	cbz	r0, 80832d6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 80832ca:	8822      	ldrh	r2, [r4, #0]
 80832cc:	4621      	mov	r1, r4
 80832ce:	f001 ff63 	bl	8085198 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 80832d2:	2000      	movs	r0, #0
 80832d4:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
 80832d6:	4801      	ldr	r0, [pc, #4]	; (80832dc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
 80832d8:	bd38      	pop	{r3, r4, r5, pc}
 80832da:	bf00      	nop
 80832dc:	fffffefc 	.word	0xfffffefc

080832e0 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80832e0:	4601      	mov	r1, r0
 80832e2:	2200      	movs	r2, #0
 80832e4:	208c      	movs	r0, #140	; 0x8c
 80832e6:	f7fe bcf3 	b.w	8081cd0 <HAL_Core_System_Reset_Ex>

080832ea <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80832ea:	2000      	movs	r0, #0
 80832ec:	f7ff bff8 	b.w	80832e0 <_ZN11SystemClass5resetEm>

080832f0 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
 80832f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80832f2:	4d30      	ldr	r5, [pc, #192]	; (80833b4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 80832f4:	7d0b      	ldrb	r3, [r1, #20]
 80832f6:	4604      	mov	r4, r0
 80832f8:	b08b      	sub	sp, #44	; 0x2c
 80832fa:	4608      	mov	r0, r1
 80832fc:	1daf      	adds	r7, r5, #6
 80832fe:	b313      	cbz	r3, 8083346 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
 8083300:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 8083302:	791b      	ldrb	r3, [r3, #4]
 8083304:	b1fb      	cbz	r3, 8083346 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083306:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808330a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 808330c:	a902      	add	r1, sp, #8
 808330e:	3004      	adds	r0, #4
 8083310:	9202      	str	r2, [sp, #8]
 8083312:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083316:	f88d 200e 	strb.w	r2, [sp, #14]
 808331a:	f8ad 2010 	strh.w	r2, [sp, #16]
 808331e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8083322:	f7fe fecd 	bl	80820c0 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 8083326:	ab0a      	add	r3, sp, #40	; 0x28
 8083328:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
        result.setError(static_cast<system_error_t>(ret));
 808332c:	b200      	sxth	r0, r0
 808332e:	889b      	ldrh	r3, [r3, #4]
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
 8083330:	f8ad 000c 	strh.w	r0, [sp, #12]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
 8083334:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
 8083336:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
 808333a:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 808333c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 808333e:	4628      	mov	r0, r5
 8083340:	f7ff ffb8 	bl	80832b4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
 8083344:	e01c      	b.n	8083380 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
 8083346:	2320      	movs	r3, #32
 8083348:	9302      	str	r3, [sp, #8]
 808334a:	4b1b      	ldr	r3, [pc, #108]	; (80833b8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
 808334c:	2600      	movs	r6, #0
 808334e:	9300      	str	r3, [sp, #0]
 8083350:	491a      	ldr	r1, [pc, #104]	; (80833bc <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
 8083352:	4633      	mov	r3, r6
 8083354:	2032      	movs	r0, #50	; 0x32
 8083356:	aa02      	add	r2, sp, #8
 8083358:	9603      	str	r6, [sp, #12]
 808335a:	f7fe fe39 	bl	8081fd0 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808335e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083362:	f8ad 3012 	strh.w	r3, [sp, #18]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
 8083366:	f64f 63f2 	movw	r3, #65266	; 0xfef2
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 808336a:	a902      	add	r1, sp, #8
 808336c:	4811      	ldr	r0, [pc, #68]	; (80833b4 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808336e:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083370:	f88d 600e 	strb.w	r6, [sp, #14]
 8083374:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
 8083378:	f8ad 300c 	strh.w	r3, [sp, #12]
 808337c:	f7ff ff63 	bl	8083246 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 8083380:	a802      	add	r0, sp, #8
 8083382:	f7ff ff57 	bl	8083234 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083386:	2300      	movs	r3, #0
 8083388:	6023      	str	r3, [r4, #0]
 808338a:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808338c:	71a3      	strb	r3, [r4, #6]
 808338e:	8123      	strh	r3, [r4, #8]
 8083390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8083394:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
 8083396:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
 808339a:	6829      	ldr	r1, [r5, #0]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
 808339c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 808339e:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 80833a0:	4620      	mov	r0, r4

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 80833a2:	f8c4 3006 	str.w	r3, [r4, #6]
 80833a6:	88bb      	ldrh	r3, [r7, #4]
 80833a8:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 80833aa:	f7ff ff83 	bl	80832b4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 80833ae:	4620      	mov	r0, r4
 80833b0:	b00b      	add	sp, #44	; 0x2c
 80833b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80833b4:	200003d8 	.word	0x200003d8
 80833b8:	08086343 	.word	0x08086343
 80833bc:	0808633c 	.word	0x0808633c

080833c0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80833c0:	b530      	push	{r4, r5, lr}
 80833c2:	4604      	mov	r4, r0
 80833c4:	b085      	sub	sp, #20
 80833c6:	4608      	mov	r0, r1
 80833c8:	4611      	mov	r1, r2
 80833ca:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80833cc:	2300      	movs	r3, #0
 80833ce:	f7fe fe31 	bl	8082034 <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 80833d2:	2300      	movs	r3, #0
 80833d4:	9301      	str	r3, [sp, #4]
 80833d6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80833da:	f88d 300a 	strb.w	r3, [sp, #10]
 80833de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 80833e2:	4d09      	ldr	r5, [pc, #36]	; (8083408 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 80833e4:	a901      	add	r1, sp, #4
 80833e6:	f8ad 000c 	strh.w	r0, [sp, #12]
 80833ea:	4628      	mov	r0, r5
 80833ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80833f0:	f7ff ff29 	bl	8083246 <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80833f4:	a801      	add	r0, sp, #4
 80833f6:	f7ff ff1d 	bl	8083234 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 80833fa:	4620      	mov	r0, r4
 80833fc:	4629      	mov	r1, r5
 80833fe:	f7ff ff38 	bl	8083272 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8083402:	4620      	mov	r0, r4
 8083404:	b005      	add	sp, #20
 8083406:	bd30      	pop	{r4, r5, pc}
 8083408:	200003d8 	.word	0x200003d8

0808340c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808340c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083410:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083412:	4c08      	ldr	r4, [pc, #32]	; (8083434 <_GLOBAL__sub_I_System+0x28>)
 8083414:	2000      	movs	r0, #0
 8083416:	6020      	str	r0, [r4, #0]
 8083418:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808341a:	71a0      	strb	r0, [r4, #6]
 808341c:	8120      	strh	r0, [r4, #8]
 808341e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083420:	f7fe fdf8 	bl	8082014 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 8083424:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 808342a:	4a03      	ldr	r2, [pc, #12]	; (8083438 <_GLOBAL__sub_I_System+0x2c>)
 808342c:	4903      	ldr	r1, [pc, #12]	; (808343c <_GLOBAL__sub_I_System+0x30>)
 808342e:	f000 bcc9 	b.w	8083dc4 <__aeabi_atexit>
 8083432:	bf00      	nop
 8083434:	200003d8 	.word	0x200003d8
 8083438:	20000134 	.word	0x20000134
 808343c:	080801f7 	.word	0x080801f7

08083440 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083440:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8083442:	4b14      	ldr	r3, [pc, #80]	; (8083494 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083444:	4f14      	ldr	r7, [pc, #80]	; (8083498 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8083446:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8083448:	4b14      	ldr	r3, [pc, #80]	; (808349c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808344a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808344c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808344e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8083450:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8083452:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8083454:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8083456:	d01b      	beq.n	8083490 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8083458:	a80a      	add	r0, sp, #40	; 0x28
 808345a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808345e:	f001 fda3 	bl	8084fa8 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083462:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083464:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8083466:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8083468:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808346c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808346e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8083476:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808347a:	4c09      	ldr	r4, [pc, #36]	; (80834a0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808347c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083480:	ad01      	add	r5, sp, #4
 8083482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8083486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808348a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808348c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8083490:	b00b      	add	sp, #44	; 0x2c
 8083492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083494:	20000414 	.word	0x20000414
 8083498:	20000410 	.word	0x20000410
 808349c:	2000040c 	.word	0x2000040c
 80834a0:	200003e4 	.word	0x200003e4

080834a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80834a4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80834a6:	2000      	movs	r0, #0
 80834a8:	f7fe fe54 	bl	8082154 <spark_sync_time_pending>
 80834ac:	b128      	cbz	r0, 80834ba <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80834ae:	f7fe fe39 	bl	8082124 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80834b2:	f080 0001 	eor.w	r0, r0, #1
 80834b6:	b2c0      	uxtb	r0, r0
 80834b8:	bd08      	pop	{r3, pc}
 80834ba:	2001      	movs	r0, #1
    }
 80834bc:	bd08      	pop	{r3, pc}
	...

080834c0 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 80834c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80834c2:	f7ff ffbd 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
 80834c6:	4b01      	ldr	r3, [pc, #4]	; (80834cc <_ZN9TimeClass4hourEl+0xc>)
 80834c8:	6898      	ldr	r0, [r3, #8]
 80834ca:	bd08      	pop	{r3, pc}
 80834cc:	200003e4 	.word	0x200003e4

080834d0 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 80834d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80834d2:	f7ff ffb5 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
 80834d6:	4b01      	ldr	r3, [pc, #4]	; (80834dc <_ZN9TimeClass3dayEl+0xc>)
 80834d8:	68d8      	ldr	r0, [r3, #12]
 80834da:	bd08      	pop	{r3, pc}
 80834dc:	200003e4 	.word	0x200003e4

080834e0 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80834e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80834e2:	f7ff ffad 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 80834e6:	4b02      	ldr	r3, [pc, #8]	; (80834f0 <_ZN9TimeClass7weekdayEl+0x10>)
 80834e8:	6998      	ldr	r0, [r3, #24]
}
 80834ea:	3001      	adds	r0, #1
 80834ec:	bd08      	pop	{r3, pc}
 80834ee:	bf00      	nop
 80834f0:	200003e4 	.word	0x200003e4

080834f4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80834f4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80834f6:	f7ff ffa3 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80834fa:	4b02      	ldr	r3, [pc, #8]	; (8083504 <_ZN9TimeClass5monthEl+0x10>)
 80834fc:	6918      	ldr	r0, [r3, #16]
}
 80834fe:	3001      	adds	r0, #1
 8083500:	bd08      	pop	{r3, pc}
 8083502:	bf00      	nop
 8083504:	200003e4 	.word	0x200003e4

08083508 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
 8083508:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
 808350a:	f7fe fc09 	bl	8081d20 <HAL_RTC_Get_UnixTime>
 808350e:	4b03      	ldr	r3, [pc, #12]	; (808351c <_ZN9TimeClass5localEv+0x14>)
 8083510:	681b      	ldr	r3, [r3, #0]
 8083512:	4418      	add	r0, r3
 8083514:	4b02      	ldr	r3, [pc, #8]	; (8083520 <_ZN9TimeClass5localEv+0x18>)
 8083516:	681b      	ldr	r3, [r3, #0]
}
 8083518:	4418      	add	r0, r3
 808351a:	bd08      	pop	{r3, pc}
 808351c:	20000414 	.word	0x20000414
 8083520:	2000040c 	.word	0x2000040c

08083524 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083524:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083526:	4909      	ldr	r1, [pc, #36]	; (808354c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083528:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808352a:	f001 fca5 	bl	8084e78 <__aeabi_fcmplt>
 808352e:	b960      	cbnz	r0, 808354a <_ZN9TimeClass4zoneEf+0x26>
 8083530:	4907      	ldr	r1, [pc, #28]	; (8083550 <_ZN9TimeClass4zoneEf+0x2c>)
 8083532:	4620      	mov	r0, r4
 8083534:	f001 fcbe 	bl	8084eb4 <__aeabi_fcmpgt>
 8083538:	b938      	cbnz	r0, 808354a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808353a:	4906      	ldr	r1, [pc, #24]	; (8083554 <_ZN9TimeClass4zoneEf+0x30>)
 808353c:	4620      	mov	r0, r4
 808353e:	f001 fafd 	bl	8084b3c <__aeabi_fmul>
 8083542:	f001 fcc1 	bl	8084ec8 <__aeabi_f2iz>
 8083546:	4b04      	ldr	r3, [pc, #16]	; (8083558 <_ZN9TimeClass4zoneEf+0x34>)
 8083548:	6018      	str	r0, [r3, #0]
 808354a:	bd10      	pop	{r4, pc}
 808354c:	c1400000 	.word	0xc1400000
 8083550:	41600000 	.word	0x41600000
 8083554:	45610000 	.word	0x45610000
 8083558:	20000414 	.word	0x20000414

0808355c <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 808355c:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 808355e:	2100      	movs	r1, #0
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 8083560:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 8083562:	f001 fc89 	bl	8084e78 <__aeabi_fcmplt>
 8083566:	b968      	cbnz	r0, 8083584 <_ZN9TimeClass12setDSTOffsetEf+0x28>
 8083568:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 808356c:	4620      	mov	r0, r4
 808356e:	f001 fca1 	bl	8084eb4 <__aeabi_fcmpgt>
 8083572:	b938      	cbnz	r0, 8083584 <_ZN9TimeClass12setDSTOffsetEf+0x28>
    {
        return;
    }
    dst_cache = offset * 3600;
 8083574:	4904      	ldr	r1, [pc, #16]	; (8083588 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 8083576:	4620      	mov	r0, r4
 8083578:	f001 fae0 	bl	8084b3c <__aeabi_fmul>
 808357c:	f001 fca4 	bl	8084ec8 <__aeabi_f2iz>
 8083580:	4b02      	ldr	r3, [pc, #8]	; (808358c <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 8083582:	6018      	str	r0, [r3, #0]
 8083584:	bd10      	pop	{r4, pc}
 8083586:	bf00      	nop
 8083588:	45610000 	.word	0x45610000
 808358c:	20000078 	.word	0x20000078

08083590 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 8083590:	4b02      	ldr	r3, [pc, #8]	; (808359c <_ZN9TimeClass8beginDSTEv+0xc>)
 8083592:	681a      	ldr	r2, [r3, #0]
 8083594:	4b02      	ldr	r3, [pc, #8]	; (80835a0 <_ZN9TimeClass8beginDSTEv+0x10>)
 8083596:	601a      	str	r2, [r3, #0]
 8083598:	4770      	bx	lr
 808359a:	bf00      	nop
 808359c:	20000078 	.word	0x20000078
 80835a0:	2000040c 	.word	0x2000040c

080835a4 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
 80835a4:	4b01      	ldr	r3, [pc, #4]	; (80835ac <_ZN9TimeClass6endDSTEv+0x8>)
 80835a6:	2200      	movs	r2, #0
 80835a8:	601a      	str	r2, [r3, #0]
 80835aa:	4770      	bx	lr
 80835ac:	2000040c 	.word	0x2000040c

080835b0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80835b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80835b2:	4b0e      	ldr	r3, [pc, #56]	; (80835ec <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80835b4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80835b6:	681b      	ldr	r3, [r3, #0]
 80835b8:	a802      	add	r0, sp, #8
 80835ba:	4419      	add	r1, r3
 80835bc:	4b0c      	ldr	r3, [pc, #48]	; (80835f0 <_ZN9TimeClass7timeStrEl+0x40>)
 80835be:	681b      	ldr	r3, [r3, #0]
 80835c0:	4419      	add	r1, r3
 80835c2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80835c6:	f001 fcef 	bl	8084fa8 <localtime>
        char* ascstr = asctime(calendar_time);
 80835ca:	f001 fca3 	bl	8084f14 <asctime>
 80835ce:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80835d0:	f001 fe5b 	bl	808528a <strlen>
        ascstr[len-1] = 0; // remove final newline
 80835d4:	2300      	movs	r3, #0
 80835d6:	4428      	add	r0, r5
 80835d8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80835dc:	4629      	mov	r1, r5
 80835de:	4620      	mov	r0, r4
 80835e0:	f7ff fdc5 	bl	808316e <_ZN6StringC1EPK19__FlashStringHelper>
}
 80835e4:	4620      	mov	r0, r4
 80835e6:	b003      	add	sp, #12
 80835e8:	bd30      	pop	{r4, r5, pc}
 80835ea:	bf00      	nop
 80835ec:	20000414 	.word	0x20000414
 80835f0:	2000040c 	.word	0x2000040c

080835f4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80835f4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80835f6:	2000      	movs	r0, #0
 80835f8:	f7fe fb9a 	bl	8081d30 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80835fc:	4604      	mov	r4, r0
 80835fe:	b968      	cbnz	r0, 808361c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083600:	f7fe fd00 	bl	8082004 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8083604:	2801      	cmp	r0, #1
 8083606:	d10b      	bne.n	8083620 <_ZN9TimeClass7isValidEv+0x2c>
 8083608:	4620      	mov	r0, r4
 808360a:	f7fe fd33 	bl	8082074 <system_thread_get_state>
 808360e:	b938      	cbnz	r0, 8083620 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8083610:	f7ff ff48 	bl	80834a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083614:	b930      	cbnz	r0, 8083624 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8083616:	f7fe fd6d 	bl	80820f4 <spark_process>
 808361a:	e7f9      	b.n	8083610 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808361c:	2001      	movs	r0, #1
 808361e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8083620:	2000      	movs	r0, #0
 8083622:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8083624:	f7ff ff3e 	bl	80834a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8083628:	2000      	movs	r0, #0
 808362a:	f7fe fb81 	bl	8081d30 <HAL_RTC_Time_Is_Valid>
 808362e:	3000      	adds	r0, #0
 8083630:	bf18      	it	ne
 8083632:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8083634:	bd10      	pop	{r4, pc}

08083636 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8083636:	b508      	push	{r3, lr}
    (void)isValid();
 8083638:	f7ff ffdc 	bl	80835f4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808363c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8083640:	f7fe bb6e 	b.w	8081d20 <HAL_RTC_Get_UnixTime>

08083644 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8083644:	b508      	push	{r3, lr}
	return hour(now());
 8083646:	f7ff fff6 	bl	8083636 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808364a:	f7ff fef9 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808364e:	4b01      	ldr	r3, [pc, #4]	; (8083654 <_ZN9TimeClass4hourEv+0x10>)
 8083650:	6898      	ldr	r0, [r3, #8]
 8083652:	bd08      	pop	{r3, pc}
 8083654:	200003e4 	.word	0x200003e4

08083658 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8083658:	b508      	push	{r3, lr}
	return minute(now());
 808365a:	f7ff ffec 	bl	8083636 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808365e:	f7ff feef 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8083662:	4b01      	ldr	r3, [pc, #4]	; (8083668 <_ZN9TimeClass6minuteEv+0x10>)
 8083664:	6858      	ldr	r0, [r3, #4]
 8083666:	bd08      	pop	{r3, pc}
 8083668:	200003e4 	.word	0x200003e4

0808366c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 808366c:	b508      	push	{r3, lr}
	return day(now());
 808366e:	f7ff ffe2 	bl	8083636 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083672:	f7ff fee5 	bl	8083440 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8083676:	4b01      	ldr	r3, [pc, #4]	; (808367c <_ZN9TimeClass3dayEv+0x10>)
 8083678:	68d8      	ldr	r0, [r3, #12]
 808367a:	bd08      	pop	{r3, pc}
 808367c:	200003e4 	.word	0x200003e4

08083680 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
 8083680:	b508      	push	{r3, lr}
	return weekday(now());
 8083682:	f7ff ffd8 	bl	8083636 <_ZN9TimeClass3nowEv>
}
 8083686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
 808368a:	f7ff bf29 	b.w	80834e0 <_ZN9TimeClass7weekdayEl>

0808368e <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808368e:	b508      	push	{r3, lr}
	return month(now());
 8083690:	f7ff ffd1 	bl	8083636 <_ZN9TimeClass3nowEv>
}
 8083694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8083698:	f7ff bf2c 	b.w	80834f4 <_ZN9TimeClass5monthEl>

0808369c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808369c:	4b02      	ldr	r3, [pc, #8]	; (80836a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808369e:	681a      	ldr	r2, [r3, #0]
 80836a0:	4b02      	ldr	r3, [pc, #8]	; (80836ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80836a2:	601a      	str	r2, [r3, #0]
 80836a4:	4770      	bx	lr
 80836a6:	bf00      	nop
 80836a8:	2000007c 	.word	0x2000007c
 80836ac:	20000408 	.word	0x20000408

080836b0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80836b0:	4770      	bx	lr

080836b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80836b2:	7441      	strb	r1, [r0, #17]
 80836b4:	4770      	bx	lr

080836b6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80836b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80836b8:	7c00      	ldrb	r0, [r0, #16]
 80836ba:	f7fe fc41 	bl	8081f40 <HAL_USART_Available_Data_For_Write>
}
 80836be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80836c2:	bd08      	pop	{r3, pc}

080836c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80836c4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80836c6:	7c00      	ldrb	r0, [r0, #16]
 80836c8:	f7fe fc12 	bl	8081ef0 <HAL_USART_Available_Data>
}
 80836cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80836d0:	bd08      	pop	{r3, pc}

080836d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80836d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80836d4:	7c00      	ldrb	r0, [r0, #16]
 80836d6:	f7fe fc1b 	bl	8081f10 <HAL_USART_Peek_Data>
}
 80836da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80836de:	bf28      	it	cs
 80836e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80836e4:	bd08      	pop	{r3, pc}

080836e6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80836e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80836e8:	7c00      	ldrb	r0, [r0, #16]
 80836ea:	f7fe fc09 	bl	8081f00 <HAL_USART_Read_Data>
}
 80836ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80836f2:	bf28      	it	cs
 80836f4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80836f8:	bd08      	pop	{r3, pc}

080836fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80836fa:	7c00      	ldrb	r0, [r0, #16]
 80836fc:	f7fe bc10 	b.w	8081f20 <HAL_USART_Flush_Data>

08083700 <_ZN11USARTSerialD0Ev>:
 8083700:	b510      	push	{r4, lr}
 8083702:	4604      	mov	r4, r0
 8083704:	2114      	movs	r1, #20
 8083706:	f000 fb62 	bl	8083dce <_ZdlPvj>
 808370a:	4620      	mov	r0, r4
 808370c:	bd10      	pop	{r4, pc}

0808370e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808370e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083710:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8083712:	4604      	mov	r4, r0
 8083714:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083716:	b925      	cbnz	r5, 8083722 <_ZN11USARTSerial5writeEh+0x14>
 8083718:	7c00      	ldrb	r0, [r0, #16]
 808371a:	f7fe fc11 	bl	8081f40 <HAL_USART_Available_Data_For_Write>
 808371e:	2800      	cmp	r0, #0
 8083720:	dd05      	ble.n	808372e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083722:	4631      	mov	r1, r6
 8083724:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8083726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808372a:	f7fe bbd9 	b.w	8081ee0 <HAL_USART_Write_Data>
  }
  return 0;
}
 808372e:	4628      	mov	r0, r5
 8083730:	bd70      	pop	{r4, r5, r6, pc}
	...

08083734 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083734:	b510      	push	{r4, lr}
 8083736:	4604      	mov	r4, r0
 8083738:	4608      	mov	r0, r1
 808373a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808373c:	2200      	movs	r2, #0
 808373e:	6062      	str	r2, [r4, #4]
 8083740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083744:	60a2      	str	r2, [r4, #8]
 8083746:	4a05      	ldr	r2, [pc, #20]	; (808375c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8083748:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808374a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808374c:	2201      	movs	r2, #1
 808374e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083750:	461a      	mov	r2, r3
 8083752:	f7fe fbbd 	bl	8081ed0 <HAL_USART_Init>
}
 8083756:	4620      	mov	r0, r4
 8083758:	bd10      	pop	{r4, pc}
 808375a:	bf00      	nop
 808375c:	0808639c 	.word	0x0808639c

08083760 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8083760:	2300      	movs	r3, #0
 8083762:	7c00      	ldrb	r0, [r0, #16]
 8083764:	f7fe bbf4 	b.w	8081f50 <HAL_USART_BeginConfig>

08083768 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8083768:	2200      	movs	r2, #0
 808376a:	f7ff bff9 	b.w	8083760 <_ZN11USARTSerial5beginEmm>

0808376e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808376e:	7c00      	ldrb	r0, [r0, #16]
 8083770:	f7fe bbde 	b.w	8081f30 <HAL_USART_Is_Enabled>

08083774 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083774:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083776:	4d0c      	ldr	r5, [pc, #48]	; (80837a8 <_Z22__fetch_global_Serial1v+0x34>)
 8083778:	6829      	ldr	r1, [r5, #0]
 808377a:	f011 0401 	ands.w	r4, r1, #1
 808377e:	d111      	bne.n	80837a4 <_Z22__fetch_global_Serial1v+0x30>
 8083780:	4628      	mov	r0, r5
 8083782:	f7fc fc90 	bl	80800a6 <__cxa_guard_acquire>
 8083786:	b168      	cbz	r0, 80837a4 <_Z22__fetch_global_Serial1v+0x30>
 8083788:	4a08      	ldr	r2, [pc, #32]	; (80837ac <_Z22__fetch_global_Serial1v+0x38>)
 808378a:	4621      	mov	r1, r4
 808378c:	4b08      	ldr	r3, [pc, #32]	; (80837b0 <_Z22__fetch_global_Serial1v+0x3c>)
 808378e:	4809      	ldr	r0, [pc, #36]	; (80837b4 <_Z22__fetch_global_Serial1v+0x40>)
 8083790:	f7ff ffd0 	bl	8083734 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8083794:	4628      	mov	r0, r5
 8083796:	f7fc fc8b 	bl	80800b0 <__cxa_guard_release>
 808379a:	4a07      	ldr	r2, [pc, #28]	; (80837b8 <_Z22__fetch_global_Serial1v+0x44>)
 808379c:	4907      	ldr	r1, [pc, #28]	; (80837bc <_Z22__fetch_global_Serial1v+0x48>)
 808379e:	4805      	ldr	r0, [pc, #20]	; (80837b4 <_Z22__fetch_global_Serial1v+0x40>)
 80837a0:	f000 fb10 	bl	8083dc4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80837a4:	4803      	ldr	r0, [pc, #12]	; (80837b4 <_Z22__fetch_global_Serial1v+0x40>)
 80837a6:	bd38      	pop	{r3, r4, r5, pc}
 80837a8:	200004b0 	.word	0x200004b0
 80837ac:	200004b4 	.word	0x200004b4
 80837b0:	2000042c 	.word	0x2000042c
 80837b4:	20000418 	.word	0x20000418
 80837b8:	20000134 	.word	0x20000134
 80837bc:	080836b1 	.word	0x080836b1

080837c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80837c0:	7441      	strb	r1, [r0, #17]
 80837c2:	4770      	bx	lr

080837c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80837c4:	4770      	bx	lr

080837c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80837c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80837c8:	2100      	movs	r1, #0
 80837ca:	7c00      	ldrb	r0, [r0, #16]
 80837cc:	f7fe fbe0 	bl	8081f90 <HAL_USB_USART_Receive_Data>
}
 80837d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80837d4:	bf28      	it	cs
 80837d6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80837da:	bd08      	pop	{r3, pc}

080837dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80837dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80837de:	2101      	movs	r1, #1
 80837e0:	7c00      	ldrb	r0, [r0, #16]
 80837e2:	f7fe fbd5 	bl	8081f90 <HAL_USB_USART_Receive_Data>
}
 80837e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80837ea:	bf28      	it	cs
 80837ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80837f0:	bd08      	pop	{r3, pc}

080837f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80837f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80837f4:	7c00      	ldrb	r0, [r0, #16]
 80837f6:	f7fe fbc3 	bl	8081f80 <HAL_USB_USART_Available_Data_For_Write>
}
 80837fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80837fe:	bd08      	pop	{r3, pc}

08083800 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8083800:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8083802:	7c00      	ldrb	r0, [r0, #16]
 8083804:	f7fe fbb4 	bl	8081f70 <HAL_USB_USART_Available_Data>
}
 8083808:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808380c:	bd08      	pop	{r3, pc}

0808380e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808380e:	7c00      	ldrb	r0, [r0, #16]
 8083810:	f7fe bbce 	b.w	8081fb0 <HAL_USB_USART_Flush_Data>

08083814 <_ZN9USBSerialD0Ev>:
 8083814:	b510      	push	{r4, lr}
 8083816:	4604      	mov	r4, r0
 8083818:	2114      	movs	r1, #20
 808381a:	f000 fad8 	bl	8083dce <_ZdlPvj>
 808381e:	4620      	mov	r0, r4
 8083820:	bd10      	pop	{r4, pc}

08083822 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8083822:	b538      	push	{r3, r4, r5, lr}
 8083824:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083826:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8083828:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808382a:	f7fe fba9 	bl	8081f80 <HAL_USB_USART_Available_Data_For_Write>
 808382e:	2800      	cmp	r0, #0
 8083830:	dc01      	bgt.n	8083836 <_ZN9USBSerial5writeEh+0x14>
 8083832:	7c60      	ldrb	r0, [r4, #17]
 8083834:	b128      	cbz	r0, 8083842 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8083836:	4629      	mov	r1, r5
 8083838:	7c20      	ldrb	r0, [r4, #16]
 808383a:	f7fe fbb1 	bl	8081fa0 <HAL_USB_USART_Send_Data>
 808383e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8083842:	bd38      	pop	{r3, r4, r5, pc}

08083844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083844:	b510      	push	{r4, lr}
 8083846:	4604      	mov	r4, r0
 8083848:	2300      	movs	r3, #0
 808384a:	6063      	str	r3, [r4, #4]
 808384c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083850:	60a3      	str	r3, [r4, #8]
 8083852:	4b05      	ldr	r3, [pc, #20]	; (8083868 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8083854:	4608      	mov	r0, r1
 8083856:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083858:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808385a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808385c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808385e:	4611      	mov	r1, r2
 8083860:	f7fe fb7e 	bl	8081f60 <HAL_USB_USART_Init>
}
 8083864:	4620      	mov	r0, r4
 8083866:	bd10      	pop	{r4, pc}
 8083868:	080863cc 	.word	0x080863cc

0808386c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808386c:	b510      	push	{r4, lr}
 808386e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083870:	2214      	movs	r2, #20
 8083872:	2100      	movs	r1, #0
 8083874:	f001 fc9b 	bl	80851ae <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083878:	4b05      	ldr	r3, [pc, #20]	; (8083890 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808387a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808387c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808387e:	4b05      	ldr	r3, [pc, #20]	; (8083894 <_Z19acquireSerialBufferv+0x28>)
 8083880:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083882:	f240 1301 	movw	r3, #257	; 0x101
 8083886:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083888:	2381      	movs	r3, #129	; 0x81
 808388a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808388c:	bd10      	pop	{r4, pc}
 808388e:	bf00      	nop
 8083890:	200005bd 	.word	0x200005bd
 8083894:	2000053c 	.word	0x2000053c

08083898 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083898:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808389a:	4d0e      	ldr	r5, [pc, #56]	; (80838d4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808389c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808389e:	a801      	add	r0, sp, #4
 80838a0:	f7ff ffe4 	bl	808386c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80838a4:	6829      	ldr	r1, [r5, #0]
 80838a6:	f011 0401 	ands.w	r4, r1, #1
 80838aa:	d110      	bne.n	80838ce <_Z16_fetch_usbserialv+0x36>
 80838ac:	4628      	mov	r0, r5
 80838ae:	f7fc fbfa 	bl	80800a6 <__cxa_guard_acquire>
 80838b2:	b160      	cbz	r0, 80838ce <_Z16_fetch_usbserialv+0x36>
 80838b4:	aa01      	add	r2, sp, #4
 80838b6:	4621      	mov	r1, r4
 80838b8:	4807      	ldr	r0, [pc, #28]	; (80838d8 <_Z16_fetch_usbserialv+0x40>)
 80838ba:	f7ff ffc3 	bl	8083844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80838be:	4628      	mov	r0, r5
 80838c0:	f7fc fbf6 	bl	80800b0 <__cxa_guard_release>
 80838c4:	4a05      	ldr	r2, [pc, #20]	; (80838dc <_Z16_fetch_usbserialv+0x44>)
 80838c6:	4906      	ldr	r1, [pc, #24]	; (80838e0 <_Z16_fetch_usbserialv+0x48>)
 80838c8:	4803      	ldr	r0, [pc, #12]	; (80838d8 <_Z16_fetch_usbserialv+0x40>)
 80838ca:	f000 fa7b 	bl	8083dc4 <__aeabi_atexit>
	return _usbserial;
}
 80838ce:	4802      	ldr	r0, [pc, #8]	; (80838d8 <_Z16_fetch_usbserialv+0x40>)
 80838d0:	b007      	add	sp, #28
 80838d2:	bd30      	pop	{r4, r5, pc}
 80838d4:	20000538 	.word	0x20000538
 80838d8:	200006c0 	.word	0x200006c0
 80838dc:	20000134 	.word	0x20000134
 80838e0:	080837c5 	.word	0x080837c5

080838e4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80838e4:	b510      	push	{r4, lr}
 80838e6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80838e8:	2214      	movs	r2, #20
 80838ea:	2100      	movs	r1, #0
 80838ec:	f001 fc5f 	bl	80851ae <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80838f0:	4b05      	ldr	r3, [pc, #20]	; (8083908 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80838f2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80838f4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80838f6:	4b05      	ldr	r3, [pc, #20]	; (808390c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80838f8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80838fa:	f240 1301 	movw	r3, #257	; 0x101
 80838fe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083900:	2381      	movs	r3, #129	; 0x81
 8083902:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083904:	bd10      	pop	{r4, pc}
 8083906:	bf00      	nop
 8083908:	20000770 	.word	0x20000770
 808390c:	200006d8 	.word	0x200006d8

08083910 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8083910:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083912:	4c0e      	ldr	r4, [pc, #56]	; (808394c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8083914:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8083916:	a801      	add	r0, sp, #4
 8083918:	f7ff ffe4 	bl	80838e4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808391c:	6823      	ldr	r3, [r4, #0]
 808391e:	07db      	lsls	r3, r3, #31
 8083920:	d410      	bmi.n	8083944 <_Z17_fetch_usbserial1v+0x34>
 8083922:	4620      	mov	r0, r4
 8083924:	f7fc fbbf 	bl	80800a6 <__cxa_guard_acquire>
 8083928:	b160      	cbz	r0, 8083944 <_Z17_fetch_usbserial1v+0x34>
 808392a:	aa01      	add	r2, sp, #4
 808392c:	2101      	movs	r1, #1
 808392e:	4808      	ldr	r0, [pc, #32]	; (8083950 <_Z17_fetch_usbserial1v+0x40>)
 8083930:	f7ff ff88 	bl	8083844 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083934:	4620      	mov	r0, r4
 8083936:	f7fc fbbb 	bl	80800b0 <__cxa_guard_release>
 808393a:	4a06      	ldr	r2, [pc, #24]	; (8083954 <_Z17_fetch_usbserial1v+0x44>)
 808393c:	4906      	ldr	r1, [pc, #24]	; (8083958 <_Z17_fetch_usbserial1v+0x48>)
 808393e:	4804      	ldr	r0, [pc, #16]	; (8083950 <_Z17_fetch_usbserial1v+0x40>)
 8083940:	f000 fa40 	bl	8083dc4 <__aeabi_atexit>
  return _usbserial1;
}
 8083944:	4802      	ldr	r0, [pc, #8]	; (8083950 <_Z17_fetch_usbserial1v+0x40>)
 8083946:	b006      	add	sp, #24
 8083948:	bd10      	pop	{r4, pc}
 808394a:	bf00      	nop
 808394c:	200006d4 	.word	0x200006d4
 8083950:	2000075c 	.word	0x2000075c
 8083954:	20000134 	.word	0x20000134
 8083958:	080837c5 	.word	0x080837c5

0808395c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808395c:	b510      	push	{r4, lr}
 808395e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8083960:	f001 fc93 	bl	808528a <strlen>
 8083964:	3801      	subs	r0, #1
 8083966:	1823      	adds	r3, r4, r0
 8083968:	4620      	mov	r0, r4
	while(i<j){
 808396a:	4298      	cmp	r0, r3
 808396c:	d206      	bcs.n	808397c <_Z11str_reversePc+0x20>
		c = *i;
 808396e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8083970:	7819      	ldrb	r1, [r3, #0]
 8083972:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8083976:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 808397a:	e7f6      	b.n	808396a <_Z11str_reversePc+0xe>
 808397c:	bd10      	pop	{r4, pc}

0808397e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808397e:	b570      	push	{r4, r5, r6, lr}
 8083980:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8083982:	1e91      	subs	r1, r2, #2
 8083984:	2922      	cmp	r1, #34	; 0x22
 8083986:	d820      	bhi.n	80839ca <ultoa+0x4c>
 8083988:	4625      	mov	r5, r4
 808398a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808398c:	b910      	cbnz	r0, 8083994 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808398e:	4423      	add	r3, r4
            *ptr++ = '0';
 8083990:	2230      	movs	r2, #48	; 0x30
 8083992:	e00e      	b.n	80839b2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8083994:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8083998:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808399c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808399e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80839a0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80839a4:	bf94      	ite	ls
 80839a6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80839a8:	3157      	addhi	r1, #87	; 0x57
 80839aa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80839ae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80839b0:	e7eb      	b.n	808398a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80839b2:	4299      	cmp	r1, r3
 80839b4:	d202      	bcs.n	80839bc <ultoa+0x3e>
            *ptr++ = '0';
 80839b6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80839ba:	e7fa      	b.n	80839b2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80839bc:	2300      	movs	r3, #0
	str_reverse(buffer);
 80839be:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80839c0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80839c2:	f7ff ffcb 	bl	808395c <_Z11str_reversePc>
	return buffer;
 80839c6:	4620      	mov	r0, r4
 80839c8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80839ca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80839cc:	bd70      	pop	{r4, r5, r6, pc}

080839ce <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80839ce:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80839d0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80839d2:	460c      	mov	r4, r1
 80839d4:	4615      	mov	r5, r2
	if(a<0){
 80839d6:	da0b      	bge.n	80839f0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80839d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80839dc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80839e0:	bf14      	ite	ne
 80839e2:	4258      	negne	r0, r3
 80839e4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80839e6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80839e8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80839ea:	462a      	mov	r2, r5
 80839ec:	4419      	add	r1, r3
 80839ee:	e000      	b.n	80839f2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80839f0:	2301      	movs	r3, #1
 80839f2:	f7ff ffc4 	bl	808397e <ultoa>
	}
	return buffer;
}
 80839f6:	4620      	mov	r0, r4
 80839f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080839fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80839fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80839fe:	4b18      	ldr	r3, [pc, #96]	; (8083a60 <serialEventRun+0x64>)
 8083a00:	b133      	cbz	r3, 8083a10 <serialEventRun+0x14>
 8083a02:	f7ff ff49 	bl	8083898 <_Z16_fetch_usbserialv>
 8083a06:	6803      	ldr	r3, [r0, #0]
 8083a08:	691b      	ldr	r3, [r3, #16]
 8083a0a:	4798      	blx	r3
 8083a0c:	2800      	cmp	r0, #0
 8083a0e:	dc1e      	bgt.n	8083a4e <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8083a10:	4b14      	ldr	r3, [pc, #80]	; (8083a64 <serialEventRun+0x68>)
 8083a12:	b133      	cbz	r3, 8083a22 <serialEventRun+0x26>
 8083a14:	f7ff feae 	bl	8083774 <_Z22__fetch_global_Serial1v>
 8083a18:	6803      	ldr	r3, [r0, #0]
 8083a1a:	691b      	ldr	r3, [r3, #16]
 8083a1c:	4798      	blx	r3
 8083a1e:	2800      	cmp	r0, #0
 8083a20:	dc18      	bgt.n	8083a54 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8083a22:	4b11      	ldr	r3, [pc, #68]	; (8083a68 <serialEventRun+0x6c>)
 8083a24:	b10b      	cbz	r3, 8083a2a <serialEventRun+0x2e>
 8083a26:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8083a2a:	4b10      	ldr	r3, [pc, #64]	; (8083a6c <serialEventRun+0x70>)
 8083a2c:	b10b      	cbz	r3, 8083a32 <serialEventRun+0x36>
 8083a2e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8083a32:	4b0f      	ldr	r3, [pc, #60]	; (8083a70 <serialEventRun+0x74>)
 8083a34:	b10b      	cbz	r3, 8083a3a <serialEventRun+0x3e>
 8083a36:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083a3a:	4b0e      	ldr	r3, [pc, #56]	; (8083a74 <serialEventRun+0x78>)
 8083a3c:	b17b      	cbz	r3, 8083a5e <serialEventRun+0x62>
 8083a3e:	f7ff ff67 	bl	8083910 <_Z17_fetch_usbserial1v>
 8083a42:	6803      	ldr	r3, [r0, #0]
 8083a44:	691b      	ldr	r3, [r3, #16]
 8083a46:	4798      	blx	r3
 8083a48:	2800      	cmp	r0, #0
 8083a4a:	dc06      	bgt.n	8083a5a <serialEventRun+0x5e>
 8083a4c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8083a4e:	f3af 8000 	nop.w
 8083a52:	e7dd      	b.n	8083a10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8083a54:	f3af 8000 	nop.w
 8083a58:	e7e3      	b.n	8083a22 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8083a5a:	f3af 8000 	nop.w
 8083a5e:	bd08      	pop	{r3, pc}
	...

08083a78 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8083a78:	b508      	push	{r3, lr}
	serialEventRun();
 8083a7a:	f7ff ffbf 	bl	80839fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083a7e:	f7fe f947 	bl	8081d10 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083a82:	4b01      	ldr	r3, [pc, #4]	; (8083a88 <_post_loop+0x10>)
 8083a84:	6018      	str	r0, [r3, #0]
 8083a86:	bd08      	pop	{r3, pc}
 8083a88:	2000088c 	.word	0x2000088c

08083a8c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8083a8c:	4802      	ldr	r0, [pc, #8]	; (8083a98 <_Z33system_initialize_user_backup_ramv+0xc>)
 8083a8e:	4a03      	ldr	r2, [pc, #12]	; (8083a9c <_Z33system_initialize_user_backup_ramv+0x10>)
 8083a90:	4903      	ldr	r1, [pc, #12]	; (8083aa0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8083a92:	1a12      	subs	r2, r2, r0
 8083a94:	f001 bb80 	b.w	8085198 <memcpy>
 8083a98:	40024000 	.word	0x40024000
 8083a9c:	40024004 	.word	0x40024004
 8083aa0:	08086690 	.word	0x08086690

08083aa4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8083aa4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083aa6:	2300      	movs	r3, #0
 8083aa8:	9300      	str	r3, [sp, #0]
 8083aaa:	461a      	mov	r2, r3
 8083aac:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083ab0:	f7fe faf2 	bl	8082098 <system_ctrl_set_result>
}
 8083ab4:	b003      	add	sp, #12
 8083ab6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083abc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083abc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083abe:	8843      	ldrh	r3, [r0, #2]
 8083ac0:	2b0a      	cmp	r3, #10
 8083ac2:	d008      	beq.n	8083ad6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083ac4:	2b50      	cmp	r3, #80	; 0x50
 8083ac6:	d109      	bne.n	8083adc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8083ac8:	4b09      	ldr	r3, [pc, #36]	; (8083af0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8083aca:	681b      	ldr	r3, [r3, #0]
 8083acc:	b13b      	cbz	r3, 8083ade <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8083ace:	b003      	add	sp, #12
 8083ad0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083ad4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8083ad6:	f7ff ffe5 	bl	8083aa4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8083ada:	e006      	b.n	8083aea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083adc:	2300      	movs	r3, #0
 8083ade:	9300      	str	r3, [sp, #0]
 8083ae0:	461a      	mov	r2, r3
 8083ae2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083ae6:	f7fe fad7 	bl	8082098 <system_ctrl_set_result>
        break;
    }
}
 8083aea:	b003      	add	sp, #12
 8083aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8083af0:	20000874 	.word	0x20000874

08083af4 <module_user_init_hook>:

void module_user_init_hook()
{
 8083af4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083af6:	4c10      	ldr	r4, [pc, #64]	; (8083b38 <module_user_init_hook+0x44>)
 8083af8:	4d10      	ldr	r5, [pc, #64]	; (8083b3c <module_user_init_hook+0x48>)
 8083afa:	6823      	ldr	r3, [r4, #0]
 8083afc:	42ab      	cmp	r3, r5
 8083afe:	4b10      	ldr	r3, [pc, #64]	; (8083b40 <module_user_init_hook+0x4c>)
 8083b00:	bf0c      	ite	eq
 8083b02:	2201      	moveq	r2, #1
 8083b04:	2200      	movne	r2, #0
 8083b06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083b08:	d002      	beq.n	8083b10 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8083b0a:	f7ff ffbf 	bl	8083a8c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8083b0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083b10:	f7fe f8ee 	bl	8081cf0 <HAL_RNG_GetRandomNumber>
 8083b14:	4604      	mov	r4, r0
    srand(seed);
 8083b16:	f001 fb53 	bl	80851c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8083b1a:	4b0a      	ldr	r3, [pc, #40]	; (8083b44 <module_user_init_hook+0x50>)
 8083b1c:	b113      	cbz	r3, 8083b24 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8083b1e:	4620      	mov	r0, r4
 8083b20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083b24:	2100      	movs	r1, #0
 8083b26:	4807      	ldr	r0, [pc, #28]	; (8083b44 <module_user_init_hook+0x50>)
 8083b28:	f7fe fb1c 	bl	8082164 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083b30:	2100      	movs	r1, #0
 8083b32:	4805      	ldr	r0, [pc, #20]	; (8083b48 <module_user_init_hook+0x54>)
 8083b34:	f7fe baa6 	b.w	8082084 <system_ctrl_set_app_request_handler>
 8083b38:	40024000 	.word	0x40024000
 8083b3c:	9a271c1e 	.word	0x9a271c1e
 8083b40:	20000878 	.word	0x20000878
 8083b44:	00000000 	.word	0x00000000
 8083b48:	08083abd 	.word	0x08083abd

08083b4c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8083b4c:	b508      	push	{r3, lr}
 8083b4e:	4b02      	ldr	r3, [pc, #8]	; (8083b58 <spark_protocol_instance+0xc>)
 8083b50:	681b      	ldr	r3, [r3, #0]
 8083b52:	681b      	ldr	r3, [r3, #0]
 8083b54:	9301      	str	r3, [sp, #4]
 8083b56:	bd08      	pop	{r3, pc}
 8083b58:	0802019c 	.word	0x0802019c

08083b5c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8083b5c:	b508      	push	{r3, lr}
 8083b5e:	4b02      	ldr	r3, [pc, #8]	; (8083b68 <spark_protocol_set_product_id+0xc>)
 8083b60:	681b      	ldr	r3, [r3, #0]
 8083b62:	685b      	ldr	r3, [r3, #4]
 8083b64:	9301      	str	r3, [sp, #4]
 8083b66:	bd08      	pop	{r3, pc}
 8083b68:	0802019c 	.word	0x0802019c

08083b6c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8083b6c:	b508      	push	{r3, lr}
 8083b6e:	4b02      	ldr	r3, [pc, #8]	; (8083b78 <spark_protocol_set_product_firmware_version+0xc>)
 8083b70:	681b      	ldr	r3, [r3, #0]
 8083b72:	689b      	ldr	r3, [r3, #8]
 8083b74:	9301      	str	r3, [sp, #4]
 8083b76:	bd08      	pop	{r3, pc}
 8083b78:	0802019c 	.word	0x0802019c

08083b7c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 8083b7c:	b510      	push	{r4, lr}
 8083b7e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8083b80:	6880      	ldr	r0, [r0, #8]
 8083b82:	b108      	cbz	r0, 8083b88 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8083b84:	f7fe f894 	bl	8081cb0 <os_mutex_recursive_destroy>
 8083b88:	4620      	mov	r0, r4
 8083b8a:	bd10      	pop	{r4, pc}

08083b8c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083b8c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083b8e:	4e1a      	ldr	r6, [pc, #104]	; (8083bf8 <pinAvailable+0x6c>)
 8083b90:	4604      	mov	r4, r0
 8083b92:	6831      	ldr	r1, [r6, #0]
 8083b94:	f011 0501 	ands.w	r5, r1, #1
 8083b98:	d10f      	bne.n	8083bba <pinAvailable+0x2e>
 8083b9a:	4630      	mov	r0, r6
 8083b9c:	f7fc fa83 	bl	80800a6 <__cxa_guard_acquire>
 8083ba0:	b158      	cbz	r0, 8083bba <pinAvailable+0x2e>
 8083ba2:	4629      	mov	r1, r5
 8083ba4:	4815      	ldr	r0, [pc, #84]	; (8083bfc <pinAvailable+0x70>)
 8083ba6:	f7ff fa89 	bl	80830bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083baa:	4630      	mov	r0, r6
 8083bac:	f7fc fa80 	bl	80800b0 <__cxa_guard_release>
 8083bb0:	4a13      	ldr	r2, [pc, #76]	; (8083c00 <pinAvailable+0x74>)
 8083bb2:	4914      	ldr	r1, [pc, #80]	; (8083c04 <pinAvailable+0x78>)
 8083bb4:	4811      	ldr	r0, [pc, #68]	; (8083bfc <pinAvailable+0x70>)
 8083bb6:	f000 f905 	bl	8083dc4 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 8083bba:	4810      	ldr	r0, [pc, #64]	; (8083bfc <pinAvailable+0x70>)
 8083bbc:	f7ff fa8d 	bl	80830da <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083bc0:	b128      	cbz	r0, 8083bce <pinAvailable+0x42>
 8083bc2:	f1a4 030d 	sub.w	r3, r4, #13
 8083bc6:	2b02      	cmp	r3, #2
 8083bc8:	d801      	bhi.n	8083bce <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 8083bca:	2000      	movs	r0, #0
 8083bcc:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083bce:	f000 f895 	bl	8083cfc <_Z19__fetch_global_Wirev>
 8083bd2:	f7ff f848 	bl	8082c66 <_ZN7TwoWire9isEnabledEv>
 8083bd6:	b108      	cbz	r0, 8083bdc <pinAvailable+0x50>
 8083bd8:	2c01      	cmp	r4, #1
 8083bda:	d9f6      	bls.n	8083bca <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083bdc:	f7ff fdca 	bl	8083774 <_Z22__fetch_global_Serial1v>
 8083be0:	f7ff fdc5 	bl	808376e <_ZN11USARTSerial9isEnabledEv>
 8083be4:	b118      	cbz	r0, 8083bee <pinAvailable+0x62>
 8083be6:	f1a4 0312 	sub.w	r3, r4, #18
 8083bea:	2b01      	cmp	r3, #1
 8083bec:	d9ed      	bls.n	8083bca <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083bee:	2c2e      	cmp	r4, #46	; 0x2e
 8083bf0:	bf8c      	ite	hi
 8083bf2:	2000      	movhi	r0, #0
 8083bf4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8083bf6:	bd70      	pop	{r4, r5, r6, pc}
 8083bf8:	2000087c 	.word	0x2000087c
 8083bfc:	20000880 	.word	0x20000880
 8083c00:	20000134 	.word	0x20000134
 8083c04:	08083b7d 	.word	0x08083b7d

08083c08 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083c08:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8083c0a:	b538      	push	{r3, r4, r5, lr}
 8083c0c:	4604      	mov	r4, r0
 8083c0e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083c10:	d80a      	bhi.n	8083c28 <pinMode+0x20>
 8083c12:	29ff      	cmp	r1, #255	; 0xff
 8083c14:	d008      	beq.n	8083c28 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083c16:	f7ff ffb9 	bl	8083b8c <pinAvailable>
 8083c1a:	b128      	cbz	r0, 8083c28 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083c1c:	4629      	mov	r1, r5
 8083c1e:	4620      	mov	r0, r4
}
 8083c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083c24:	f7fe b8a4 	b.w	8081d70 <HAL_Pin_Mode>
 8083c28:	bd38      	pop	{r3, r4, r5, pc}

08083c2a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083c2a:	b538      	push	{r3, r4, r5, lr}
 8083c2c:	4604      	mov	r4, r0
 8083c2e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083c30:	f7fe f8a6 	bl	8081d80 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083c34:	28ff      	cmp	r0, #255	; 0xff
 8083c36:	d010      	beq.n	8083c5a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083c38:	2806      	cmp	r0, #6
 8083c3a:	d804      	bhi.n	8083c46 <digitalWrite+0x1c>
 8083c3c:	234d      	movs	r3, #77	; 0x4d
 8083c3e:	fa23 f000 	lsr.w	r0, r3, r0
 8083c42:	07c3      	lsls	r3, r0, #31
 8083c44:	d409      	bmi.n	8083c5a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083c46:	4620      	mov	r0, r4
 8083c48:	f7ff ffa0 	bl	8083b8c <pinAvailable>
 8083c4c:	b128      	cbz	r0, 8083c5a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083c4e:	4629      	mov	r1, r5
 8083c50:	4620      	mov	r0, r4
}
 8083c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083c56:	f7fe b89b 	b.w	8081d90 <HAL_GPIO_Write>
 8083c5a:	bd38      	pop	{r3, r4, r5, pc}

08083c5c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083c5c:	b510      	push	{r4, lr}
 8083c5e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083c60:	f7fe f88e 	bl	8081d80 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8083c64:	3804      	subs	r0, #4
 8083c66:	b2c0      	uxtb	r0, r0
 8083c68:	2801      	cmp	r0, #1
 8083c6a:	d908      	bls.n	8083c7e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083c6c:	4620      	mov	r0, r4
 8083c6e:	f7ff ff8d 	bl	8083b8c <pinAvailable>
 8083c72:	b120      	cbz	r0, 8083c7e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083c74:	4620      	mov	r0, r4
}
 8083c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083c7a:	f7fe b891 	b.w	8081da0 <HAL_GPIO_Read>
}
 8083c7e:	2000      	movs	r0, #0
 8083c80:	bd10      	pop	{r4, pc}

08083c82 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8083c82:	b510      	push	{r4, lr}
 8083c84:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8083c86:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8083c88:	bf9c      	itt	ls
 8083c8a:	340a      	addls	r4, #10
 8083c8c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083c8e:	4620      	mov	r0, r4
 8083c90:	f7ff ff7c 	bl	8083b8c <pinAvailable>
 8083c94:	b150      	cbz	r0, 8083cac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083c96:	2103      	movs	r1, #3
 8083c98:	4620      	mov	r0, r4
 8083c9a:	f7fe f861 	bl	8081d60 <HAL_Validate_Pin_Function>
 8083c9e:	2803      	cmp	r0, #3
 8083ca0:	d104      	bne.n	8083cac <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083ca2:	4620      	mov	r0, r4
}
 8083ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083ca8:	f7fe b892 	b.w	8081dd0 <HAL_ADC_Read>
}
 8083cac:	2000      	movs	r0, #0
 8083cae:	bd10      	pop	{r4, pc}

08083cb0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8083cb0:	b570      	push	{r4, r5, r6, lr}
 8083cb2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083cb4:	2514      	movs	r5, #20
 8083cb6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083cb8:	4e09      	ldr	r6, [pc, #36]	; (8083ce0 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083cba:	2100      	movs	r1, #0
 8083cbc:	f001 fa77 	bl	80851ae <memset>
 8083cc0:	8025      	strh	r5, [r4, #0]
 8083cc2:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083cc4:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083cc6:	60a5      	str	r5, [r4, #8]
 8083cc8:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083cca:	4628      	mov	r0, r5
 8083ccc:	f000 f899 	bl	8083e02 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083cd0:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083cd2:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083cd4:	4628      	mov	r0, r5
 8083cd6:	f000 f894 	bl	8083e02 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083cda:	60e0      	str	r0, [r4, #12]

	return config;
}
 8083cdc:	4620      	mov	r0, r4
 8083cde:	bd70      	pop	{r4, r5, r6, pc}
 8083ce0:	080863f4 	.word	0x080863f4

08083ce4 <_Z17acquireWireBufferv>:
 8083ce4:	b510      	push	{r4, lr}
 8083ce6:	4604      	mov	r4, r0
 8083ce8:	f7ff ffe2 	bl	8083cb0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8083cec:	4620      	mov	r0, r4
 8083cee:	bd10      	pop	{r4, pc}

08083cf0 <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 8083cf0:	b510      	push	{r4, lr}
 8083cf2:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083cf4:	f7ff ffdc 	bl	8083cb0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083cf8:	4620      	mov	r0, r4
 8083cfa:	bd10      	pop	{r4, pc}

08083cfc <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8083cfc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083cfe:	4d0e      	ldr	r5, [pc, #56]	; (8083d38 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8083d00:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083d02:	6829      	ldr	r1, [r5, #0]
 8083d04:	f011 0401 	ands.w	r4, r1, #1
 8083d08:	d113      	bne.n	8083d32 <_Z19__fetch_global_Wirev+0x36>
 8083d0a:	4628      	mov	r0, r5
 8083d0c:	f7fc f9cb 	bl	80800a6 <__cxa_guard_acquire>
 8083d10:	b178      	cbz	r0, 8083d32 <_Z19__fetch_global_Wirev+0x36>
 8083d12:	a801      	add	r0, sp, #4
 8083d14:	f7ff ffe6 	bl	8083ce4 <_Z17acquireWireBufferv>
 8083d18:	aa01      	add	r2, sp, #4
 8083d1a:	4621      	mov	r1, r4
 8083d1c:	4807      	ldr	r0, [pc, #28]	; (8083d3c <_Z19__fetch_global_Wirev+0x40>)
 8083d1e:	f7fe ff51 	bl	8082bc4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8083d22:	4628      	mov	r0, r5
 8083d24:	f7fc f9c4 	bl	80800b0 <__cxa_guard_release>
 8083d28:	4a05      	ldr	r2, [pc, #20]	; (8083d40 <_Z19__fetch_global_Wirev+0x44>)
 8083d2a:	4906      	ldr	r1, [pc, #24]	; (8083d44 <_Z19__fetch_global_Wirev+0x48>)
 8083d2c:	4803      	ldr	r0, [pc, #12]	; (8083d3c <_Z19__fetch_global_Wirev+0x40>)
 8083d2e:	f000 f849 	bl	8083dc4 <__aeabi_atexit>
	return wire;
}
 8083d32:	4802      	ldr	r0, [pc, #8]	; (8083d3c <_Z19__fetch_global_Wirev+0x40>)
 8083d34:	b007      	add	sp, #28
 8083d36:	bd30      	pop	{r4, r5, pc}
 8083d38:	20000890 	.word	0x20000890
 8083d3c:	200008a8 	.word	0x200008a8
 8083d40:	20000134 	.word	0x20000134
 8083d44:	08082b6d 	.word	0x08082b6d

08083d48 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083d48:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083d4a:	4c0e      	ldr	r4, [pc, #56]	; (8083d84 <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083d4c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083d4e:	6823      	ldr	r3, [r4, #0]
 8083d50:	07db      	lsls	r3, r3, #31
 8083d52:	d413      	bmi.n	8083d7c <_Z20__fetch_global_Wire3v+0x34>
 8083d54:	4620      	mov	r0, r4
 8083d56:	f7fc f9a6 	bl	80800a6 <__cxa_guard_acquire>
 8083d5a:	b178      	cbz	r0, 8083d7c <_Z20__fetch_global_Wire3v+0x34>
 8083d5c:	a801      	add	r0, sp, #4
 8083d5e:	f7ff ffc7 	bl	8083cf0 <_Z18acquireWire3Bufferv>
 8083d62:	aa01      	add	r2, sp, #4
 8083d64:	2102      	movs	r1, #2
 8083d66:	4808      	ldr	r0, [pc, #32]	; (8083d88 <_Z20__fetch_global_Wire3v+0x40>)
 8083d68:	f7fe ff2c 	bl	8082bc4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8083d6c:	4620      	mov	r0, r4
 8083d6e:	f7fc f99f 	bl	80800b0 <__cxa_guard_release>
 8083d72:	4a06      	ldr	r2, [pc, #24]	; (8083d8c <_Z20__fetch_global_Wire3v+0x44>)
 8083d74:	4906      	ldr	r1, [pc, #24]	; (8083d90 <_Z20__fetch_global_Wire3v+0x48>)
 8083d76:	4804      	ldr	r0, [pc, #16]	; (8083d88 <_Z20__fetch_global_Wire3v+0x40>)
 8083d78:	f000 f824 	bl	8083dc4 <__aeabi_atexit>
	return wire;
}
 8083d7c:	4802      	ldr	r0, [pc, #8]	; (8083d88 <_Z20__fetch_global_Wire3v+0x40>)
 8083d7e:	b006      	add	sp, #24
 8083d80:	bd10      	pop	{r4, pc}
 8083d82:	bf00      	nop
 8083d84:	200008bc 	.word	0x200008bc
 8083d88:	20000894 	.word	0x20000894
 8083d8c:	20000134 	.word	0x20000134
 8083d90:	08082b6d 	.word	0x08082b6d

08083d94 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083d94:	b513      	push	{r0, r1, r4, lr}
 8083d96:	4c08      	ldr	r4, [pc, #32]	; (8083db8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083d98:	2300      	movs	r3, #0
 8083d9a:	461a      	mov	r2, r3
 8083d9c:	4619      	mov	r1, r3
 8083d9e:	9300      	str	r3, [sp, #0]
 8083da0:	4620      	mov	r0, r4
 8083da2:	f7fe fffd 	bl	8082da0 <_ZN9IPAddressC1Ehhhh>
 8083da6:	4620      	mov	r0, r4
 8083da8:	4a04      	ldr	r2, [pc, #16]	; (8083dbc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083daa:	4905      	ldr	r1, [pc, #20]	; (8083dc0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083dac:	b002      	add	sp, #8
 8083dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083db2:	f000 b807 	b.w	8083dc4 <__aeabi_atexit>
 8083db6:	bf00      	nop
 8083db8:	200008c0 	.word	0x200008c0
 8083dbc:	20000134 	.word	0x20000134
 8083dc0:	08082d19 	.word	0x08082d19

08083dc4 <__aeabi_atexit>:
 8083dc4:	460b      	mov	r3, r1
 8083dc6:	4601      	mov	r1, r0
 8083dc8:	4618      	mov	r0, r3
 8083dca:	f001 b8df 	b.w	8084f8c <__cxa_atexit>

08083dce <_ZdlPvj>:
 8083dce:	f7fc b968 	b.w	80800a2 <_ZdlPv>
	...

08083dd4 <_ZSt15get_new_handlerv>:
 8083dd4:	4b02      	ldr	r3, [pc, #8]	; (8083de0 <_ZSt15get_new_handlerv+0xc>)
 8083dd6:	6818      	ldr	r0, [r3, #0]
 8083dd8:	f3bf 8f5f 	dmb	sy
 8083ddc:	4770      	bx	lr
 8083dde:	bf00      	nop
 8083de0:	200008c8 	.word	0x200008c8

08083de4 <_ZnwjRKSt9nothrow_t>:
 8083de4:	b510      	push	{r4, lr}
 8083de6:	2800      	cmp	r0, #0
 8083de8:	bf14      	ite	ne
 8083dea:	4604      	movne	r4, r0
 8083dec:	2401      	moveq	r4, #1
 8083dee:	4620      	mov	r0, r4
 8083df0:	f7fe fa10 	bl	8082214 <malloc>
 8083df4:	b920      	cbnz	r0, 8083e00 <_ZnwjRKSt9nothrow_t+0x1c>
 8083df6:	f7ff ffed 	bl	8083dd4 <_ZSt15get_new_handlerv>
 8083dfa:	b108      	cbz	r0, 8083e00 <_ZnwjRKSt9nothrow_t+0x1c>
 8083dfc:	4780      	blx	r0
 8083dfe:	e7f6      	b.n	8083dee <_ZnwjRKSt9nothrow_t+0xa>
 8083e00:	bd10      	pop	{r4, pc}

08083e02 <_ZnajRKSt9nothrow_t>:
 8083e02:	f7ff bfef 	b.w	8083de4 <_ZnwjRKSt9nothrow_t>

08083e06 <_ZSt25__throw_bad_function_callv>:
 8083e06:	b508      	push	{r3, lr}
 8083e08:	f7fe fa34 	bl	8082274 <abort>

08083e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083e0c:	4b24      	ldr	r3, [pc, #144]	; (8083ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8083e0e:	681a      	ldr	r2, [r3, #0]
 8083e10:	07d0      	lsls	r0, r2, #31
 8083e12:	bf5c      	itt	pl
 8083e14:	2201      	movpl	r2, #1
 8083e16:	601a      	strpl	r2, [r3, #0]
 8083e18:	4b22      	ldr	r3, [pc, #136]	; (8083ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083e1a:	681a      	ldr	r2, [r3, #0]
 8083e1c:	07d1      	lsls	r1, r2, #31
 8083e1e:	bf5c      	itt	pl
 8083e20:	2201      	movpl	r2, #1
 8083e22:	601a      	strpl	r2, [r3, #0]
 8083e24:	4b20      	ldr	r3, [pc, #128]	; (8083ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083e26:	681a      	ldr	r2, [r3, #0]
 8083e28:	07d2      	lsls	r2, r2, #31
 8083e2a:	bf5c      	itt	pl
 8083e2c:	2201      	movpl	r2, #1
 8083e2e:	601a      	strpl	r2, [r3, #0]
 8083e30:	4b1e      	ldr	r3, [pc, #120]	; (8083eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8083e32:	681a      	ldr	r2, [r3, #0]
 8083e34:	07d0      	lsls	r0, r2, #31
 8083e36:	bf5c      	itt	pl
 8083e38:	2201      	movpl	r2, #1
 8083e3a:	601a      	strpl	r2, [r3, #0]
 8083e3c:	4b1c      	ldr	r3, [pc, #112]	; (8083eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8083e3e:	681a      	ldr	r2, [r3, #0]
 8083e40:	07d1      	lsls	r1, r2, #31
 8083e42:	bf5c      	itt	pl
 8083e44:	2201      	movpl	r2, #1
 8083e46:	601a      	strpl	r2, [r3, #0]
 8083e48:	4b1a      	ldr	r3, [pc, #104]	; (8083eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083e4a:	681a      	ldr	r2, [r3, #0]
 8083e4c:	07d2      	lsls	r2, r2, #31
 8083e4e:	bf5c      	itt	pl
 8083e50:	2201      	movpl	r2, #1
 8083e52:	601a      	strpl	r2, [r3, #0]
 8083e54:	4b18      	ldr	r3, [pc, #96]	; (8083eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083e56:	681a      	ldr	r2, [r3, #0]
 8083e58:	07d0      	lsls	r0, r2, #31
 8083e5a:	bf5c      	itt	pl
 8083e5c:	2201      	movpl	r2, #1
 8083e5e:	601a      	strpl	r2, [r3, #0]
 8083e60:	4b16      	ldr	r3, [pc, #88]	; (8083ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8083e62:	681a      	ldr	r2, [r3, #0]
 8083e64:	07d1      	lsls	r1, r2, #31
 8083e66:	bf5c      	itt	pl
 8083e68:	2201      	movpl	r2, #1
 8083e6a:	601a      	strpl	r2, [r3, #0]
 8083e6c:	4b14      	ldr	r3, [pc, #80]	; (8083ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8083e6e:	681a      	ldr	r2, [r3, #0]
 8083e70:	07d2      	lsls	r2, r2, #31
 8083e72:	bf5c      	itt	pl
 8083e74:	2201      	movpl	r2, #1
 8083e76:	601a      	strpl	r2, [r3, #0]
 8083e78:	4b12      	ldr	r3, [pc, #72]	; (8083ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083e7a:	681a      	ldr	r2, [r3, #0]
 8083e7c:	07d0      	lsls	r0, r2, #31
 8083e7e:	bf5c      	itt	pl
 8083e80:	2201      	movpl	r2, #1
 8083e82:	601a      	strpl	r2, [r3, #0]
 8083e84:	4b10      	ldr	r3, [pc, #64]	; (8083ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083e86:	681a      	ldr	r2, [r3, #0]
 8083e88:	07d1      	lsls	r1, r2, #31
 8083e8a:	bf5c      	itt	pl
 8083e8c:	2201      	movpl	r2, #1
 8083e8e:	601a      	strpl	r2, [r3, #0]
 8083e90:	4b0e      	ldr	r3, [pc, #56]	; (8083ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083e92:	681a      	ldr	r2, [r3, #0]
 8083e94:	07d2      	lsls	r2, r2, #31
 8083e96:	bf5c      	itt	pl
 8083e98:	2201      	movpl	r2, #1
 8083e9a:	601a      	strpl	r2, [r3, #0]
 8083e9c:	4770      	bx	lr
 8083e9e:	bf00      	nop
 8083ea0:	200008f8 	.word	0x200008f8
 8083ea4:	200008f4 	.word	0x200008f4
 8083ea8:	200008f0 	.word	0x200008f0
 8083eac:	200008ec 	.word	0x200008ec
 8083eb0:	200008e8 	.word	0x200008e8
 8083eb4:	200008e4 	.word	0x200008e4
 8083eb8:	200008e0 	.word	0x200008e0
 8083ebc:	200008dc 	.word	0x200008dc
 8083ec0:	200008d8 	.word	0x200008d8
 8083ec4:	200008d4 	.word	0x200008d4
 8083ec8:	200008d0 	.word	0x200008d0
 8083ecc:	200008cc 	.word	0x200008cc

08083ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083ed0:	4b18      	ldr	r3, [pc, #96]	; (8083f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083ed2:	681a      	ldr	r2, [r3, #0]
 8083ed4:	07d1      	lsls	r1, r2, #31
 8083ed6:	bf5c      	itt	pl
 8083ed8:	2201      	movpl	r2, #1
 8083eda:	601a      	strpl	r2, [r3, #0]
 8083edc:	4b16      	ldr	r3, [pc, #88]	; (8083f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083ede:	681a      	ldr	r2, [r3, #0]
 8083ee0:	07d2      	lsls	r2, r2, #31
 8083ee2:	bf5c      	itt	pl
 8083ee4:	2201      	movpl	r2, #1
 8083ee6:	601a      	strpl	r2, [r3, #0]
 8083ee8:	4b14      	ldr	r3, [pc, #80]	; (8083f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083eea:	681a      	ldr	r2, [r3, #0]
 8083eec:	07d0      	lsls	r0, r2, #31
 8083eee:	bf5c      	itt	pl
 8083ef0:	2201      	movpl	r2, #1
 8083ef2:	601a      	strpl	r2, [r3, #0]
 8083ef4:	4b12      	ldr	r3, [pc, #72]	; (8083f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083ef6:	681a      	ldr	r2, [r3, #0]
 8083ef8:	07d1      	lsls	r1, r2, #31
 8083efa:	bf5c      	itt	pl
 8083efc:	2201      	movpl	r2, #1
 8083efe:	601a      	strpl	r2, [r3, #0]
 8083f00:	4b10      	ldr	r3, [pc, #64]	; (8083f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083f02:	681a      	ldr	r2, [r3, #0]
 8083f04:	07d2      	lsls	r2, r2, #31
 8083f06:	bf5c      	itt	pl
 8083f08:	2201      	movpl	r2, #1
 8083f0a:	601a      	strpl	r2, [r3, #0]
 8083f0c:	4b0e      	ldr	r3, [pc, #56]	; (8083f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083f0e:	681a      	ldr	r2, [r3, #0]
 8083f10:	07d0      	lsls	r0, r2, #31
 8083f12:	bf5c      	itt	pl
 8083f14:	2201      	movpl	r2, #1
 8083f16:	601a      	strpl	r2, [r3, #0]
 8083f18:	4b0c      	ldr	r3, [pc, #48]	; (8083f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083f1a:	681a      	ldr	r2, [r3, #0]
 8083f1c:	07d1      	lsls	r1, r2, #31
 8083f1e:	bf5c      	itt	pl
 8083f20:	2201      	movpl	r2, #1
 8083f22:	601a      	strpl	r2, [r3, #0]
 8083f24:	4b0a      	ldr	r3, [pc, #40]	; (8083f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083f26:	681a      	ldr	r2, [r3, #0]
 8083f28:	07d2      	lsls	r2, r2, #31
 8083f2a:	bf5c      	itt	pl
 8083f2c:	2201      	movpl	r2, #1
 8083f2e:	601a      	strpl	r2, [r3, #0]
 8083f30:	4770      	bx	lr
 8083f32:	bf00      	nop
 8083f34:	20000918 	.word	0x20000918
 8083f38:	20000914 	.word	0x20000914
 8083f3c:	20000910 	.word	0x20000910
 8083f40:	2000090c 	.word	0x2000090c
 8083f44:	20000908 	.word	0x20000908
 8083f48:	20000904 	.word	0x20000904
 8083f4c:	20000900 	.word	0x20000900
 8083f50:	200008fc 	.word	0x200008fc

08083f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083f54:	4b18      	ldr	r3, [pc, #96]	; (8083fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083f56:	681a      	ldr	r2, [r3, #0]
 8083f58:	07d1      	lsls	r1, r2, #31
 8083f5a:	bf5c      	itt	pl
 8083f5c:	2201      	movpl	r2, #1
 8083f5e:	601a      	strpl	r2, [r3, #0]
 8083f60:	4b16      	ldr	r3, [pc, #88]	; (8083fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083f62:	681a      	ldr	r2, [r3, #0]
 8083f64:	07d2      	lsls	r2, r2, #31
 8083f66:	bf5c      	itt	pl
 8083f68:	2201      	movpl	r2, #1
 8083f6a:	601a      	strpl	r2, [r3, #0]
 8083f6c:	4b14      	ldr	r3, [pc, #80]	; (8083fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083f6e:	681a      	ldr	r2, [r3, #0]
 8083f70:	07d0      	lsls	r0, r2, #31
 8083f72:	bf5c      	itt	pl
 8083f74:	2201      	movpl	r2, #1
 8083f76:	601a      	strpl	r2, [r3, #0]
 8083f78:	4b12      	ldr	r3, [pc, #72]	; (8083fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083f7a:	681a      	ldr	r2, [r3, #0]
 8083f7c:	07d1      	lsls	r1, r2, #31
 8083f7e:	bf5c      	itt	pl
 8083f80:	2201      	movpl	r2, #1
 8083f82:	601a      	strpl	r2, [r3, #0]
 8083f84:	4b10      	ldr	r3, [pc, #64]	; (8083fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083f86:	681a      	ldr	r2, [r3, #0]
 8083f88:	07d2      	lsls	r2, r2, #31
 8083f8a:	bf5c      	itt	pl
 8083f8c:	2201      	movpl	r2, #1
 8083f8e:	601a      	strpl	r2, [r3, #0]
 8083f90:	4b0e      	ldr	r3, [pc, #56]	; (8083fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083f92:	681a      	ldr	r2, [r3, #0]
 8083f94:	07d0      	lsls	r0, r2, #31
 8083f96:	bf5c      	itt	pl
 8083f98:	2201      	movpl	r2, #1
 8083f9a:	601a      	strpl	r2, [r3, #0]
 8083f9c:	4b0c      	ldr	r3, [pc, #48]	; (8083fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083f9e:	681a      	ldr	r2, [r3, #0]
 8083fa0:	07d1      	lsls	r1, r2, #31
 8083fa2:	bf5c      	itt	pl
 8083fa4:	2201      	movpl	r2, #1
 8083fa6:	601a      	strpl	r2, [r3, #0]
 8083fa8:	4b0a      	ldr	r3, [pc, #40]	; (8083fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083faa:	681a      	ldr	r2, [r3, #0]
 8083fac:	07d2      	lsls	r2, r2, #31
 8083fae:	bf5c      	itt	pl
 8083fb0:	2201      	movpl	r2, #1
 8083fb2:	601a      	strpl	r2, [r3, #0]
 8083fb4:	4770      	bx	lr
 8083fb6:	bf00      	nop
 8083fb8:	20000938 	.word	0x20000938
 8083fbc:	20000934 	.word	0x20000934
 8083fc0:	20000930 	.word	0x20000930
 8083fc4:	2000092c 	.word	0x2000092c
 8083fc8:	20000928 	.word	0x20000928
 8083fcc:	20000924 	.word	0x20000924
 8083fd0:	20000920 	.word	0x20000920
 8083fd4:	2000091c 	.word	0x2000091c

08083fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083fd8:	4b24      	ldr	r3, [pc, #144]	; (808406c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083fda:	681a      	ldr	r2, [r3, #0]
 8083fdc:	07d0      	lsls	r0, r2, #31
 8083fde:	bf5c      	itt	pl
 8083fe0:	2201      	movpl	r2, #1
 8083fe2:	601a      	strpl	r2, [r3, #0]
 8083fe4:	4b22      	ldr	r3, [pc, #136]	; (8084070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083fe6:	681a      	ldr	r2, [r3, #0]
 8083fe8:	07d1      	lsls	r1, r2, #31
 8083fea:	bf5c      	itt	pl
 8083fec:	2201      	movpl	r2, #1
 8083fee:	601a      	strpl	r2, [r3, #0]
 8083ff0:	4b20      	ldr	r3, [pc, #128]	; (8084074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083ff2:	681a      	ldr	r2, [r3, #0]
 8083ff4:	07d2      	lsls	r2, r2, #31
 8083ff6:	bf5c      	itt	pl
 8083ff8:	2201      	movpl	r2, #1
 8083ffa:	601a      	strpl	r2, [r3, #0]
 8083ffc:	4b1e      	ldr	r3, [pc, #120]	; (8084078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083ffe:	681a      	ldr	r2, [r3, #0]
 8084000:	07d0      	lsls	r0, r2, #31
 8084002:	bf5c      	itt	pl
 8084004:	2201      	movpl	r2, #1
 8084006:	601a      	strpl	r2, [r3, #0]
 8084008:	4b1c      	ldr	r3, [pc, #112]	; (808407c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808400a:	681a      	ldr	r2, [r3, #0]
 808400c:	07d1      	lsls	r1, r2, #31
 808400e:	bf5c      	itt	pl
 8084010:	2201      	movpl	r2, #1
 8084012:	601a      	strpl	r2, [r3, #0]
 8084014:	4b1a      	ldr	r3, [pc, #104]	; (8084080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8084016:	681a      	ldr	r2, [r3, #0]
 8084018:	07d2      	lsls	r2, r2, #31
 808401a:	bf5c      	itt	pl
 808401c:	2201      	movpl	r2, #1
 808401e:	601a      	strpl	r2, [r3, #0]
 8084020:	4b18      	ldr	r3, [pc, #96]	; (8084084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8084022:	681a      	ldr	r2, [r3, #0]
 8084024:	07d0      	lsls	r0, r2, #31
 8084026:	bf5c      	itt	pl
 8084028:	2201      	movpl	r2, #1
 808402a:	601a      	strpl	r2, [r3, #0]
 808402c:	4b16      	ldr	r3, [pc, #88]	; (8084088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808402e:	681a      	ldr	r2, [r3, #0]
 8084030:	07d1      	lsls	r1, r2, #31
 8084032:	bf5c      	itt	pl
 8084034:	2201      	movpl	r2, #1
 8084036:	601a      	strpl	r2, [r3, #0]
 8084038:	4b14      	ldr	r3, [pc, #80]	; (808408c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808403a:	681a      	ldr	r2, [r3, #0]
 808403c:	07d2      	lsls	r2, r2, #31
 808403e:	bf5c      	itt	pl
 8084040:	2201      	movpl	r2, #1
 8084042:	601a      	strpl	r2, [r3, #0]
 8084044:	4b12      	ldr	r3, [pc, #72]	; (8084090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8084046:	681a      	ldr	r2, [r3, #0]
 8084048:	07d0      	lsls	r0, r2, #31
 808404a:	bf5c      	itt	pl
 808404c:	2201      	movpl	r2, #1
 808404e:	601a      	strpl	r2, [r3, #0]
 8084050:	4b10      	ldr	r3, [pc, #64]	; (8084094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8084052:	681a      	ldr	r2, [r3, #0]
 8084054:	07d1      	lsls	r1, r2, #31
 8084056:	bf5c      	itt	pl
 8084058:	2201      	movpl	r2, #1
 808405a:	601a      	strpl	r2, [r3, #0]
 808405c:	4b0e      	ldr	r3, [pc, #56]	; (8084098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808405e:	681a      	ldr	r2, [r3, #0]
 8084060:	07d2      	lsls	r2, r2, #31
 8084062:	bf5c      	itt	pl
 8084064:	2201      	movpl	r2, #1
 8084066:	601a      	strpl	r2, [r3, #0]
 8084068:	4770      	bx	lr
 808406a:	bf00      	nop
 808406c:	20000968 	.word	0x20000968
 8084070:	20000964 	.word	0x20000964
 8084074:	20000960 	.word	0x20000960
 8084078:	2000095c 	.word	0x2000095c
 808407c:	20000958 	.word	0x20000958
 8084080:	20000954 	.word	0x20000954
 8084084:	20000950 	.word	0x20000950
 8084088:	2000094c 	.word	0x2000094c
 808408c:	20000948 	.word	0x20000948
 8084090:	20000944 	.word	0x20000944
 8084094:	20000940 	.word	0x20000940
 8084098:	2000093c 	.word	0x2000093c

0808409c <__aeabi_drsub>:
 808409c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80840a0:	e002      	b.n	80840a8 <__adddf3>
 80840a2:	bf00      	nop

080840a4 <__aeabi_dsub>:
 80840a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080840a8 <__adddf3>:
 80840a8:	b530      	push	{r4, r5, lr}
 80840aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80840ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80840b2:	ea94 0f05 	teq	r4, r5
 80840b6:	bf08      	it	eq
 80840b8:	ea90 0f02 	teqeq	r0, r2
 80840bc:	bf1f      	itttt	ne
 80840be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80840c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80840c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80840ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80840ce:	f000 80e2 	beq.w	8084296 <__adddf3+0x1ee>
 80840d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80840d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80840da:	bfb8      	it	lt
 80840dc:	426d      	neglt	r5, r5
 80840de:	dd0c      	ble.n	80840fa <__adddf3+0x52>
 80840e0:	442c      	add	r4, r5
 80840e2:	ea80 0202 	eor.w	r2, r0, r2
 80840e6:	ea81 0303 	eor.w	r3, r1, r3
 80840ea:	ea82 0000 	eor.w	r0, r2, r0
 80840ee:	ea83 0101 	eor.w	r1, r3, r1
 80840f2:	ea80 0202 	eor.w	r2, r0, r2
 80840f6:	ea81 0303 	eor.w	r3, r1, r3
 80840fa:	2d36      	cmp	r5, #54	; 0x36
 80840fc:	bf88      	it	hi
 80840fe:	bd30      	pophi	{r4, r5, pc}
 8084100:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084104:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084108:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808410c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8084110:	d002      	beq.n	8084118 <__adddf3+0x70>
 8084112:	4240      	negs	r0, r0
 8084114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084118:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808411c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084120:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8084124:	d002      	beq.n	808412c <__adddf3+0x84>
 8084126:	4252      	negs	r2, r2
 8084128:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808412c:	ea94 0f05 	teq	r4, r5
 8084130:	f000 80a7 	beq.w	8084282 <__adddf3+0x1da>
 8084134:	f1a4 0401 	sub.w	r4, r4, #1
 8084138:	f1d5 0e20 	rsbs	lr, r5, #32
 808413c:	db0d      	blt.n	808415a <__adddf3+0xb2>
 808413e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8084142:	fa22 f205 	lsr.w	r2, r2, r5
 8084146:	1880      	adds	r0, r0, r2
 8084148:	f141 0100 	adc.w	r1, r1, #0
 808414c:	fa03 f20e 	lsl.w	r2, r3, lr
 8084150:	1880      	adds	r0, r0, r2
 8084152:	fa43 f305 	asr.w	r3, r3, r5
 8084156:	4159      	adcs	r1, r3
 8084158:	e00e      	b.n	8084178 <__adddf3+0xd0>
 808415a:	f1a5 0520 	sub.w	r5, r5, #32
 808415e:	f10e 0e20 	add.w	lr, lr, #32
 8084162:	2a01      	cmp	r2, #1
 8084164:	fa03 fc0e 	lsl.w	ip, r3, lr
 8084168:	bf28      	it	cs
 808416a:	f04c 0c02 	orrcs.w	ip, ip, #2
 808416e:	fa43 f305 	asr.w	r3, r3, r5
 8084172:	18c0      	adds	r0, r0, r3
 8084174:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8084178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808417c:	d507      	bpl.n	808418e <__adddf3+0xe6>
 808417e:	f04f 0e00 	mov.w	lr, #0
 8084182:	f1dc 0c00 	rsbs	ip, ip, #0
 8084186:	eb7e 0000 	sbcs.w	r0, lr, r0
 808418a:	eb6e 0101 	sbc.w	r1, lr, r1
 808418e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8084192:	d31b      	bcc.n	80841cc <__adddf3+0x124>
 8084194:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8084198:	d30c      	bcc.n	80841b4 <__adddf3+0x10c>
 808419a:	0849      	lsrs	r1, r1, #1
 808419c:	ea5f 0030 	movs.w	r0, r0, rrx
 80841a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80841a4:	f104 0401 	add.w	r4, r4, #1
 80841a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80841ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80841b0:	f080 809a 	bcs.w	80842e8 <__adddf3+0x240>
 80841b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80841b8:	bf08      	it	eq
 80841ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80841be:	f150 0000 	adcs.w	r0, r0, #0
 80841c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80841c6:	ea41 0105 	orr.w	r1, r1, r5
 80841ca:	bd30      	pop	{r4, r5, pc}
 80841cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80841d0:	4140      	adcs	r0, r0
 80841d2:	eb41 0101 	adc.w	r1, r1, r1
 80841d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80841da:	f1a4 0401 	sub.w	r4, r4, #1
 80841de:	d1e9      	bne.n	80841b4 <__adddf3+0x10c>
 80841e0:	f091 0f00 	teq	r1, #0
 80841e4:	bf04      	itt	eq
 80841e6:	4601      	moveq	r1, r0
 80841e8:	2000      	moveq	r0, #0
 80841ea:	fab1 f381 	clz	r3, r1
 80841ee:	bf08      	it	eq
 80841f0:	3320      	addeq	r3, #32
 80841f2:	f1a3 030b 	sub.w	r3, r3, #11
 80841f6:	f1b3 0220 	subs.w	r2, r3, #32
 80841fa:	da0c      	bge.n	8084216 <__adddf3+0x16e>
 80841fc:	320c      	adds	r2, #12
 80841fe:	dd08      	ble.n	8084212 <__adddf3+0x16a>
 8084200:	f102 0c14 	add.w	ip, r2, #20
 8084204:	f1c2 020c 	rsb	r2, r2, #12
 8084208:	fa01 f00c 	lsl.w	r0, r1, ip
 808420c:	fa21 f102 	lsr.w	r1, r1, r2
 8084210:	e00c      	b.n	808422c <__adddf3+0x184>
 8084212:	f102 0214 	add.w	r2, r2, #20
 8084216:	bfd8      	it	le
 8084218:	f1c2 0c20 	rsble	ip, r2, #32
 808421c:	fa01 f102 	lsl.w	r1, r1, r2
 8084220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8084224:	bfdc      	itt	le
 8084226:	ea41 010c 	orrle.w	r1, r1, ip
 808422a:	4090      	lslle	r0, r2
 808422c:	1ae4      	subs	r4, r4, r3
 808422e:	bfa2      	ittt	ge
 8084230:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8084234:	4329      	orrge	r1, r5
 8084236:	bd30      	popge	{r4, r5, pc}
 8084238:	ea6f 0404 	mvn.w	r4, r4
 808423c:	3c1f      	subs	r4, #31
 808423e:	da1c      	bge.n	808427a <__adddf3+0x1d2>
 8084240:	340c      	adds	r4, #12
 8084242:	dc0e      	bgt.n	8084262 <__adddf3+0x1ba>
 8084244:	f104 0414 	add.w	r4, r4, #20
 8084248:	f1c4 0220 	rsb	r2, r4, #32
 808424c:	fa20 f004 	lsr.w	r0, r0, r4
 8084250:	fa01 f302 	lsl.w	r3, r1, r2
 8084254:	ea40 0003 	orr.w	r0, r0, r3
 8084258:	fa21 f304 	lsr.w	r3, r1, r4
 808425c:	ea45 0103 	orr.w	r1, r5, r3
 8084260:	bd30      	pop	{r4, r5, pc}
 8084262:	f1c4 040c 	rsb	r4, r4, #12
 8084266:	f1c4 0220 	rsb	r2, r4, #32
 808426a:	fa20 f002 	lsr.w	r0, r0, r2
 808426e:	fa01 f304 	lsl.w	r3, r1, r4
 8084272:	ea40 0003 	orr.w	r0, r0, r3
 8084276:	4629      	mov	r1, r5
 8084278:	bd30      	pop	{r4, r5, pc}
 808427a:	fa21 f004 	lsr.w	r0, r1, r4
 808427e:	4629      	mov	r1, r5
 8084280:	bd30      	pop	{r4, r5, pc}
 8084282:	f094 0f00 	teq	r4, #0
 8084286:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808428a:	bf06      	itte	eq
 808428c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8084290:	3401      	addeq	r4, #1
 8084292:	3d01      	subne	r5, #1
 8084294:	e74e      	b.n	8084134 <__adddf3+0x8c>
 8084296:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808429a:	bf18      	it	ne
 808429c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80842a0:	d029      	beq.n	80842f6 <__adddf3+0x24e>
 80842a2:	ea94 0f05 	teq	r4, r5
 80842a6:	bf08      	it	eq
 80842a8:	ea90 0f02 	teqeq	r0, r2
 80842ac:	d005      	beq.n	80842ba <__adddf3+0x212>
 80842ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80842b2:	bf04      	itt	eq
 80842b4:	4619      	moveq	r1, r3
 80842b6:	4610      	moveq	r0, r2
 80842b8:	bd30      	pop	{r4, r5, pc}
 80842ba:	ea91 0f03 	teq	r1, r3
 80842be:	bf1e      	ittt	ne
 80842c0:	2100      	movne	r1, #0
 80842c2:	2000      	movne	r0, #0
 80842c4:	bd30      	popne	{r4, r5, pc}
 80842c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80842ca:	d105      	bne.n	80842d8 <__adddf3+0x230>
 80842cc:	0040      	lsls	r0, r0, #1
 80842ce:	4149      	adcs	r1, r1
 80842d0:	bf28      	it	cs
 80842d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80842d6:	bd30      	pop	{r4, r5, pc}
 80842d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80842dc:	bf3c      	itt	cc
 80842de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80842e2:	bd30      	popcc	{r4, r5, pc}
 80842e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80842e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80842ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80842f0:	f04f 0000 	mov.w	r0, #0
 80842f4:	bd30      	pop	{r4, r5, pc}
 80842f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80842fa:	bf1a      	itte	ne
 80842fc:	4619      	movne	r1, r3
 80842fe:	4610      	movne	r0, r2
 8084300:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8084304:	bf1c      	itt	ne
 8084306:	460b      	movne	r3, r1
 8084308:	4602      	movne	r2, r0
 808430a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808430e:	bf06      	itte	eq
 8084310:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8084314:	ea91 0f03 	teqeq	r1, r3
 8084318:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808431c:	bd30      	pop	{r4, r5, pc}
 808431e:	bf00      	nop

08084320 <__aeabi_ui2d>:
 8084320:	f090 0f00 	teq	r0, #0
 8084324:	bf04      	itt	eq
 8084326:	2100      	moveq	r1, #0
 8084328:	4770      	bxeq	lr
 808432a:	b530      	push	{r4, r5, lr}
 808432c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084330:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084334:	f04f 0500 	mov.w	r5, #0
 8084338:	f04f 0100 	mov.w	r1, #0
 808433c:	e750      	b.n	80841e0 <__adddf3+0x138>
 808433e:	bf00      	nop

08084340 <__aeabi_i2d>:
 8084340:	f090 0f00 	teq	r0, #0
 8084344:	bf04      	itt	eq
 8084346:	2100      	moveq	r1, #0
 8084348:	4770      	bxeq	lr
 808434a:	b530      	push	{r4, r5, lr}
 808434c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084350:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084354:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8084358:	bf48      	it	mi
 808435a:	4240      	negmi	r0, r0
 808435c:	f04f 0100 	mov.w	r1, #0
 8084360:	e73e      	b.n	80841e0 <__adddf3+0x138>
 8084362:	bf00      	nop

08084364 <__aeabi_f2d>:
 8084364:	0042      	lsls	r2, r0, #1
 8084366:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808436a:	ea4f 0131 	mov.w	r1, r1, rrx
 808436e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8084372:	bf1f      	itttt	ne
 8084374:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8084378:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808437c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8084380:	4770      	bxne	lr
 8084382:	f092 0f00 	teq	r2, #0
 8084386:	bf14      	ite	ne
 8084388:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808438c:	4770      	bxeq	lr
 808438e:	b530      	push	{r4, r5, lr}
 8084390:	f44f 7460 	mov.w	r4, #896	; 0x380
 8084394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808439c:	e720      	b.n	80841e0 <__adddf3+0x138>
 808439e:	bf00      	nop

080843a0 <__aeabi_ul2d>:
 80843a0:	ea50 0201 	orrs.w	r2, r0, r1
 80843a4:	bf08      	it	eq
 80843a6:	4770      	bxeq	lr
 80843a8:	b530      	push	{r4, r5, lr}
 80843aa:	f04f 0500 	mov.w	r5, #0
 80843ae:	e00a      	b.n	80843c6 <__aeabi_l2d+0x16>

080843b0 <__aeabi_l2d>:
 80843b0:	ea50 0201 	orrs.w	r2, r0, r1
 80843b4:	bf08      	it	eq
 80843b6:	4770      	bxeq	lr
 80843b8:	b530      	push	{r4, r5, lr}
 80843ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80843be:	d502      	bpl.n	80843c6 <__aeabi_l2d+0x16>
 80843c0:	4240      	negs	r0, r0
 80843c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80843c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80843ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80843ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80843d2:	f43f aedc 	beq.w	808418e <__adddf3+0xe6>
 80843d6:	f04f 0203 	mov.w	r2, #3
 80843da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80843de:	bf18      	it	ne
 80843e0:	3203      	addne	r2, #3
 80843e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80843e6:	bf18      	it	ne
 80843e8:	3203      	addne	r2, #3
 80843ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80843ee:	f1c2 0320 	rsb	r3, r2, #32
 80843f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80843f6:	fa20 f002 	lsr.w	r0, r0, r2
 80843fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80843fe:	ea40 000e 	orr.w	r0, r0, lr
 8084402:	fa21 f102 	lsr.w	r1, r1, r2
 8084406:	4414      	add	r4, r2
 8084408:	e6c1      	b.n	808418e <__adddf3+0xe6>
 808440a:	bf00      	nop

0808440c <__aeabi_dmul>:
 808440c:	b570      	push	{r4, r5, r6, lr}
 808440e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084412:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084416:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808441a:	bf1d      	ittte	ne
 808441c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084420:	ea94 0f0c 	teqne	r4, ip
 8084424:	ea95 0f0c 	teqne	r5, ip
 8084428:	f000 f8de 	bleq	80845e8 <__aeabi_dmul+0x1dc>
 808442c:	442c      	add	r4, r5
 808442e:	ea81 0603 	eor.w	r6, r1, r3
 8084432:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8084436:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808443a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808443e:	bf18      	it	ne
 8084440:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8084444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808444c:	d038      	beq.n	80844c0 <__aeabi_dmul+0xb4>
 808444e:	fba0 ce02 	umull	ip, lr, r0, r2
 8084452:	f04f 0500 	mov.w	r5, #0
 8084456:	fbe1 e502 	umlal	lr, r5, r1, r2
 808445a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808445e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8084462:	f04f 0600 	mov.w	r6, #0
 8084466:	fbe1 5603 	umlal	r5, r6, r1, r3
 808446a:	f09c 0f00 	teq	ip, #0
 808446e:	bf18      	it	ne
 8084470:	f04e 0e01 	orrne.w	lr, lr, #1
 8084474:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084478:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808447c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8084480:	d204      	bcs.n	808448c <__aeabi_dmul+0x80>
 8084482:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8084486:	416d      	adcs	r5, r5
 8084488:	eb46 0606 	adc.w	r6, r6, r6
 808448c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8084490:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8084494:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8084498:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808449c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80844a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80844a4:	bf88      	it	hi
 80844a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80844aa:	d81e      	bhi.n	80844ea <__aeabi_dmul+0xde>
 80844ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80844b0:	bf08      	it	eq
 80844b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80844b6:	f150 0000 	adcs.w	r0, r0, #0
 80844ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80844be:	bd70      	pop	{r4, r5, r6, pc}
 80844c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80844c4:	ea46 0101 	orr.w	r1, r6, r1
 80844c8:	ea40 0002 	orr.w	r0, r0, r2
 80844cc:	ea81 0103 	eor.w	r1, r1, r3
 80844d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80844d4:	bfc2      	ittt	gt
 80844d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80844da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80844de:	bd70      	popgt	{r4, r5, r6, pc}
 80844e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80844e4:	f04f 0e00 	mov.w	lr, #0
 80844e8:	3c01      	subs	r4, #1
 80844ea:	f300 80ab 	bgt.w	8084644 <__aeabi_dmul+0x238>
 80844ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80844f2:	bfde      	ittt	le
 80844f4:	2000      	movle	r0, #0
 80844f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80844fa:	bd70      	pople	{r4, r5, r6, pc}
 80844fc:	f1c4 0400 	rsb	r4, r4, #0
 8084500:	3c20      	subs	r4, #32
 8084502:	da35      	bge.n	8084570 <__aeabi_dmul+0x164>
 8084504:	340c      	adds	r4, #12
 8084506:	dc1b      	bgt.n	8084540 <__aeabi_dmul+0x134>
 8084508:	f104 0414 	add.w	r4, r4, #20
 808450c:	f1c4 0520 	rsb	r5, r4, #32
 8084510:	fa00 f305 	lsl.w	r3, r0, r5
 8084514:	fa20 f004 	lsr.w	r0, r0, r4
 8084518:	fa01 f205 	lsl.w	r2, r1, r5
 808451c:	ea40 0002 	orr.w	r0, r0, r2
 8084520:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8084524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084528:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808452c:	fa21 f604 	lsr.w	r6, r1, r4
 8084530:	eb42 0106 	adc.w	r1, r2, r6
 8084534:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084538:	bf08      	it	eq
 808453a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808453e:	bd70      	pop	{r4, r5, r6, pc}
 8084540:	f1c4 040c 	rsb	r4, r4, #12
 8084544:	f1c4 0520 	rsb	r5, r4, #32
 8084548:	fa00 f304 	lsl.w	r3, r0, r4
 808454c:	fa20 f005 	lsr.w	r0, r0, r5
 8084550:	fa01 f204 	lsl.w	r2, r1, r4
 8084554:	ea40 0002 	orr.w	r0, r0, r2
 8084558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808455c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8084560:	f141 0100 	adc.w	r1, r1, #0
 8084564:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084568:	bf08      	it	eq
 808456a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808456e:	bd70      	pop	{r4, r5, r6, pc}
 8084570:	f1c4 0520 	rsb	r5, r4, #32
 8084574:	fa00 f205 	lsl.w	r2, r0, r5
 8084578:	ea4e 0e02 	orr.w	lr, lr, r2
 808457c:	fa20 f304 	lsr.w	r3, r0, r4
 8084580:	fa01 f205 	lsl.w	r2, r1, r5
 8084584:	ea43 0302 	orr.w	r3, r3, r2
 8084588:	fa21 f004 	lsr.w	r0, r1, r4
 808458c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084590:	fa21 f204 	lsr.w	r2, r1, r4
 8084594:	ea20 0002 	bic.w	r0, r0, r2
 8084598:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808459c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80845a0:	bf08      	it	eq
 80845a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80845a6:	bd70      	pop	{r4, r5, r6, pc}
 80845a8:	f094 0f00 	teq	r4, #0
 80845ac:	d10f      	bne.n	80845ce <__aeabi_dmul+0x1c2>
 80845ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80845b2:	0040      	lsls	r0, r0, #1
 80845b4:	eb41 0101 	adc.w	r1, r1, r1
 80845b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80845bc:	bf08      	it	eq
 80845be:	3c01      	subeq	r4, #1
 80845c0:	d0f7      	beq.n	80845b2 <__aeabi_dmul+0x1a6>
 80845c2:	ea41 0106 	orr.w	r1, r1, r6
 80845c6:	f095 0f00 	teq	r5, #0
 80845ca:	bf18      	it	ne
 80845cc:	4770      	bxne	lr
 80845ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80845d2:	0052      	lsls	r2, r2, #1
 80845d4:	eb43 0303 	adc.w	r3, r3, r3
 80845d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80845dc:	bf08      	it	eq
 80845de:	3d01      	subeq	r5, #1
 80845e0:	d0f7      	beq.n	80845d2 <__aeabi_dmul+0x1c6>
 80845e2:	ea43 0306 	orr.w	r3, r3, r6
 80845e6:	4770      	bx	lr
 80845e8:	ea94 0f0c 	teq	r4, ip
 80845ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80845f0:	bf18      	it	ne
 80845f2:	ea95 0f0c 	teqne	r5, ip
 80845f6:	d00c      	beq.n	8084612 <__aeabi_dmul+0x206>
 80845f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80845fc:	bf18      	it	ne
 80845fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084602:	d1d1      	bne.n	80845a8 <__aeabi_dmul+0x19c>
 8084604:	ea81 0103 	eor.w	r1, r1, r3
 8084608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808460c:	f04f 0000 	mov.w	r0, #0
 8084610:	bd70      	pop	{r4, r5, r6, pc}
 8084612:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084616:	bf06      	itte	eq
 8084618:	4610      	moveq	r0, r2
 808461a:	4619      	moveq	r1, r3
 808461c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084620:	d019      	beq.n	8084656 <__aeabi_dmul+0x24a>
 8084622:	ea94 0f0c 	teq	r4, ip
 8084626:	d102      	bne.n	808462e <__aeabi_dmul+0x222>
 8084628:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808462c:	d113      	bne.n	8084656 <__aeabi_dmul+0x24a>
 808462e:	ea95 0f0c 	teq	r5, ip
 8084632:	d105      	bne.n	8084640 <__aeabi_dmul+0x234>
 8084634:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8084638:	bf1c      	itt	ne
 808463a:	4610      	movne	r0, r2
 808463c:	4619      	movne	r1, r3
 808463e:	d10a      	bne.n	8084656 <__aeabi_dmul+0x24a>
 8084640:	ea81 0103 	eor.w	r1, r1, r3
 8084644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084648:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808464c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084650:	f04f 0000 	mov.w	r0, #0
 8084654:	bd70      	pop	{r4, r5, r6, pc}
 8084656:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808465a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808465e:	bd70      	pop	{r4, r5, r6, pc}

08084660 <__aeabi_ddiv>:
 8084660:	b570      	push	{r4, r5, r6, lr}
 8084662:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084666:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808466a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808466e:	bf1d      	ittte	ne
 8084670:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084674:	ea94 0f0c 	teqne	r4, ip
 8084678:	ea95 0f0c 	teqne	r5, ip
 808467c:	f000 f8a7 	bleq	80847ce <__aeabi_ddiv+0x16e>
 8084680:	eba4 0405 	sub.w	r4, r4, r5
 8084684:	ea81 0e03 	eor.w	lr, r1, r3
 8084688:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808468c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084690:	f000 8088 	beq.w	80847a4 <__aeabi_ddiv+0x144>
 8084694:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084698:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808469c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80846a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80846a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80846a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80846ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80846b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80846b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80846b8:	429d      	cmp	r5, r3
 80846ba:	bf08      	it	eq
 80846bc:	4296      	cmpeq	r6, r2
 80846be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80846c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80846c6:	d202      	bcs.n	80846ce <__aeabi_ddiv+0x6e>
 80846c8:	085b      	lsrs	r3, r3, #1
 80846ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80846ce:	1ab6      	subs	r6, r6, r2
 80846d0:	eb65 0503 	sbc.w	r5, r5, r3
 80846d4:	085b      	lsrs	r3, r3, #1
 80846d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80846da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80846de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80846e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80846e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80846ea:	bf22      	ittt	cs
 80846ec:	1ab6      	subcs	r6, r6, r2
 80846ee:	4675      	movcs	r5, lr
 80846f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80846f4:	085b      	lsrs	r3, r3, #1
 80846f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80846fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80846fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084702:	bf22      	ittt	cs
 8084704:	1ab6      	subcs	r6, r6, r2
 8084706:	4675      	movcs	r5, lr
 8084708:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808470c:	085b      	lsrs	r3, r3, #1
 808470e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084712:	ebb6 0e02 	subs.w	lr, r6, r2
 8084716:	eb75 0e03 	sbcs.w	lr, r5, r3
 808471a:	bf22      	ittt	cs
 808471c:	1ab6      	subcs	r6, r6, r2
 808471e:	4675      	movcs	r5, lr
 8084720:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084724:	085b      	lsrs	r3, r3, #1
 8084726:	ea4f 0232 	mov.w	r2, r2, rrx
 808472a:	ebb6 0e02 	subs.w	lr, r6, r2
 808472e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084732:	bf22      	ittt	cs
 8084734:	1ab6      	subcs	r6, r6, r2
 8084736:	4675      	movcs	r5, lr
 8084738:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808473c:	ea55 0e06 	orrs.w	lr, r5, r6
 8084740:	d018      	beq.n	8084774 <__aeabi_ddiv+0x114>
 8084742:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084746:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808474a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808474e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8084752:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084756:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808475a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808475e:	d1c0      	bne.n	80846e2 <__aeabi_ddiv+0x82>
 8084760:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084764:	d10b      	bne.n	808477e <__aeabi_ddiv+0x11e>
 8084766:	ea41 0100 	orr.w	r1, r1, r0
 808476a:	f04f 0000 	mov.w	r0, #0
 808476e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8084772:	e7b6      	b.n	80846e2 <__aeabi_ddiv+0x82>
 8084774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084778:	bf04      	itt	eq
 808477a:	4301      	orreq	r1, r0
 808477c:	2000      	moveq	r0, #0
 808477e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084782:	bf88      	it	hi
 8084784:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084788:	f63f aeaf 	bhi.w	80844ea <__aeabi_dmul+0xde>
 808478c:	ebb5 0c03 	subs.w	ip, r5, r3
 8084790:	bf04      	itt	eq
 8084792:	ebb6 0c02 	subseq.w	ip, r6, r2
 8084796:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808479a:	f150 0000 	adcs.w	r0, r0, #0
 808479e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80847a2:	bd70      	pop	{r4, r5, r6, pc}
 80847a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80847a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80847ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80847b0:	bfc2      	ittt	gt
 80847b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80847b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80847ba:	bd70      	popgt	{r4, r5, r6, pc}
 80847bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80847c0:	f04f 0e00 	mov.w	lr, #0
 80847c4:	3c01      	subs	r4, #1
 80847c6:	e690      	b.n	80844ea <__aeabi_dmul+0xde>
 80847c8:	ea45 0e06 	orr.w	lr, r5, r6
 80847cc:	e68d      	b.n	80844ea <__aeabi_dmul+0xde>
 80847ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80847d2:	ea94 0f0c 	teq	r4, ip
 80847d6:	bf08      	it	eq
 80847d8:	ea95 0f0c 	teqeq	r5, ip
 80847dc:	f43f af3b 	beq.w	8084656 <__aeabi_dmul+0x24a>
 80847e0:	ea94 0f0c 	teq	r4, ip
 80847e4:	d10a      	bne.n	80847fc <__aeabi_ddiv+0x19c>
 80847e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80847ea:	f47f af34 	bne.w	8084656 <__aeabi_dmul+0x24a>
 80847ee:	ea95 0f0c 	teq	r5, ip
 80847f2:	f47f af25 	bne.w	8084640 <__aeabi_dmul+0x234>
 80847f6:	4610      	mov	r0, r2
 80847f8:	4619      	mov	r1, r3
 80847fa:	e72c      	b.n	8084656 <__aeabi_dmul+0x24a>
 80847fc:	ea95 0f0c 	teq	r5, ip
 8084800:	d106      	bne.n	8084810 <__aeabi_ddiv+0x1b0>
 8084802:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084806:	f43f aefd 	beq.w	8084604 <__aeabi_dmul+0x1f8>
 808480a:	4610      	mov	r0, r2
 808480c:	4619      	mov	r1, r3
 808480e:	e722      	b.n	8084656 <__aeabi_dmul+0x24a>
 8084810:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084814:	bf18      	it	ne
 8084816:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808481a:	f47f aec5 	bne.w	80845a8 <__aeabi_dmul+0x19c>
 808481e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084822:	f47f af0d 	bne.w	8084640 <__aeabi_dmul+0x234>
 8084826:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808482a:	f47f aeeb 	bne.w	8084604 <__aeabi_dmul+0x1f8>
 808482e:	e712      	b.n	8084656 <__aeabi_dmul+0x24a>

08084830 <__aeabi_d2iz>:
 8084830:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084834:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084838:	d215      	bcs.n	8084866 <__aeabi_d2iz+0x36>
 808483a:	d511      	bpl.n	8084860 <__aeabi_d2iz+0x30>
 808483c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084840:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084844:	d912      	bls.n	808486c <__aeabi_d2iz+0x3c>
 8084846:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808484a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808484e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084852:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084856:	fa23 f002 	lsr.w	r0, r3, r2
 808485a:	bf18      	it	ne
 808485c:	4240      	negne	r0, r0
 808485e:	4770      	bx	lr
 8084860:	f04f 0000 	mov.w	r0, #0
 8084864:	4770      	bx	lr
 8084866:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808486a:	d105      	bne.n	8084878 <__aeabi_d2iz+0x48>
 808486c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8084870:	bf08      	it	eq
 8084872:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084876:	4770      	bx	lr
 8084878:	f04f 0000 	mov.w	r0, #0
 808487c:	4770      	bx	lr
 808487e:	bf00      	nop

08084880 <__aeabi_d2f>:
 8084880:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084884:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8084888:	bf24      	itt	cs
 808488a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808488e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8084892:	d90d      	bls.n	80848b0 <__aeabi_d2f+0x30>
 8084894:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084898:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808489c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80848a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80848a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80848a8:	bf08      	it	eq
 80848aa:	f020 0001 	biceq.w	r0, r0, #1
 80848ae:	4770      	bx	lr
 80848b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80848b4:	d121      	bne.n	80848fa <__aeabi_d2f+0x7a>
 80848b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80848ba:	bfbc      	itt	lt
 80848bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80848c0:	4770      	bxlt	lr
 80848c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80848c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80848ca:	f1c2 0218 	rsb	r2, r2, #24
 80848ce:	f1c2 0c20 	rsb	ip, r2, #32
 80848d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80848d6:	fa20 f002 	lsr.w	r0, r0, r2
 80848da:	bf18      	it	ne
 80848dc:	f040 0001 	orrne.w	r0, r0, #1
 80848e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80848e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80848e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80848ec:	ea40 000c 	orr.w	r0, r0, ip
 80848f0:	fa23 f302 	lsr.w	r3, r3, r2
 80848f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80848f8:	e7cc      	b.n	8084894 <__aeabi_d2f+0x14>
 80848fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80848fe:	d107      	bne.n	8084910 <__aeabi_d2f+0x90>
 8084900:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084904:	bf1e      	ittt	ne
 8084906:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808490a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808490e:	4770      	bxne	lr
 8084910:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084914:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084918:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808491c:	4770      	bx	lr
 808491e:	bf00      	nop

08084920 <__aeabi_frsub>:
 8084920:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084924:	e002      	b.n	808492c <__addsf3>
 8084926:	bf00      	nop

08084928 <__aeabi_fsub>:
 8084928:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808492c <__addsf3>:
 808492c:	0042      	lsls	r2, r0, #1
 808492e:	bf1f      	itttt	ne
 8084930:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084934:	ea92 0f03 	teqne	r2, r3
 8084938:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808493c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084940:	d06a      	beq.n	8084a18 <__addsf3+0xec>
 8084942:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084946:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808494a:	bfc1      	itttt	gt
 808494c:	18d2      	addgt	r2, r2, r3
 808494e:	4041      	eorgt	r1, r0
 8084950:	4048      	eorgt	r0, r1
 8084952:	4041      	eorgt	r1, r0
 8084954:	bfb8      	it	lt
 8084956:	425b      	neglt	r3, r3
 8084958:	2b19      	cmp	r3, #25
 808495a:	bf88      	it	hi
 808495c:	4770      	bxhi	lr
 808495e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084962:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084966:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808496a:	bf18      	it	ne
 808496c:	4240      	negne	r0, r0
 808496e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084972:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8084976:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808497a:	bf18      	it	ne
 808497c:	4249      	negne	r1, r1
 808497e:	ea92 0f03 	teq	r2, r3
 8084982:	d03f      	beq.n	8084a04 <__addsf3+0xd8>
 8084984:	f1a2 0201 	sub.w	r2, r2, #1
 8084988:	fa41 fc03 	asr.w	ip, r1, r3
 808498c:	eb10 000c 	adds.w	r0, r0, ip
 8084990:	f1c3 0320 	rsb	r3, r3, #32
 8084994:	fa01 f103 	lsl.w	r1, r1, r3
 8084998:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808499c:	d502      	bpl.n	80849a4 <__addsf3+0x78>
 808499e:	4249      	negs	r1, r1
 80849a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80849a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80849a8:	d313      	bcc.n	80849d2 <__addsf3+0xa6>
 80849aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80849ae:	d306      	bcc.n	80849be <__addsf3+0x92>
 80849b0:	0840      	lsrs	r0, r0, #1
 80849b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80849b6:	f102 0201 	add.w	r2, r2, #1
 80849ba:	2afe      	cmp	r2, #254	; 0xfe
 80849bc:	d251      	bcs.n	8084a62 <__addsf3+0x136>
 80849be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80849c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80849c6:	bf08      	it	eq
 80849c8:	f020 0001 	biceq.w	r0, r0, #1
 80849cc:	ea40 0003 	orr.w	r0, r0, r3
 80849d0:	4770      	bx	lr
 80849d2:	0049      	lsls	r1, r1, #1
 80849d4:	eb40 0000 	adc.w	r0, r0, r0
 80849d8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80849dc:	f1a2 0201 	sub.w	r2, r2, #1
 80849e0:	d1ed      	bne.n	80849be <__addsf3+0x92>
 80849e2:	fab0 fc80 	clz	ip, r0
 80849e6:	f1ac 0c08 	sub.w	ip, ip, #8
 80849ea:	ebb2 020c 	subs.w	r2, r2, ip
 80849ee:	fa00 f00c 	lsl.w	r0, r0, ip
 80849f2:	bfaa      	itet	ge
 80849f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80849f8:	4252      	neglt	r2, r2
 80849fa:	4318      	orrge	r0, r3
 80849fc:	bfbc      	itt	lt
 80849fe:	40d0      	lsrlt	r0, r2
 8084a00:	4318      	orrlt	r0, r3
 8084a02:	4770      	bx	lr
 8084a04:	f092 0f00 	teq	r2, #0
 8084a08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084a0c:	bf06      	itte	eq
 8084a0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8084a12:	3201      	addeq	r2, #1
 8084a14:	3b01      	subne	r3, #1
 8084a16:	e7b5      	b.n	8084984 <__addsf3+0x58>
 8084a18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084a1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084a20:	bf18      	it	ne
 8084a22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084a26:	d021      	beq.n	8084a6c <__addsf3+0x140>
 8084a28:	ea92 0f03 	teq	r2, r3
 8084a2c:	d004      	beq.n	8084a38 <__addsf3+0x10c>
 8084a2e:	f092 0f00 	teq	r2, #0
 8084a32:	bf08      	it	eq
 8084a34:	4608      	moveq	r0, r1
 8084a36:	4770      	bx	lr
 8084a38:	ea90 0f01 	teq	r0, r1
 8084a3c:	bf1c      	itt	ne
 8084a3e:	2000      	movne	r0, #0
 8084a40:	4770      	bxne	lr
 8084a42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084a46:	d104      	bne.n	8084a52 <__addsf3+0x126>
 8084a48:	0040      	lsls	r0, r0, #1
 8084a4a:	bf28      	it	cs
 8084a4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084a50:	4770      	bx	lr
 8084a52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084a56:	bf3c      	itt	cc
 8084a58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8084a5c:	4770      	bxcc	lr
 8084a5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084a62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8084a66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084a6a:	4770      	bx	lr
 8084a6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8084a70:	bf16      	itet	ne
 8084a72:	4608      	movne	r0, r1
 8084a74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8084a78:	4601      	movne	r1, r0
 8084a7a:	0242      	lsls	r2, r0, #9
 8084a7c:	bf06      	itte	eq
 8084a7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8084a82:	ea90 0f01 	teqeq	r0, r1
 8084a86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8084a8a:	4770      	bx	lr

08084a8c <__aeabi_ui2f>:
 8084a8c:	f04f 0300 	mov.w	r3, #0
 8084a90:	e004      	b.n	8084a9c <__aeabi_i2f+0x8>
 8084a92:	bf00      	nop

08084a94 <__aeabi_i2f>:
 8084a94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8084a98:	bf48      	it	mi
 8084a9a:	4240      	negmi	r0, r0
 8084a9c:	ea5f 0c00 	movs.w	ip, r0
 8084aa0:	bf08      	it	eq
 8084aa2:	4770      	bxeq	lr
 8084aa4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8084aa8:	4601      	mov	r1, r0
 8084aaa:	f04f 0000 	mov.w	r0, #0
 8084aae:	e01c      	b.n	8084aea <__aeabi_l2f+0x2a>

08084ab0 <__aeabi_ul2f>:
 8084ab0:	ea50 0201 	orrs.w	r2, r0, r1
 8084ab4:	bf08      	it	eq
 8084ab6:	4770      	bxeq	lr
 8084ab8:	f04f 0300 	mov.w	r3, #0
 8084abc:	e00a      	b.n	8084ad4 <__aeabi_l2f+0x14>
 8084abe:	bf00      	nop

08084ac0 <__aeabi_l2f>:
 8084ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8084ac4:	bf08      	it	eq
 8084ac6:	4770      	bxeq	lr
 8084ac8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084acc:	d502      	bpl.n	8084ad4 <__aeabi_l2f+0x14>
 8084ace:	4240      	negs	r0, r0
 8084ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084ad4:	ea5f 0c01 	movs.w	ip, r1
 8084ad8:	bf02      	ittt	eq
 8084ada:	4684      	moveq	ip, r0
 8084adc:	4601      	moveq	r1, r0
 8084ade:	2000      	moveq	r0, #0
 8084ae0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084ae4:	bf08      	it	eq
 8084ae6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8084aea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8084aee:	fabc f28c 	clz	r2, ip
 8084af2:	3a08      	subs	r2, #8
 8084af4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084af8:	db10      	blt.n	8084b1c <__aeabi_l2f+0x5c>
 8084afa:	fa01 fc02 	lsl.w	ip, r1, r2
 8084afe:	4463      	add	r3, ip
 8084b00:	fa00 fc02 	lsl.w	ip, r0, r2
 8084b04:	f1c2 0220 	rsb	r2, r2, #32
 8084b08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8084b10:	eb43 0002 	adc.w	r0, r3, r2
 8084b14:	bf08      	it	eq
 8084b16:	f020 0001 	biceq.w	r0, r0, #1
 8084b1a:	4770      	bx	lr
 8084b1c:	f102 0220 	add.w	r2, r2, #32
 8084b20:	fa01 fc02 	lsl.w	ip, r1, r2
 8084b24:	f1c2 0220 	rsb	r2, r2, #32
 8084b28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084b2c:	fa21 f202 	lsr.w	r2, r1, r2
 8084b30:	eb43 0002 	adc.w	r0, r3, r2
 8084b34:	bf08      	it	eq
 8084b36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084b3a:	4770      	bx	lr

08084b3c <__aeabi_fmul>:
 8084b3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084b40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084b44:	bf1e      	ittt	ne
 8084b46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084b4a:	ea92 0f0c 	teqne	r2, ip
 8084b4e:	ea93 0f0c 	teqne	r3, ip
 8084b52:	d06f      	beq.n	8084c34 <__aeabi_fmul+0xf8>
 8084b54:	441a      	add	r2, r3
 8084b56:	ea80 0c01 	eor.w	ip, r0, r1
 8084b5a:	0240      	lsls	r0, r0, #9
 8084b5c:	bf18      	it	ne
 8084b5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084b62:	d01e      	beq.n	8084ba2 <__aeabi_fmul+0x66>
 8084b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084b68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084b6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084b70:	fba0 3101 	umull	r3, r1, r0, r1
 8084b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084b78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084b7c:	bf3e      	ittt	cc
 8084b7e:	0049      	lslcc	r1, r1, #1
 8084b80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084b84:	005b      	lslcc	r3, r3, #1
 8084b86:	ea40 0001 	orr.w	r0, r0, r1
 8084b8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8084b8e:	2afd      	cmp	r2, #253	; 0xfd
 8084b90:	d81d      	bhi.n	8084bce <__aeabi_fmul+0x92>
 8084b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084b9a:	bf08      	it	eq
 8084b9c:	f020 0001 	biceq.w	r0, r0, #1
 8084ba0:	4770      	bx	lr
 8084ba2:	f090 0f00 	teq	r0, #0
 8084ba6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084baa:	bf08      	it	eq
 8084bac:	0249      	lsleq	r1, r1, #9
 8084bae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084bb2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084bb6:	3a7f      	subs	r2, #127	; 0x7f
 8084bb8:	bfc2      	ittt	gt
 8084bba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084bbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084bc2:	4770      	bxgt	lr
 8084bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084bc8:	f04f 0300 	mov.w	r3, #0
 8084bcc:	3a01      	subs	r2, #1
 8084bce:	dc5d      	bgt.n	8084c8c <__aeabi_fmul+0x150>
 8084bd0:	f112 0f19 	cmn.w	r2, #25
 8084bd4:	bfdc      	itt	le
 8084bd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084bda:	4770      	bxle	lr
 8084bdc:	f1c2 0200 	rsb	r2, r2, #0
 8084be0:	0041      	lsls	r1, r0, #1
 8084be2:	fa21 f102 	lsr.w	r1, r1, r2
 8084be6:	f1c2 0220 	rsb	r2, r2, #32
 8084bea:	fa00 fc02 	lsl.w	ip, r0, r2
 8084bee:	ea5f 0031 	movs.w	r0, r1, rrx
 8084bf2:	f140 0000 	adc.w	r0, r0, #0
 8084bf6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084bfa:	bf08      	it	eq
 8084bfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084c00:	4770      	bx	lr
 8084c02:	f092 0f00 	teq	r2, #0
 8084c06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084c0a:	bf02      	ittt	eq
 8084c0c:	0040      	lsleq	r0, r0, #1
 8084c0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084c12:	3a01      	subeq	r2, #1
 8084c14:	d0f9      	beq.n	8084c0a <__aeabi_fmul+0xce>
 8084c16:	ea40 000c 	orr.w	r0, r0, ip
 8084c1a:	f093 0f00 	teq	r3, #0
 8084c1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084c22:	bf02      	ittt	eq
 8084c24:	0049      	lsleq	r1, r1, #1
 8084c26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084c2a:	3b01      	subeq	r3, #1
 8084c2c:	d0f9      	beq.n	8084c22 <__aeabi_fmul+0xe6>
 8084c2e:	ea41 010c 	orr.w	r1, r1, ip
 8084c32:	e78f      	b.n	8084b54 <__aeabi_fmul+0x18>
 8084c34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084c38:	ea92 0f0c 	teq	r2, ip
 8084c3c:	bf18      	it	ne
 8084c3e:	ea93 0f0c 	teqne	r3, ip
 8084c42:	d00a      	beq.n	8084c5a <__aeabi_fmul+0x11e>
 8084c44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084c48:	bf18      	it	ne
 8084c4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084c4e:	d1d8      	bne.n	8084c02 <__aeabi_fmul+0xc6>
 8084c50:	ea80 0001 	eor.w	r0, r0, r1
 8084c54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084c58:	4770      	bx	lr
 8084c5a:	f090 0f00 	teq	r0, #0
 8084c5e:	bf17      	itett	ne
 8084c60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084c64:	4608      	moveq	r0, r1
 8084c66:	f091 0f00 	teqne	r1, #0
 8084c6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8084c6e:	d014      	beq.n	8084c9a <__aeabi_fmul+0x15e>
 8084c70:	ea92 0f0c 	teq	r2, ip
 8084c74:	d101      	bne.n	8084c7a <__aeabi_fmul+0x13e>
 8084c76:	0242      	lsls	r2, r0, #9
 8084c78:	d10f      	bne.n	8084c9a <__aeabi_fmul+0x15e>
 8084c7a:	ea93 0f0c 	teq	r3, ip
 8084c7e:	d103      	bne.n	8084c88 <__aeabi_fmul+0x14c>
 8084c80:	024b      	lsls	r3, r1, #9
 8084c82:	bf18      	it	ne
 8084c84:	4608      	movne	r0, r1
 8084c86:	d108      	bne.n	8084c9a <__aeabi_fmul+0x15e>
 8084c88:	ea80 0001 	eor.w	r0, r0, r1
 8084c8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084c98:	4770      	bx	lr
 8084c9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084c9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8084ca2:	4770      	bx	lr

08084ca4 <__aeabi_fdiv>:
 8084ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084cac:	bf1e      	ittt	ne
 8084cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084cb2:	ea92 0f0c 	teqne	r2, ip
 8084cb6:	ea93 0f0c 	teqne	r3, ip
 8084cba:	d069      	beq.n	8084d90 <__aeabi_fdiv+0xec>
 8084cbc:	eba2 0203 	sub.w	r2, r2, r3
 8084cc0:	ea80 0c01 	eor.w	ip, r0, r1
 8084cc4:	0249      	lsls	r1, r1, #9
 8084cc6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8084cca:	d037      	beq.n	8084d3c <__aeabi_fdiv+0x98>
 8084ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084cd0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084cd4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084cd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084cdc:	428b      	cmp	r3, r1
 8084cde:	bf38      	it	cc
 8084ce0:	005b      	lslcc	r3, r3, #1
 8084ce2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084ce6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8084cea:	428b      	cmp	r3, r1
 8084cec:	bf24      	itt	cs
 8084cee:	1a5b      	subcs	r3, r3, r1
 8084cf0:	ea40 000c 	orrcs.w	r0, r0, ip
 8084cf4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084cf8:	bf24      	itt	cs
 8084cfa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8084cfe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084d02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084d06:	bf24      	itt	cs
 8084d08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084d0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084d10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084d14:	bf24      	itt	cs
 8084d16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8084d1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084d1e:	011b      	lsls	r3, r3, #4
 8084d20:	bf18      	it	ne
 8084d22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084d26:	d1e0      	bne.n	8084cea <__aeabi_fdiv+0x46>
 8084d28:	2afd      	cmp	r2, #253	; 0xfd
 8084d2a:	f63f af50 	bhi.w	8084bce <__aeabi_fmul+0x92>
 8084d2e:	428b      	cmp	r3, r1
 8084d30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084d34:	bf08      	it	eq
 8084d36:	f020 0001 	biceq.w	r0, r0, #1
 8084d3a:	4770      	bx	lr
 8084d3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084d40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084d44:	327f      	adds	r2, #127	; 0x7f
 8084d46:	bfc2      	ittt	gt
 8084d48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084d4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084d50:	4770      	bxgt	lr
 8084d52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084d56:	f04f 0300 	mov.w	r3, #0
 8084d5a:	3a01      	subs	r2, #1
 8084d5c:	e737      	b.n	8084bce <__aeabi_fmul+0x92>
 8084d5e:	f092 0f00 	teq	r2, #0
 8084d62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084d66:	bf02      	ittt	eq
 8084d68:	0040      	lsleq	r0, r0, #1
 8084d6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084d6e:	3a01      	subeq	r2, #1
 8084d70:	d0f9      	beq.n	8084d66 <__aeabi_fdiv+0xc2>
 8084d72:	ea40 000c 	orr.w	r0, r0, ip
 8084d76:	f093 0f00 	teq	r3, #0
 8084d7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084d7e:	bf02      	ittt	eq
 8084d80:	0049      	lsleq	r1, r1, #1
 8084d82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084d86:	3b01      	subeq	r3, #1
 8084d88:	d0f9      	beq.n	8084d7e <__aeabi_fdiv+0xda>
 8084d8a:	ea41 010c 	orr.w	r1, r1, ip
 8084d8e:	e795      	b.n	8084cbc <__aeabi_fdiv+0x18>
 8084d90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084d94:	ea92 0f0c 	teq	r2, ip
 8084d98:	d108      	bne.n	8084dac <__aeabi_fdiv+0x108>
 8084d9a:	0242      	lsls	r2, r0, #9
 8084d9c:	f47f af7d 	bne.w	8084c9a <__aeabi_fmul+0x15e>
 8084da0:	ea93 0f0c 	teq	r3, ip
 8084da4:	f47f af70 	bne.w	8084c88 <__aeabi_fmul+0x14c>
 8084da8:	4608      	mov	r0, r1
 8084daa:	e776      	b.n	8084c9a <__aeabi_fmul+0x15e>
 8084dac:	ea93 0f0c 	teq	r3, ip
 8084db0:	d104      	bne.n	8084dbc <__aeabi_fdiv+0x118>
 8084db2:	024b      	lsls	r3, r1, #9
 8084db4:	f43f af4c 	beq.w	8084c50 <__aeabi_fmul+0x114>
 8084db8:	4608      	mov	r0, r1
 8084dba:	e76e      	b.n	8084c9a <__aeabi_fmul+0x15e>
 8084dbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084dc0:	bf18      	it	ne
 8084dc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084dc6:	d1ca      	bne.n	8084d5e <__aeabi_fdiv+0xba>
 8084dc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8084dcc:	f47f af5c 	bne.w	8084c88 <__aeabi_fmul+0x14c>
 8084dd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084dd4:	f47f af3c 	bne.w	8084c50 <__aeabi_fmul+0x114>
 8084dd8:	e75f      	b.n	8084c9a <__aeabi_fmul+0x15e>
 8084dda:	bf00      	nop

08084ddc <__gesf2>:
 8084ddc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084de0:	e006      	b.n	8084df0 <__cmpsf2+0x4>
 8084de2:	bf00      	nop

08084de4 <__lesf2>:
 8084de4:	f04f 0c01 	mov.w	ip, #1
 8084de8:	e002      	b.n	8084df0 <__cmpsf2+0x4>
 8084dea:	bf00      	nop

08084dec <__cmpsf2>:
 8084dec:	f04f 0c01 	mov.w	ip, #1
 8084df0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084df4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084df8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084dfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084e00:	bf18      	it	ne
 8084e02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084e06:	d011      	beq.n	8084e2c <__cmpsf2+0x40>
 8084e08:	b001      	add	sp, #4
 8084e0a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8084e0e:	bf18      	it	ne
 8084e10:	ea90 0f01 	teqne	r0, r1
 8084e14:	bf58      	it	pl
 8084e16:	ebb2 0003 	subspl.w	r0, r2, r3
 8084e1a:	bf88      	it	hi
 8084e1c:	17c8      	asrhi	r0, r1, #31
 8084e1e:	bf38      	it	cc
 8084e20:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084e24:	bf18      	it	ne
 8084e26:	f040 0001 	orrne.w	r0, r0, #1
 8084e2a:	4770      	bx	lr
 8084e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084e30:	d102      	bne.n	8084e38 <__cmpsf2+0x4c>
 8084e32:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8084e36:	d105      	bne.n	8084e44 <__cmpsf2+0x58>
 8084e38:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8084e3c:	d1e4      	bne.n	8084e08 <__cmpsf2+0x1c>
 8084e3e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8084e42:	d0e1      	beq.n	8084e08 <__cmpsf2+0x1c>
 8084e44:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084e48:	4770      	bx	lr
 8084e4a:	bf00      	nop

08084e4c <__aeabi_cfrcmple>:
 8084e4c:	4684      	mov	ip, r0
 8084e4e:	4608      	mov	r0, r1
 8084e50:	4661      	mov	r1, ip
 8084e52:	e7ff      	b.n	8084e54 <__aeabi_cfcmpeq>

08084e54 <__aeabi_cfcmpeq>:
 8084e54:	b50f      	push	{r0, r1, r2, r3, lr}
 8084e56:	f7ff ffc9 	bl	8084dec <__cmpsf2>
 8084e5a:	2800      	cmp	r0, #0
 8084e5c:	bf48      	it	mi
 8084e5e:	f110 0f00 	cmnmi.w	r0, #0
 8084e62:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084e64 <__aeabi_fcmpeq>:
 8084e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084e68:	f7ff fff4 	bl	8084e54 <__aeabi_cfcmpeq>
 8084e6c:	bf0c      	ite	eq
 8084e6e:	2001      	moveq	r0, #1
 8084e70:	2000      	movne	r0, #0
 8084e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8084e76:	bf00      	nop

08084e78 <__aeabi_fcmplt>:
 8084e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084e7c:	f7ff ffea 	bl	8084e54 <__aeabi_cfcmpeq>
 8084e80:	bf34      	ite	cc
 8084e82:	2001      	movcc	r0, #1
 8084e84:	2000      	movcs	r0, #0
 8084e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8084e8a:	bf00      	nop

08084e8c <__aeabi_fcmple>:
 8084e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084e90:	f7ff ffe0 	bl	8084e54 <__aeabi_cfcmpeq>
 8084e94:	bf94      	ite	ls
 8084e96:	2001      	movls	r0, #1
 8084e98:	2000      	movhi	r0, #0
 8084e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8084e9e:	bf00      	nop

08084ea0 <__aeabi_fcmpge>:
 8084ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084ea4:	f7ff ffd2 	bl	8084e4c <__aeabi_cfrcmple>
 8084ea8:	bf94      	ite	ls
 8084eaa:	2001      	movls	r0, #1
 8084eac:	2000      	movhi	r0, #0
 8084eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8084eb2:	bf00      	nop

08084eb4 <__aeabi_fcmpgt>:
 8084eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084eb8:	f7ff ffc8 	bl	8084e4c <__aeabi_cfrcmple>
 8084ebc:	bf34      	ite	cc
 8084ebe:	2001      	movcc	r0, #1
 8084ec0:	2000      	movcs	r0, #0
 8084ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8084ec6:	bf00      	nop

08084ec8 <__aeabi_f2iz>:
 8084ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084ecc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084ed0:	d30f      	bcc.n	8084ef2 <__aeabi_f2iz+0x2a>
 8084ed2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084ed6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084eda:	d90d      	bls.n	8084ef8 <__aeabi_f2iz+0x30>
 8084edc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084ee4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084ee8:	fa23 f002 	lsr.w	r0, r3, r2
 8084eec:	bf18      	it	ne
 8084eee:	4240      	negne	r0, r0
 8084ef0:	4770      	bx	lr
 8084ef2:	f04f 0000 	mov.w	r0, #0
 8084ef6:	4770      	bx	lr
 8084ef8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084efc:	d101      	bne.n	8084f02 <__aeabi_f2iz+0x3a>
 8084efe:	0242      	lsls	r2, r0, #9
 8084f00:	d105      	bne.n	8084f0e <__aeabi_f2iz+0x46>
 8084f02:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084f06:	bf08      	it	eq
 8084f08:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084f0c:	4770      	bx	lr
 8084f0e:	f04f 0000 	mov.w	r0, #0
 8084f12:	4770      	bx	lr

08084f14 <asctime>:
 8084f14:	4b09      	ldr	r3, [pc, #36]	; (8084f3c <asctime+0x28>)
 8084f16:	b570      	push	{r4, r5, r6, lr}
 8084f18:	681c      	ldr	r4, [r3, #0]
 8084f1a:	4606      	mov	r6, r0
 8084f1c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8084f1e:	b93d      	cbnz	r5, 8084f30 <asctime+0x1c>
 8084f20:	201a      	movs	r0, #26
 8084f22:	f7fd f977 	bl	8082214 <malloc>
 8084f26:	221a      	movs	r2, #26
 8084f28:	6420      	str	r0, [r4, #64]	; 0x40
 8084f2a:	4629      	mov	r1, r5
 8084f2c:	f000 f93f 	bl	80851ae <memset>
 8084f30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8084f32:	4630      	mov	r0, r6
 8084f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084f38:	f000 b802 	b.w	8084f40 <asctime_r>
 8084f3c:	200000e4 	.word	0x200000e4

08084f40 <asctime_r>:
 8084f40:	b510      	push	{r4, lr}
 8084f42:	460c      	mov	r4, r1
 8084f44:	6941      	ldr	r1, [r0, #20]
 8084f46:	b086      	sub	sp, #24
 8084f48:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8084f4c:	6903      	ldr	r3, [r0, #16]
 8084f4e:	6982      	ldr	r2, [r0, #24]
 8084f50:	9104      	str	r1, [sp, #16]
 8084f52:	6801      	ldr	r1, [r0, #0]
 8084f54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084f58:	9103      	str	r1, [sp, #12]
 8084f5a:	6841      	ldr	r1, [r0, #4]
 8084f5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8084f60:	9102      	str	r1, [sp, #8]
 8084f62:	6881      	ldr	r1, [r0, #8]
 8084f64:	9101      	str	r1, [sp, #4]
 8084f66:	68c1      	ldr	r1, [r0, #12]
 8084f68:	4620      	mov	r0, r4
 8084f6a:	9100      	str	r1, [sp, #0]
 8084f6c:	4904      	ldr	r1, [pc, #16]	; (8084f80 <asctime_r+0x40>)
 8084f6e:	440b      	add	r3, r1
 8084f70:	4904      	ldr	r1, [pc, #16]	; (8084f84 <asctime_r+0x44>)
 8084f72:	440a      	add	r2, r1
 8084f74:	4904      	ldr	r1, [pc, #16]	; (8084f88 <asctime_r+0x48>)
 8084f76:	f7fd f965 	bl	8082244 <siprintf>
 8084f7a:	4620      	mov	r0, r4
 8084f7c:	b006      	add	sp, #24
 8084f7e:	bd10      	pop	{r4, pc}
 8084f80:	0808640a 	.word	0x0808640a
 8084f84:	080863f5 	.word	0x080863f5
 8084f88:	0808642e 	.word	0x0808642e

08084f8c <__cxa_atexit>:
 8084f8c:	b510      	push	{r4, lr}
 8084f8e:	4c05      	ldr	r4, [pc, #20]	; (8084fa4 <__cxa_atexit+0x18>)
 8084f90:	4613      	mov	r3, r2
 8084f92:	b12c      	cbz	r4, 8084fa0 <__cxa_atexit+0x14>
 8084f94:	460a      	mov	r2, r1
 8084f96:	4601      	mov	r1, r0
 8084f98:	2002      	movs	r0, #2
 8084f9a:	f3af 8000 	nop.w
 8084f9e:	bd10      	pop	{r4, pc}
 8084fa0:	4620      	mov	r0, r4
 8084fa2:	bd10      	pop	{r4, pc}
 8084fa4:	00000000 	.word	0x00000000

08084fa8 <localtime>:
 8084fa8:	b538      	push	{r3, r4, r5, lr}
 8084faa:	4b07      	ldr	r3, [pc, #28]	; (8084fc8 <localtime+0x20>)
 8084fac:	4605      	mov	r5, r0
 8084fae:	681c      	ldr	r4, [r3, #0]
 8084fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084fb2:	b91b      	cbnz	r3, 8084fbc <localtime+0x14>
 8084fb4:	2024      	movs	r0, #36	; 0x24
 8084fb6:	f7fd f92d 	bl	8082214 <malloc>
 8084fba:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084fbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084fbe:	4628      	mov	r0, r5
 8084fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084fc4:	f000 b802 	b.w	8084fcc <localtime_r>
 8084fc8:	200000e4 	.word	0x200000e4

08084fcc <localtime_r>:
 8084fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084fd0:	460c      	mov	r4, r1
 8084fd2:	4680      	mov	r8, r0
 8084fd4:	f000 fd02 	bl	80859dc <__gettzinfo>
 8084fd8:	4621      	mov	r1, r4
 8084fda:	4607      	mov	r7, r0
 8084fdc:	4640      	mov	r0, r8
 8084fde:	f000 fd01 	bl	80859e4 <gmtime_r>
 8084fe2:	6946      	ldr	r6, [r0, #20]
 8084fe4:	4604      	mov	r4, r0
 8084fe6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8084fea:	07b3      	lsls	r3, r6, #30
 8084fec:	d105      	bne.n	8084ffa <localtime_r+0x2e>
 8084fee:	2264      	movs	r2, #100	; 0x64
 8084ff0:	fb96 f3f2 	sdiv	r3, r6, r2
 8084ff4:	fb02 6313 	mls	r3, r2, r3, r6
 8084ff8:	b94b      	cbnz	r3, 808500e <localtime_r+0x42>
 8084ffa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8084ffe:	fb96 f3f5 	sdiv	r3, r6, r5
 8085002:	fb05 6513 	mls	r5, r5, r3, r6
 8085006:	fab5 f385 	clz	r3, r5
 808500a:	095b      	lsrs	r3, r3, #5
 808500c:	e000      	b.n	8085010 <localtime_r+0x44>
 808500e:	2301      	movs	r3, #1
 8085010:	4a5f      	ldr	r2, [pc, #380]	; (8085190 <localtime_r+0x1c4>)
 8085012:	2530      	movs	r5, #48	; 0x30
 8085014:	fb05 2503 	mla	r5, r5, r3, r2
 8085018:	f000 fb14 	bl	8085644 <__tz_lock>
 808501c:	f000 fb14 	bl	8085648 <_tzset_unlocked>
 8085020:	4b5c      	ldr	r3, [pc, #368]	; (8085194 <localtime_r+0x1c8>)
 8085022:	681b      	ldr	r3, [r3, #0]
 8085024:	b1f3      	cbz	r3, 8085064 <localtime_r+0x98>
 8085026:	687b      	ldr	r3, [r7, #4]
 8085028:	429e      	cmp	r6, r3
 808502a:	d105      	bne.n	8085038 <localtime_r+0x6c>
 808502c:	6839      	ldr	r1, [r7, #0]
 808502e:	f8d8 3000 	ldr.w	r3, [r8]
 8085032:	69fa      	ldr	r2, [r7, #28]
 8085034:	b941      	cbnz	r1, 8085048 <localtime_r+0x7c>
 8085036:	e00a      	b.n	808504e <localtime_r+0x82>
 8085038:	4630      	mov	r0, r6
 808503a:	f000 fa5b 	bl	80854f4 <__tzcalc_limits>
 808503e:	2800      	cmp	r0, #0
 8085040:	d1f4      	bne.n	808502c <localtime_r+0x60>
 8085042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8085046:	e00d      	b.n	8085064 <localtime_r+0x98>
 8085048:	4293      	cmp	r3, r2
 808504a:	db08      	blt.n	808505e <localtime_r+0x92>
 808504c:	e001      	b.n	8085052 <localtime_r+0x86>
 808504e:	4293      	cmp	r3, r2
 8085050:	da07      	bge.n	8085062 <localtime_r+0x96>
 8085052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8085054:	4293      	cmp	r3, r2
 8085056:	bfac      	ite	ge
 8085058:	2300      	movge	r3, #0
 808505a:	2301      	movlt	r3, #1
 808505c:	e002      	b.n	8085064 <localtime_r+0x98>
 808505e:	2300      	movs	r3, #0
 8085060:	e000      	b.n	8085064 <localtime_r+0x98>
 8085062:	2301      	movs	r3, #1
 8085064:	6223      	str	r3, [r4, #32]
 8085066:	6a23      	ldr	r3, [r4, #32]
 8085068:	203c      	movs	r0, #60	; 0x3c
 808506a:	2b01      	cmp	r3, #1
 808506c:	bf0c      	ite	eq
 808506e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8085070:	6a39      	ldrne	r1, [r7, #32]
 8085072:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8085076:	fb91 f6f3 	sdiv	r6, r1, r3
 808507a:	fb03 1316 	mls	r3, r3, r6, r1
 808507e:	fb93 f2f0 	sdiv	r2, r3, r0
 8085082:	fb00 3012 	mls	r0, r0, r2, r3
 8085086:	6861      	ldr	r1, [r4, #4]
 8085088:	6823      	ldr	r3, [r4, #0]
 808508a:	1a89      	subs	r1, r1, r2
 808508c:	68a2      	ldr	r2, [r4, #8]
 808508e:	1a1b      	subs	r3, r3, r0
 8085090:	1b92      	subs	r2, r2, r6
 8085092:	2b3b      	cmp	r3, #59	; 0x3b
 8085094:	6023      	str	r3, [r4, #0]
 8085096:	6061      	str	r1, [r4, #4]
 8085098:	60a2      	str	r2, [r4, #8]
 808509a:	dd03      	ble.n	80850a4 <localtime_r+0xd8>
 808509c:	3101      	adds	r1, #1
 808509e:	6061      	str	r1, [r4, #4]
 80850a0:	3b3c      	subs	r3, #60	; 0x3c
 80850a2:	e004      	b.n	80850ae <localtime_r+0xe2>
 80850a4:	2b00      	cmp	r3, #0
 80850a6:	da03      	bge.n	80850b0 <localtime_r+0xe4>
 80850a8:	3901      	subs	r1, #1
 80850aa:	6061      	str	r1, [r4, #4]
 80850ac:	333c      	adds	r3, #60	; 0x3c
 80850ae:	6023      	str	r3, [r4, #0]
 80850b0:	6863      	ldr	r3, [r4, #4]
 80850b2:	2b3b      	cmp	r3, #59	; 0x3b
 80850b4:	dd03      	ble.n	80850be <localtime_r+0xf2>
 80850b6:	3201      	adds	r2, #1
 80850b8:	60a2      	str	r2, [r4, #8]
 80850ba:	3b3c      	subs	r3, #60	; 0x3c
 80850bc:	e004      	b.n	80850c8 <localtime_r+0xfc>
 80850be:	2b00      	cmp	r3, #0
 80850c0:	da03      	bge.n	80850ca <localtime_r+0xfe>
 80850c2:	3a01      	subs	r2, #1
 80850c4:	60a2      	str	r2, [r4, #8]
 80850c6:	333c      	adds	r3, #60	; 0x3c
 80850c8:	6063      	str	r3, [r4, #4]
 80850ca:	68a3      	ldr	r3, [r4, #8]
 80850cc:	2b17      	cmp	r3, #23
 80850ce:	dd22      	ble.n	8085116 <localtime_r+0x14a>
 80850d0:	69e2      	ldr	r2, [r4, #28]
 80850d2:	3b18      	subs	r3, #24
 80850d4:	3201      	adds	r2, #1
 80850d6:	61e2      	str	r2, [r4, #28]
 80850d8:	69a2      	ldr	r2, [r4, #24]
 80850da:	60a3      	str	r3, [r4, #8]
 80850dc:	3201      	adds	r2, #1
 80850de:	2a06      	cmp	r2, #6
 80850e0:	bfc8      	it	gt
 80850e2:	2200      	movgt	r2, #0
 80850e4:	61a2      	str	r2, [r4, #24]
 80850e6:	68e2      	ldr	r2, [r4, #12]
 80850e8:	6923      	ldr	r3, [r4, #16]
 80850ea:	3201      	adds	r2, #1
 80850ec:	60e2      	str	r2, [r4, #12]
 80850ee:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80850f2:	428a      	cmp	r2, r1
 80850f4:	dd46      	ble.n	8085184 <localtime_r+0x1b8>
 80850f6:	3301      	adds	r3, #1
 80850f8:	2b0c      	cmp	r3, #12
 80850fa:	bf08      	it	eq
 80850fc:	6963      	ldreq	r3, [r4, #20]
 80850fe:	eba2 0201 	sub.w	r2, r2, r1
 8085102:	60e2      	str	r2, [r4, #12]
 8085104:	bf05      	ittet	eq
 8085106:	3301      	addeq	r3, #1
 8085108:	2200      	moveq	r2, #0
 808510a:	6123      	strne	r3, [r4, #16]
 808510c:	6122      	streq	r2, [r4, #16]
 808510e:	bf04      	itt	eq
 8085110:	6163      	streq	r3, [r4, #20]
 8085112:	61e2      	streq	r2, [r4, #28]
 8085114:	e036      	b.n	8085184 <localtime_r+0x1b8>
 8085116:	2b00      	cmp	r3, #0
 8085118:	da34      	bge.n	8085184 <localtime_r+0x1b8>
 808511a:	69e2      	ldr	r2, [r4, #28]
 808511c:	3318      	adds	r3, #24
 808511e:	3a01      	subs	r2, #1
 8085120:	61e2      	str	r2, [r4, #28]
 8085122:	69a2      	ldr	r2, [r4, #24]
 8085124:	60a3      	str	r3, [r4, #8]
 8085126:	3a01      	subs	r2, #1
 8085128:	bf48      	it	mi
 808512a:	2206      	movmi	r2, #6
 808512c:	61a2      	str	r2, [r4, #24]
 808512e:	68e2      	ldr	r2, [r4, #12]
 8085130:	3a01      	subs	r2, #1
 8085132:	60e2      	str	r2, [r4, #12]
 8085134:	bb32      	cbnz	r2, 8085184 <localtime_r+0x1b8>
 8085136:	6923      	ldr	r3, [r4, #16]
 8085138:	3b01      	subs	r3, #1
 808513a:	d401      	bmi.n	8085140 <localtime_r+0x174>
 808513c:	6123      	str	r3, [r4, #16]
 808513e:	e01d      	b.n	808517c <localtime_r+0x1b0>
 8085140:	230b      	movs	r3, #11
 8085142:	6123      	str	r3, [r4, #16]
 8085144:	6963      	ldr	r3, [r4, #20]
 8085146:	1e5a      	subs	r2, r3, #1
 8085148:	f012 0f03 	tst.w	r2, #3
 808514c:	6162      	str	r2, [r4, #20]
 808514e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8085152:	d105      	bne.n	8085160 <localtime_r+0x194>
 8085154:	2164      	movs	r1, #100	; 0x64
 8085156:	fb93 f2f1 	sdiv	r2, r3, r1
 808515a:	fb01 3212 	mls	r2, r1, r2, r3
 808515e:	b94a      	cbnz	r2, 8085174 <localtime_r+0x1a8>
 8085160:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8085164:	fb93 f2f1 	sdiv	r2, r3, r1
 8085168:	fb01 3312 	mls	r3, r1, r2, r3
 808516c:	fab3 f383 	clz	r3, r3
 8085170:	095b      	lsrs	r3, r3, #5
 8085172:	e000      	b.n	8085176 <localtime_r+0x1aa>
 8085174:	2301      	movs	r3, #1
 8085176:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808517a:	61e3      	str	r3, [r4, #28]
 808517c:	6923      	ldr	r3, [r4, #16]
 808517e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8085182:	60e3      	str	r3, [r4, #12]
 8085184:	f000 fa5f 	bl	8085646 <__tz_unlock>
 8085188:	4620      	mov	r0, r4
 808518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808518e:	bf00      	nop
 8085190:	080865b0 	.word	0x080865b0
 8085194:	20000988 	.word	0x20000988

08085198 <memcpy>:
 8085198:	b510      	push	{r4, lr}
 808519a:	1e43      	subs	r3, r0, #1
 808519c:	440a      	add	r2, r1
 808519e:	4291      	cmp	r1, r2
 80851a0:	d004      	beq.n	80851ac <memcpy+0x14>
 80851a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80851a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80851aa:	e7f8      	b.n	808519e <memcpy+0x6>
 80851ac:	bd10      	pop	{r4, pc}

080851ae <memset>:
 80851ae:	4603      	mov	r3, r0
 80851b0:	4402      	add	r2, r0
 80851b2:	4293      	cmp	r3, r2
 80851b4:	d002      	beq.n	80851bc <memset+0xe>
 80851b6:	f803 1b01 	strb.w	r1, [r3], #1
 80851ba:	e7fa      	b.n	80851b2 <memset+0x4>
 80851bc:	4770      	bx	lr
	...

080851c0 <srand>:
 80851c0:	b538      	push	{r3, r4, r5, lr}
 80851c2:	4b12      	ldr	r3, [pc, #72]	; (808520c <srand+0x4c>)
 80851c4:	4605      	mov	r5, r0
 80851c6:	681c      	ldr	r4, [r3, #0]
 80851c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80851ca:	b9d3      	cbnz	r3, 8085202 <srand+0x42>
 80851cc:	2018      	movs	r0, #24
 80851ce:	f7fd f821 	bl	8082214 <malloc>
 80851d2:	f243 330e 	movw	r3, #13070	; 0x330e
 80851d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80851d8:	8003      	strh	r3, [r0, #0]
 80851da:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80851de:	8043      	strh	r3, [r0, #2]
 80851e0:	f241 2334 	movw	r3, #4660	; 0x1234
 80851e4:	8083      	strh	r3, [r0, #4]
 80851e6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80851ea:	80c3      	strh	r3, [r0, #6]
 80851ec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80851f0:	8103      	strh	r3, [r0, #8]
 80851f2:	2305      	movs	r3, #5
 80851f4:	8143      	strh	r3, [r0, #10]
 80851f6:	230b      	movs	r3, #11
 80851f8:	8183      	strh	r3, [r0, #12]
 80851fa:	2201      	movs	r2, #1
 80851fc:	2300      	movs	r3, #0
 80851fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8085202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8085204:	2200      	movs	r2, #0
 8085206:	611d      	str	r5, [r3, #16]
 8085208:	615a      	str	r2, [r3, #20]
 808520a:	bd38      	pop	{r3, r4, r5, pc}
 808520c:	200000e4 	.word	0x200000e4

08085210 <strcat>:
 8085210:	4602      	mov	r2, r0
 8085212:	b510      	push	{r4, lr}
 8085214:	4613      	mov	r3, r2
 8085216:	781c      	ldrb	r4, [r3, #0]
 8085218:	3201      	adds	r2, #1
 808521a:	2c00      	cmp	r4, #0
 808521c:	d1fa      	bne.n	8085214 <strcat+0x4>
 808521e:	3b01      	subs	r3, #1
 8085220:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085224:	f803 2f01 	strb.w	r2, [r3, #1]!
 8085228:	2a00      	cmp	r2, #0
 808522a:	d1f9      	bne.n	8085220 <strcat+0x10>
 808522c:	bd10      	pop	{r4, pc}

0808522e <strcmp>:
 808522e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8085232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8085236:	2a01      	cmp	r2, #1
 8085238:	bf28      	it	cs
 808523a:	429a      	cmpcs	r2, r3
 808523c:	d0f7      	beq.n	808522e <strcmp>
 808523e:	1ad0      	subs	r0, r2, r3
 8085240:	4770      	bx	lr

08085242 <strcpy>:
 8085242:	4603      	mov	r3, r0
 8085244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8085248:	f803 2b01 	strb.w	r2, [r3], #1
 808524c:	2a00      	cmp	r2, #0
 808524e:	d1f9      	bne.n	8085244 <strcpy+0x2>
 8085250:	4770      	bx	lr
	...

08085254 <strdup>:
 8085254:	4b02      	ldr	r3, [pc, #8]	; (8085260 <strdup+0xc>)
 8085256:	4601      	mov	r1, r0
 8085258:	6818      	ldr	r0, [r3, #0]
 808525a:	f000 b803 	b.w	8085264 <_strdup_r>
 808525e:	bf00      	nop
 8085260:	200000e4 	.word	0x200000e4

08085264 <_strdup_r>:
 8085264:	b570      	push	{r4, r5, r6, lr}
 8085266:	4606      	mov	r6, r0
 8085268:	4608      	mov	r0, r1
 808526a:	460c      	mov	r4, r1
 808526c:	f000 f80d 	bl	808528a <strlen>
 8085270:	1c45      	adds	r5, r0, #1
 8085272:	4629      	mov	r1, r5
 8085274:	4630      	mov	r0, r6
 8085276:	f7fd f805 	bl	8082284 <_malloc_r>
 808527a:	4606      	mov	r6, r0
 808527c:	b118      	cbz	r0, 8085286 <_strdup_r+0x22>
 808527e:	462a      	mov	r2, r5
 8085280:	4621      	mov	r1, r4
 8085282:	f7ff ff89 	bl	8085198 <memcpy>
 8085286:	4630      	mov	r0, r6
 8085288:	bd70      	pop	{r4, r5, r6, pc}

0808528a <strlen>:
 808528a:	4603      	mov	r3, r0
 808528c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085290:	2a00      	cmp	r2, #0
 8085292:	d1fb      	bne.n	808528c <strlen+0x2>
 8085294:	1a18      	subs	r0, r3, r0
 8085296:	3801      	subs	r0, #1
 8085298:	4770      	bx	lr

0808529a <strncmp>:
 808529a:	b530      	push	{r4, r5, lr}
 808529c:	b182      	cbz	r2, 80852c0 <strncmp+0x26>
 808529e:	1e45      	subs	r5, r0, #1
 80852a0:	3901      	subs	r1, #1
 80852a2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80852a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80852aa:	42a3      	cmp	r3, r4
 80852ac:	d106      	bne.n	80852bc <strncmp+0x22>
 80852ae:	43ec      	mvns	r4, r5
 80852b0:	4414      	add	r4, r2
 80852b2:	42e0      	cmn	r0, r4
 80852b4:	d001      	beq.n	80852ba <strncmp+0x20>
 80852b6:	2b00      	cmp	r3, #0
 80852b8:	d1f3      	bne.n	80852a2 <strncmp+0x8>
 80852ba:	461c      	mov	r4, r3
 80852bc:	1b18      	subs	r0, r3, r4
 80852be:	bd30      	pop	{r4, r5, pc}
 80852c0:	4610      	mov	r0, r2
 80852c2:	bd30      	pop	{r4, r5, pc}

080852c4 <_strtol_r>:
 80852c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80852c8:	460f      	mov	r7, r1
 80852ca:	4680      	mov	r8, r0
 80852cc:	483f      	ldr	r0, [pc, #252]	; (80853cc <_strtol_r+0x108>)
 80852ce:	f8d0 9000 	ldr.w	r9, [r0]
 80852d2:	463d      	mov	r5, r7
 80852d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80852d8:	eb09 0004 	add.w	r0, r9, r4
 80852dc:	7840      	ldrb	r0, [r0, #1]
 80852de:	f000 0008 	and.w	r0, r0, #8
 80852e2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80852e6:	b108      	cbz	r0, 80852ec <_strtol_r+0x28>
 80852e8:	462f      	mov	r7, r5
 80852ea:	e7f2      	b.n	80852d2 <_strtol_r+0xe>
 80852ec:	2c2d      	cmp	r4, #45	; 0x2d
 80852ee:	d103      	bne.n	80852f8 <_strtol_r+0x34>
 80852f0:	1cbd      	adds	r5, r7, #2
 80852f2:	787c      	ldrb	r4, [r7, #1]
 80852f4:	2601      	movs	r6, #1
 80852f6:	e003      	b.n	8085300 <_strtol_r+0x3c>
 80852f8:	2c2b      	cmp	r4, #43	; 0x2b
 80852fa:	bf04      	itt	eq
 80852fc:	787c      	ldrbeq	r4, [r7, #1]
 80852fe:	1cbd      	addeq	r5, r7, #2
 8085300:	b113      	cbz	r3, 8085308 <_strtol_r+0x44>
 8085302:	2b10      	cmp	r3, #16
 8085304:	d10a      	bne.n	808531c <_strtol_r+0x58>
 8085306:	e05b      	b.n	80853c0 <_strtol_r+0xfc>
 8085308:	2c30      	cmp	r4, #48	; 0x30
 808530a:	d157      	bne.n	80853bc <_strtol_r+0xf8>
 808530c:	7828      	ldrb	r0, [r5, #0]
 808530e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085312:	2858      	cmp	r0, #88	; 0x58
 8085314:	d14d      	bne.n	80853b2 <_strtol_r+0xee>
 8085316:	786c      	ldrb	r4, [r5, #1]
 8085318:	2310      	movs	r3, #16
 808531a:	3502      	adds	r5, #2
 808531c:	2e00      	cmp	r6, #0
 808531e:	bf14      	ite	ne
 8085320:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8085324:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8085328:	fbbc faf3 	udiv	sl, ip, r3
 808532c:	2700      	movs	r7, #0
 808532e:	4638      	mov	r0, r7
 8085330:	fb03 cc1a 	mls	ip, r3, sl, ip
 8085334:	eb09 0e04 	add.w	lr, r9, r4
 8085338:	f89e e001 	ldrb.w	lr, [lr, #1]
 808533c:	f01e 0f04 	tst.w	lr, #4
 8085340:	d001      	beq.n	8085346 <_strtol_r+0x82>
 8085342:	3c30      	subs	r4, #48	; 0x30
 8085344:	e00b      	b.n	808535e <_strtol_r+0x9a>
 8085346:	f01e 0e03 	ands.w	lr, lr, #3
 808534a:	d01b      	beq.n	8085384 <_strtol_r+0xc0>
 808534c:	f1be 0f01 	cmp.w	lr, #1
 8085350:	bf0c      	ite	eq
 8085352:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085356:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808535a:	ebce 0404 	rsb	r4, lr, r4
 808535e:	42a3      	cmp	r3, r4
 8085360:	dd10      	ble.n	8085384 <_strtol_r+0xc0>
 8085362:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8085366:	d00a      	beq.n	808537e <_strtol_r+0xba>
 8085368:	4550      	cmp	r0, sl
 808536a:	d806      	bhi.n	808537a <_strtol_r+0xb6>
 808536c:	d101      	bne.n	8085372 <_strtol_r+0xae>
 808536e:	4564      	cmp	r4, ip
 8085370:	dc03      	bgt.n	808537a <_strtol_r+0xb6>
 8085372:	fb03 4000 	mla	r0, r3, r0, r4
 8085376:	2701      	movs	r7, #1
 8085378:	e001      	b.n	808537e <_strtol_r+0xba>
 808537a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 808537e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085382:	e7d7      	b.n	8085334 <_strtol_r+0x70>
 8085384:	1c7b      	adds	r3, r7, #1
 8085386:	d10c      	bne.n	80853a2 <_strtol_r+0xde>
 8085388:	2e00      	cmp	r6, #0
 808538a:	f04f 0322 	mov.w	r3, #34	; 0x22
 808538e:	bf14      	ite	ne
 8085390:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8085394:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085398:	f8c8 3000 	str.w	r3, [r8]
 808539c:	b92a      	cbnz	r2, 80853aa <_strtol_r+0xe6>
 808539e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80853a2:	b106      	cbz	r6, 80853a6 <_strtol_r+0xe2>
 80853a4:	4240      	negs	r0, r0
 80853a6:	b172      	cbz	r2, 80853c6 <_strtol_r+0x102>
 80853a8:	b107      	cbz	r7, 80853ac <_strtol_r+0xe8>
 80853aa:	1e69      	subs	r1, r5, #1
 80853ac:	6011      	str	r1, [r2, #0]
 80853ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80853b2:	2430      	movs	r4, #48	; 0x30
 80853b4:	2b00      	cmp	r3, #0
 80853b6:	d1b1      	bne.n	808531c <_strtol_r+0x58>
 80853b8:	2308      	movs	r3, #8
 80853ba:	e7af      	b.n	808531c <_strtol_r+0x58>
 80853bc:	230a      	movs	r3, #10
 80853be:	e7ad      	b.n	808531c <_strtol_r+0x58>
 80853c0:	2c30      	cmp	r4, #48	; 0x30
 80853c2:	d0a3      	beq.n	808530c <_strtol_r+0x48>
 80853c4:	e7aa      	b.n	808531c <_strtol_r+0x58>
 80853c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80853ca:	bf00      	nop
 80853cc:	20000080 	.word	0x20000080

080853d0 <strtol>:
 80853d0:	4613      	mov	r3, r2
 80853d2:	460a      	mov	r2, r1
 80853d4:	4601      	mov	r1, r0
 80853d6:	4802      	ldr	r0, [pc, #8]	; (80853e0 <strtol+0x10>)
 80853d8:	6800      	ldr	r0, [r0, #0]
 80853da:	f7ff bf73 	b.w	80852c4 <_strtol_r>
 80853de:	bf00      	nop
 80853e0:	200000e4 	.word	0x200000e4

080853e4 <_strtoul_r>:
 80853e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80853e8:	460e      	mov	r6, r1
 80853ea:	4680      	mov	r8, r0
 80853ec:	483b      	ldr	r0, [pc, #236]	; (80854dc <_strtoul_r+0xf8>)
 80853ee:	f8d0 9000 	ldr.w	r9, [r0]
 80853f2:	4635      	mov	r5, r6
 80853f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80853f8:	eb09 0004 	add.w	r0, r9, r4
 80853fc:	7840      	ldrb	r0, [r0, #1]
 80853fe:	f000 0008 	and.w	r0, r0, #8
 8085402:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085406:	b108      	cbz	r0, 808540c <_strtoul_r+0x28>
 8085408:	462e      	mov	r6, r5
 808540a:	e7f2      	b.n	80853f2 <_strtoul_r+0xe>
 808540c:	2c2d      	cmp	r4, #45	; 0x2d
 808540e:	d103      	bne.n	8085418 <_strtoul_r+0x34>
 8085410:	1cb5      	adds	r5, r6, #2
 8085412:	7874      	ldrb	r4, [r6, #1]
 8085414:	2701      	movs	r7, #1
 8085416:	e003      	b.n	8085420 <_strtoul_r+0x3c>
 8085418:	2c2b      	cmp	r4, #43	; 0x2b
 808541a:	bf04      	itt	eq
 808541c:	7874      	ldrbeq	r4, [r6, #1]
 808541e:	1cb5      	addeq	r5, r6, #2
 8085420:	b113      	cbz	r3, 8085428 <_strtoul_r+0x44>
 8085422:	2b10      	cmp	r3, #16
 8085424:	d10a      	bne.n	808543c <_strtoul_r+0x58>
 8085426:	e053      	b.n	80854d0 <_strtoul_r+0xec>
 8085428:	2c30      	cmp	r4, #48	; 0x30
 808542a:	d14f      	bne.n	80854cc <_strtoul_r+0xe8>
 808542c:	7828      	ldrb	r0, [r5, #0]
 808542e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085432:	2858      	cmp	r0, #88	; 0x58
 8085434:	d145      	bne.n	80854c2 <_strtoul_r+0xde>
 8085436:	786c      	ldrb	r4, [r5, #1]
 8085438:	2310      	movs	r3, #16
 808543a:	3502      	adds	r5, #2
 808543c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8085440:	fbbc fcf3 	udiv	ip, ip, r3
 8085444:	fb03 fa0c 	mul.w	sl, r3, ip
 8085448:	2600      	movs	r6, #0
 808544a:	ea6f 0a0a 	mvn.w	sl, sl
 808544e:	4630      	mov	r0, r6
 8085450:	eb09 0e04 	add.w	lr, r9, r4
 8085454:	f89e e001 	ldrb.w	lr, [lr, #1]
 8085458:	f01e 0f04 	tst.w	lr, #4
 808545c:	d001      	beq.n	8085462 <_strtoul_r+0x7e>
 808545e:	3c30      	subs	r4, #48	; 0x30
 8085460:	e00b      	b.n	808547a <_strtoul_r+0x96>
 8085462:	f01e 0e03 	ands.w	lr, lr, #3
 8085466:	d01a      	beq.n	808549e <_strtoul_r+0xba>
 8085468:	f1be 0f01 	cmp.w	lr, #1
 808546c:	bf0c      	ite	eq
 808546e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8085472:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8085476:	ebce 0404 	rsb	r4, lr, r4
 808547a:	42a3      	cmp	r3, r4
 808547c:	dd0f      	ble.n	808549e <_strtoul_r+0xba>
 808547e:	2e00      	cmp	r6, #0
 8085480:	db08      	blt.n	8085494 <_strtoul_r+0xb0>
 8085482:	4560      	cmp	r0, ip
 8085484:	d806      	bhi.n	8085494 <_strtoul_r+0xb0>
 8085486:	d101      	bne.n	808548c <_strtoul_r+0xa8>
 8085488:	4554      	cmp	r4, sl
 808548a:	dc03      	bgt.n	8085494 <_strtoul_r+0xb0>
 808548c:	fb03 4000 	mla	r0, r3, r0, r4
 8085490:	2601      	movs	r6, #1
 8085492:	e001      	b.n	8085498 <_strtoul_r+0xb4>
 8085494:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8085498:	f815 4b01 	ldrb.w	r4, [r5], #1
 808549c:	e7d8      	b.n	8085450 <_strtoul_r+0x6c>
 808549e:	2e00      	cmp	r6, #0
 80854a0:	da07      	bge.n	80854b2 <_strtoul_r+0xce>
 80854a2:	2322      	movs	r3, #34	; 0x22
 80854a4:	f8c8 3000 	str.w	r3, [r8]
 80854a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80854ac:	b92a      	cbnz	r2, 80854ba <_strtoul_r+0xd6>
 80854ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80854b2:	b107      	cbz	r7, 80854b6 <_strtoul_r+0xd2>
 80854b4:	4240      	negs	r0, r0
 80854b6:	b172      	cbz	r2, 80854d6 <_strtoul_r+0xf2>
 80854b8:	b106      	cbz	r6, 80854bc <_strtoul_r+0xd8>
 80854ba:	1e69      	subs	r1, r5, #1
 80854bc:	6011      	str	r1, [r2, #0]
 80854be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80854c2:	2430      	movs	r4, #48	; 0x30
 80854c4:	2b00      	cmp	r3, #0
 80854c6:	d1b9      	bne.n	808543c <_strtoul_r+0x58>
 80854c8:	2308      	movs	r3, #8
 80854ca:	e7b7      	b.n	808543c <_strtoul_r+0x58>
 80854cc:	230a      	movs	r3, #10
 80854ce:	e7b5      	b.n	808543c <_strtoul_r+0x58>
 80854d0:	2c30      	cmp	r4, #48	; 0x30
 80854d2:	d0ab      	beq.n	808542c <_strtoul_r+0x48>
 80854d4:	e7b2      	b.n	808543c <_strtoul_r+0x58>
 80854d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80854da:	bf00      	nop
 80854dc:	20000080 	.word	0x20000080

080854e0 <strtoul>:
 80854e0:	4613      	mov	r3, r2
 80854e2:	460a      	mov	r2, r1
 80854e4:	4601      	mov	r1, r0
 80854e6:	4802      	ldr	r0, [pc, #8]	; (80854f0 <strtoul+0x10>)
 80854e8:	6800      	ldr	r0, [r0, #0]
 80854ea:	f7ff bf7b 	b.w	80853e4 <_strtoul_r>
 80854ee:	bf00      	nop
 80854f0:	200000e4 	.word	0x200000e4

080854f4 <__tzcalc_limits>:
 80854f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80854f8:	4604      	mov	r4, r0
 80854fa:	f000 fa6f 	bl	80859dc <__gettzinfo>
 80854fe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8085502:	429c      	cmp	r4, r3
 8085504:	f340 8096 	ble.w	8085634 <__tzcalc_limits+0x140>
 8085508:	f240 156d 	movw	r5, #365	; 0x16d
 808550c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8085510:	18e3      	adds	r3, r4, r3
 8085512:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8085516:	109b      	asrs	r3, r3, #2
 8085518:	fb05 3502 	mla	r5, r5, r2, r3
 808551c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8085520:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8085524:	fb92 f3f3 	sdiv	r3, r2, r3
 8085528:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808552c:	442b      	add	r3, r5
 808552e:	18a5      	adds	r5, r4, r2
 8085530:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085534:	fb94 f7f2 	sdiv	r7, r4, r2
 8085538:	fb95 f5f2 	sdiv	r5, r5, r2
 808553c:	fb02 4717 	mls	r7, r2, r7, r4
 8085540:	441d      	add	r5, r3
 8085542:	2364      	movs	r3, #100	; 0x64
 8085544:	fb94 f6f3 	sdiv	r6, r4, r3
 8085548:	fab7 fe87 	clz	lr, r7
 808554c:	4601      	mov	r1, r0
 808554e:	fb03 4616 	mls	r6, r3, r6, r4
 8085552:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8085556:	9301      	str	r3, [sp, #4]
 8085558:	f004 0303 	and.w	r3, r4, #3
 808555c:	6044      	str	r4, [r0, #4]
 808555e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8085562:	9300      	str	r3, [sp, #0]
 8085564:	f04f 0c07 	mov.w	ip, #7
 8085568:	7a0b      	ldrb	r3, [r1, #8]
 808556a:	2b4a      	cmp	r3, #74	; 0x4a
 808556c:	d10e      	bne.n	808558c <__tzcalc_limits+0x98>
 808556e:	694b      	ldr	r3, [r1, #20]
 8085570:	9a00      	ldr	r2, [sp, #0]
 8085572:	18ec      	adds	r4, r5, r3
 8085574:	b902      	cbnz	r2, 8085578 <__tzcalc_limits+0x84>
 8085576:	b906      	cbnz	r6, 808557a <__tzcalc_limits+0x86>
 8085578:	b927      	cbnz	r7, 8085584 <__tzcalc_limits+0x90>
 808557a:	2b3b      	cmp	r3, #59	; 0x3b
 808557c:	bfd4      	ite	le
 808557e:	2300      	movle	r3, #0
 8085580:	2301      	movgt	r3, #1
 8085582:	e000      	b.n	8085586 <__tzcalc_limits+0x92>
 8085584:	2300      	movs	r3, #0
 8085586:	4423      	add	r3, r4
 8085588:	3b01      	subs	r3, #1
 808558a:	e03f      	b.n	808560c <__tzcalc_limits+0x118>
 808558c:	2b44      	cmp	r3, #68	; 0x44
 808558e:	d102      	bne.n	8085596 <__tzcalc_limits+0xa2>
 8085590:	694b      	ldr	r3, [r1, #20]
 8085592:	442b      	add	r3, r5
 8085594:	e03a      	b.n	808560c <__tzcalc_limits+0x118>
 8085596:	9b00      	ldr	r3, [sp, #0]
 8085598:	b92b      	cbnz	r3, 80855a6 <__tzcalc_limits+0xb2>
 808559a:	2e00      	cmp	r6, #0
 808559c:	bf0c      	ite	eq
 808559e:	46f0      	moveq	r8, lr
 80855a0:	f04f 0801 	movne.w	r8, #1
 80855a4:	e000      	b.n	80855a8 <__tzcalc_limits+0xb4>
 80855a6:	46f0      	mov	r8, lr
 80855a8:	46a9      	mov	r9, r5
 80855aa:	4b24      	ldr	r3, [pc, #144]	; (808563c <__tzcalc_limits+0x148>)
 80855ac:	2230      	movs	r2, #48	; 0x30
 80855ae:	fb02 3808 	mla	r8, r2, r8, r3
 80855b2:	68cc      	ldr	r4, [r1, #12]
 80855b4:	f1a8 0a04 	sub.w	sl, r8, #4
 80855b8:	2301      	movs	r3, #1
 80855ba:	42a3      	cmp	r3, r4
 80855bc:	da04      	bge.n	80855c8 <__tzcalc_limits+0xd4>
 80855be:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80855c2:	3301      	adds	r3, #1
 80855c4:	44d9      	add	r9, fp
 80855c6:	e7f8      	b.n	80855ba <__tzcalc_limits+0xc6>
 80855c8:	f109 0304 	add.w	r3, r9, #4
 80855cc:	fb93 fbfc 	sdiv	fp, r3, ip
 80855d0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80855d4:	ebca 0a03 	rsb	sl, sl, r3
 80855d8:	694b      	ldr	r3, [r1, #20]
 80855da:	2c01      	cmp	r4, #1
 80855dc:	bfb8      	it	lt
 80855de:	2401      	movlt	r4, #1
 80855e0:	ebb3 0a0a 	subs.w	sl, r3, sl
 80855e4:	690b      	ldr	r3, [r1, #16]
 80855e6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80855ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80855ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80855f2:	bf48      	it	mi
 80855f4:	f10a 0a07 	addmi.w	sl, sl, #7
 80855f8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80855fc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8085600:	4453      	add	r3, sl
 8085602:	42a3      	cmp	r3, r4
 8085604:	db01      	blt.n	808560a <__tzcalc_limits+0x116>
 8085606:	3b07      	subs	r3, #7
 8085608:	e7fb      	b.n	8085602 <__tzcalc_limits+0x10e>
 808560a:	444b      	add	r3, r9
 808560c:	698c      	ldr	r4, [r1, #24]
 808560e:	4a0c      	ldr	r2, [pc, #48]	; (8085640 <__tzcalc_limits+0x14c>)
 8085610:	fb02 4303 	mla	r3, r2, r3, r4
 8085614:	6a0c      	ldr	r4, [r1, #32]
 8085616:	4423      	add	r3, r4
 8085618:	f841 3f1c 	str.w	r3, [r1, #28]!
 808561c:	9b01      	ldr	r3, [sp, #4]
 808561e:	4299      	cmp	r1, r3
 8085620:	d1a2      	bne.n	8085568 <__tzcalc_limits+0x74>
 8085622:	69c3      	ldr	r3, [r0, #28]
 8085624:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8085626:	4293      	cmp	r3, r2
 8085628:	bfac      	ite	ge
 808562a:	2300      	movge	r3, #0
 808562c:	2301      	movlt	r3, #1
 808562e:	6003      	str	r3, [r0, #0]
 8085630:	2001      	movs	r0, #1
 8085632:	e000      	b.n	8085636 <__tzcalc_limits+0x142>
 8085634:	2000      	movs	r0, #0
 8085636:	b003      	add	sp, #12
 8085638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808563c:	080865b0 	.word	0x080865b0
 8085640:	00015180 	.word	0x00015180

08085644 <__tz_lock>:
 8085644:	4770      	bx	lr

08085646 <__tz_unlock>:
 8085646:	4770      	bx	lr

08085648 <_tzset_unlocked>:
 8085648:	4b01      	ldr	r3, [pc, #4]	; (8085650 <_tzset_unlocked+0x8>)
 808564a:	6818      	ldr	r0, [r3, #0]
 808564c:	f000 b802 	b.w	8085654 <_tzset_unlocked_r>
 8085650:	200000e4 	.word	0x200000e4

08085654 <_tzset_unlocked_r>:
 8085654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085658:	b08d      	sub	sp, #52	; 0x34
 808565a:	4607      	mov	r7, r0
 808565c:	f000 f9be 	bl	80859dc <__gettzinfo>
 8085660:	49b0      	ldr	r1, [pc, #704]	; (8085924 <_tzset_unlocked_r+0x2d0>)
 8085662:	4604      	mov	r4, r0
 8085664:	4638      	mov	r0, r7
 8085666:	f000 f9b1 	bl	80859cc <_getenv_r>
 808566a:	4eaf      	ldr	r6, [pc, #700]	; (8085928 <_tzset_unlocked_r+0x2d4>)
 808566c:	4605      	mov	r5, r0
 808566e:	b960      	cbnz	r0, 808568a <_tzset_unlocked_r+0x36>
 8085670:	4bae      	ldr	r3, [pc, #696]	; (808592c <_tzset_unlocked_r+0x2d8>)
 8085672:	4aaf      	ldr	r2, [pc, #700]	; (8085930 <_tzset_unlocked_r+0x2dc>)
 8085674:	6018      	str	r0, [r3, #0]
 8085676:	4baf      	ldr	r3, [pc, #700]	; (8085934 <_tzset_unlocked_r+0x2e0>)
 8085678:	6018      	str	r0, [r3, #0]
 808567a:	4baf      	ldr	r3, [pc, #700]	; (8085938 <_tzset_unlocked_r+0x2e4>)
 808567c:	6830      	ldr	r0, [r6, #0]
 808567e:	601a      	str	r2, [r3, #0]
 8085680:	605a      	str	r2, [r3, #4]
 8085682:	f7fc fdcf 	bl	8082224 <free>
 8085686:	6035      	str	r5, [r6, #0]
 8085688:	e148      	b.n	808591c <_tzset_unlocked_r+0x2c8>
 808568a:	6831      	ldr	r1, [r6, #0]
 808568c:	b979      	cbnz	r1, 80856ae <_tzset_unlocked_r+0x5a>
 808568e:	6830      	ldr	r0, [r6, #0]
 8085690:	f7fc fdc8 	bl	8082224 <free>
 8085694:	4628      	mov	r0, r5
 8085696:	f7ff fdf8 	bl	808528a <strlen>
 808569a:	1c41      	adds	r1, r0, #1
 808569c:	4638      	mov	r0, r7
 808569e:	f7fc fdf1 	bl	8082284 <_malloc_r>
 80856a2:	6030      	str	r0, [r6, #0]
 80856a4:	b148      	cbz	r0, 80856ba <_tzset_unlocked_r+0x66>
 80856a6:	4629      	mov	r1, r5
 80856a8:	f7ff fdcb 	bl	8085242 <strcpy>
 80856ac:	e005      	b.n	80856ba <_tzset_unlocked_r+0x66>
 80856ae:	f7ff fdbe 	bl	808522e <strcmp>
 80856b2:	2800      	cmp	r0, #0
 80856b4:	f000 8132 	beq.w	808591c <_tzset_unlocked_r+0x2c8>
 80856b8:	e7e9      	b.n	808568e <_tzset_unlocked_r+0x3a>
 80856ba:	782b      	ldrb	r3, [r5, #0]
 80856bc:	ae0a      	add	r6, sp, #40	; 0x28
 80856be:	2b3a      	cmp	r3, #58	; 0x3a
 80856c0:	bf08      	it	eq
 80856c2:	3501      	addeq	r5, #1
 80856c4:	4633      	mov	r3, r6
 80856c6:	4a9d      	ldr	r2, [pc, #628]	; (808593c <_tzset_unlocked_r+0x2e8>)
 80856c8:	499d      	ldr	r1, [pc, #628]	; (8085940 <_tzset_unlocked_r+0x2ec>)
 80856ca:	4628      	mov	r0, r5
 80856cc:	f7fc fdc2 	bl	8082254 <siscanf>
 80856d0:	2800      	cmp	r0, #0
 80856d2:	f340 8123 	ble.w	808591c <_tzset_unlocked_r+0x2c8>
 80856d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80856d8:	18ef      	adds	r7, r5, r3
 80856da:	5ceb      	ldrb	r3, [r5, r3]
 80856dc:	2b2d      	cmp	r3, #45	; 0x2d
 80856de:	d103      	bne.n	80856e8 <_tzset_unlocked_r+0x94>
 80856e0:	3701      	adds	r7, #1
 80856e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80856e6:	e003      	b.n	80856f0 <_tzset_unlocked_r+0x9c>
 80856e8:	2b2b      	cmp	r3, #43	; 0x2b
 80856ea:	bf08      	it	eq
 80856ec:	3701      	addeq	r7, #1
 80856ee:	2501      	movs	r5, #1
 80856f0:	f10d 0a20 	add.w	sl, sp, #32
 80856f4:	f10d 0b1e 	add.w	fp, sp, #30
 80856f8:	f04f 0800 	mov.w	r8, #0
 80856fc:	9603      	str	r6, [sp, #12]
 80856fe:	f8cd a008 	str.w	sl, [sp, #8]
 8085702:	9601      	str	r6, [sp, #4]
 8085704:	f8cd b000 	str.w	fp, [sp]
 8085708:	4633      	mov	r3, r6
 808570a:	aa07      	add	r2, sp, #28
 808570c:	498d      	ldr	r1, [pc, #564]	; (8085944 <_tzset_unlocked_r+0x2f0>)
 808570e:	4638      	mov	r0, r7
 8085710:	f8ad 801e 	strh.w	r8, [sp, #30]
 8085714:	f8ad 8020 	strh.w	r8, [sp, #32]
 8085718:	f7fc fd9c 	bl	8082254 <siscanf>
 808571c:	4540      	cmp	r0, r8
 808571e:	f340 80fd 	ble.w	808591c <_tzset_unlocked_r+0x2c8>
 8085722:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085726:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808572a:	213c      	movs	r1, #60	; 0x3c
 808572c:	fb01 3302 	mla	r3, r1, r2, r3
 8085730:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085734:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085738:	fb01 3302 	mla	r3, r1, r2, r3
 808573c:	435d      	muls	r5, r3
 808573e:	4b7f      	ldr	r3, [pc, #508]	; (808593c <_tzset_unlocked_r+0x2e8>)
 8085740:	6225      	str	r5, [r4, #32]
 8085742:	4d7d      	ldr	r5, [pc, #500]	; (8085938 <_tzset_unlocked_r+0x2e4>)
 8085744:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8085950 <_tzset_unlocked_r+0x2fc>
 8085748:	602b      	str	r3, [r5, #0]
 808574a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808574c:	464a      	mov	r2, r9
 808574e:	441f      	add	r7, r3
 8085750:	497b      	ldr	r1, [pc, #492]	; (8085940 <_tzset_unlocked_r+0x2ec>)
 8085752:	4633      	mov	r3, r6
 8085754:	4638      	mov	r0, r7
 8085756:	f7fc fd7d 	bl	8082254 <siscanf>
 808575a:	4540      	cmp	r0, r8
 808575c:	dc08      	bgt.n	8085770 <_tzset_unlocked_r+0x11c>
 808575e:	682b      	ldr	r3, [r5, #0]
 8085760:	6a22      	ldr	r2, [r4, #32]
 8085762:	606b      	str	r3, [r5, #4]
 8085764:	4b71      	ldr	r3, [pc, #452]	; (808592c <_tzset_unlocked_r+0x2d8>)
 8085766:	601a      	str	r2, [r3, #0]
 8085768:	4b72      	ldr	r3, [pc, #456]	; (8085934 <_tzset_unlocked_r+0x2e0>)
 808576a:	f8c3 8000 	str.w	r8, [r3]
 808576e:	e0d5      	b.n	808591c <_tzset_unlocked_r+0x2c8>
 8085770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085772:	f8c5 9004 	str.w	r9, [r5, #4]
 8085776:	18fd      	adds	r5, r7, r3
 8085778:	5cfb      	ldrb	r3, [r7, r3]
 808577a:	2b2d      	cmp	r3, #45	; 0x2d
 808577c:	d103      	bne.n	8085786 <_tzset_unlocked_r+0x132>
 808577e:	3501      	adds	r5, #1
 8085780:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8085784:	e003      	b.n	808578e <_tzset_unlocked_r+0x13a>
 8085786:	2b2b      	cmp	r3, #43	; 0x2b
 8085788:	bf08      	it	eq
 808578a:	3501      	addeq	r5, #1
 808578c:	2701      	movs	r7, #1
 808578e:	2300      	movs	r3, #0
 8085790:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085794:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085798:	f8ad 3020 	strh.w	r3, [sp, #32]
 808579c:	930a      	str	r3, [sp, #40]	; 0x28
 808579e:	9603      	str	r6, [sp, #12]
 80857a0:	f8cd a008 	str.w	sl, [sp, #8]
 80857a4:	9601      	str	r6, [sp, #4]
 80857a6:	f8cd b000 	str.w	fp, [sp]
 80857aa:	4633      	mov	r3, r6
 80857ac:	aa07      	add	r2, sp, #28
 80857ae:	4965      	ldr	r1, [pc, #404]	; (8085944 <_tzset_unlocked_r+0x2f0>)
 80857b0:	4628      	mov	r0, r5
 80857b2:	f7fc fd4f 	bl	8082254 <siscanf>
 80857b6:	2800      	cmp	r0, #0
 80857b8:	dc04      	bgt.n	80857c4 <_tzset_unlocked_r+0x170>
 80857ba:	6a23      	ldr	r3, [r4, #32]
 80857bc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80857c0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80857c2:	e00e      	b.n	80857e2 <_tzset_unlocked_r+0x18e>
 80857c4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80857c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80857cc:	213c      	movs	r1, #60	; 0x3c
 80857ce:	fb01 3302 	mla	r3, r1, r2, r3
 80857d2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80857d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80857da:	fb01 3302 	mla	r3, r1, r2, r3
 80857de:	435f      	muls	r7, r3
 80857e0:	63e7      	str	r7, [r4, #60]	; 0x3c
 80857e2:	4627      	mov	r7, r4
 80857e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80857e6:	f04f 0900 	mov.w	r9, #0
 80857ea:	441d      	add	r5, r3
 80857ec:	782b      	ldrb	r3, [r5, #0]
 80857ee:	2b2c      	cmp	r3, #44	; 0x2c
 80857f0:	bf08      	it	eq
 80857f2:	3501      	addeq	r5, #1
 80857f4:	f895 8000 	ldrb.w	r8, [r5]
 80857f8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80857fc:	d126      	bne.n	808584c <_tzset_unlocked_r+0x1f8>
 80857fe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8085802:	9302      	str	r3, [sp, #8]
 8085804:	ab09      	add	r3, sp, #36	; 0x24
 8085806:	9300      	str	r3, [sp, #0]
 8085808:	9603      	str	r6, [sp, #12]
 808580a:	9601      	str	r6, [sp, #4]
 808580c:	4633      	mov	r3, r6
 808580e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8085812:	494d      	ldr	r1, [pc, #308]	; (8085948 <_tzset_unlocked_r+0x2f4>)
 8085814:	4628      	mov	r0, r5
 8085816:	f7fc fd1d 	bl	8082254 <siscanf>
 808581a:	2803      	cmp	r0, #3
 808581c:	d17e      	bne.n	808591c <_tzset_unlocked_r+0x2c8>
 808581e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8085822:	1e4b      	subs	r3, r1, #1
 8085824:	2b0b      	cmp	r3, #11
 8085826:	d879      	bhi.n	808591c <_tzset_unlocked_r+0x2c8>
 8085828:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808582c:	1e53      	subs	r3, r2, #1
 808582e:	2b04      	cmp	r3, #4
 8085830:	d874      	bhi.n	808591c <_tzset_unlocked_r+0x2c8>
 8085832:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8085836:	2b06      	cmp	r3, #6
 8085838:	d870      	bhi.n	808591c <_tzset_unlocked_r+0x2c8>
 808583a:	f887 8008 	strb.w	r8, [r7, #8]
 808583e:	60f9      	str	r1, [r7, #12]
 8085840:	613a      	str	r2, [r7, #16]
 8085842:	617b      	str	r3, [r7, #20]
 8085844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085846:	eb05 0803 	add.w	r8, r5, r3
 808584a:	e02a      	b.n	80858a2 <_tzset_unlocked_r+0x24e>
 808584c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8085850:	bf06      	itte	eq
 8085852:	4643      	moveq	r3, r8
 8085854:	3501      	addeq	r5, #1
 8085856:	2344      	movne	r3, #68	; 0x44
 8085858:	220a      	movs	r2, #10
 808585a:	a90b      	add	r1, sp, #44	; 0x2c
 808585c:	4628      	mov	r0, r5
 808585e:	9305      	str	r3, [sp, #20]
 8085860:	f7ff fe3e 	bl	80854e0 <strtoul>
 8085864:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8085868:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808586c:	4545      	cmp	r5, r8
 808586e:	9b05      	ldr	r3, [sp, #20]
 8085870:	d114      	bne.n	808589c <_tzset_unlocked_r+0x248>
 8085872:	234d      	movs	r3, #77	; 0x4d
 8085874:	f1b9 0f00 	cmp.w	r9, #0
 8085878:	d107      	bne.n	808588a <_tzset_unlocked_r+0x236>
 808587a:	7223      	strb	r3, [r4, #8]
 808587c:	2303      	movs	r3, #3
 808587e:	60e3      	str	r3, [r4, #12]
 8085880:	2302      	movs	r3, #2
 8085882:	6123      	str	r3, [r4, #16]
 8085884:	f8c4 9014 	str.w	r9, [r4, #20]
 8085888:	e00b      	b.n	80858a2 <_tzset_unlocked_r+0x24e>
 808588a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808588e:	230b      	movs	r3, #11
 8085890:	62a3      	str	r3, [r4, #40]	; 0x28
 8085892:	2301      	movs	r3, #1
 8085894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8085896:	2300      	movs	r3, #0
 8085898:	6323      	str	r3, [r4, #48]	; 0x30
 808589a:	e002      	b.n	80858a2 <_tzset_unlocked_r+0x24e>
 808589c:	b280      	uxth	r0, r0
 808589e:	723b      	strb	r3, [r7, #8]
 80858a0:	6178      	str	r0, [r7, #20]
 80858a2:	2302      	movs	r3, #2
 80858a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80858a8:	2300      	movs	r3, #0
 80858aa:	f8ad 301e 	strh.w	r3, [sp, #30]
 80858ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80858b2:	930a      	str	r3, [sp, #40]	; 0x28
 80858b4:	f898 3000 	ldrb.w	r3, [r8]
 80858b8:	2b2f      	cmp	r3, #47	; 0x2f
 80858ba:	d10b      	bne.n	80858d4 <_tzset_unlocked_r+0x280>
 80858bc:	9603      	str	r6, [sp, #12]
 80858be:	f8cd a008 	str.w	sl, [sp, #8]
 80858c2:	9601      	str	r6, [sp, #4]
 80858c4:	f8cd b000 	str.w	fp, [sp]
 80858c8:	4633      	mov	r3, r6
 80858ca:	aa07      	add	r2, sp, #28
 80858cc:	491f      	ldr	r1, [pc, #124]	; (808594c <_tzset_unlocked_r+0x2f8>)
 80858ce:	4640      	mov	r0, r8
 80858d0:	f7fc fcc0 	bl	8082254 <siscanf>
 80858d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80858d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80858dc:	213c      	movs	r1, #60	; 0x3c
 80858de:	fb01 3302 	mla	r3, r1, r2, r3
 80858e2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80858e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80858ea:	fb01 3302 	mla	r3, r1, r2, r3
 80858ee:	61bb      	str	r3, [r7, #24]
 80858f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80858f2:	f109 0901 	add.w	r9, r9, #1
 80858f6:	f1b9 0f02 	cmp.w	r9, #2
 80858fa:	4445      	add	r5, r8
 80858fc:	f107 071c 	add.w	r7, r7, #28
 8085900:	f47f af74 	bne.w	80857ec <_tzset_unlocked_r+0x198>
 8085904:	6860      	ldr	r0, [r4, #4]
 8085906:	f7ff fdf5 	bl	80854f4 <__tzcalc_limits>
 808590a:	6a22      	ldr	r2, [r4, #32]
 808590c:	4b07      	ldr	r3, [pc, #28]	; (808592c <_tzset_unlocked_r+0x2d8>)
 808590e:	601a      	str	r2, [r3, #0]
 8085910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8085912:	1a9b      	subs	r3, r3, r2
 8085914:	4a07      	ldr	r2, [pc, #28]	; (8085934 <_tzset_unlocked_r+0x2e0>)
 8085916:	bf18      	it	ne
 8085918:	2301      	movne	r3, #1
 808591a:	6013      	str	r3, [r2, #0]
 808591c:	b00d      	add	sp, #52	; 0x34
 808591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085922:	bf00      	nop
 8085924:	08086610 	.word	0x08086610
 8085928:	20000984 	.word	0x20000984
 808592c:	2000098c 	.word	0x2000098c
 8085930:	08086613 	.word	0x08086613
 8085934:	20000988 	.word	0x20000988
 8085938:	200000e8 	.word	0x200000e8
 808593c:	20000977 	.word	0x20000977
 8085940:	08086617 	.word	0x08086617
 8085944:	0808663a 	.word	0x0808663a
 8085948:	08086626 	.word	0x08086626
 808594c:	08086639 	.word	0x08086639
 8085950:	2000096c 	.word	0x2000096c

08085954 <_findenv_r>:
 8085954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085958:	4607      	mov	r7, r0
 808595a:	468b      	mov	fp, r1
 808595c:	4690      	mov	r8, r2
 808595e:	f000 f8d7 	bl	8085b10 <__env_lock>
 8085962:	4b19      	ldr	r3, [pc, #100]	; (80859c8 <_findenv_r+0x74>)
 8085964:	681d      	ldr	r5, [r3, #0]
 8085966:	469a      	mov	sl, r3
 8085968:	b13d      	cbz	r5, 808597a <_findenv_r+0x26>
 808596a:	465c      	mov	r4, fp
 808596c:	4623      	mov	r3, r4
 808596e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085972:	b142      	cbz	r2, 8085986 <_findenv_r+0x32>
 8085974:	2a3d      	cmp	r2, #61	; 0x3d
 8085976:	461c      	mov	r4, r3
 8085978:	d1f8      	bne.n	808596c <_findenv_r+0x18>
 808597a:	4638      	mov	r0, r7
 808597c:	f000 f8c9 	bl	8085b12 <__env_unlock>
 8085980:	2000      	movs	r0, #0
 8085982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085986:	ebcb 0404 	rsb	r4, fp, r4
 808598a:	46a9      	mov	r9, r5
 808598c:	f859 0b04 	ldr.w	r0, [r9], #4
 8085990:	2800      	cmp	r0, #0
 8085992:	d0f2      	beq.n	808597a <_findenv_r+0x26>
 8085994:	4622      	mov	r2, r4
 8085996:	4659      	mov	r1, fp
 8085998:	f7ff fc7f 	bl	808529a <strncmp>
 808599c:	b988      	cbnz	r0, 80859c2 <_findenv_r+0x6e>
 808599e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80859a2:	191e      	adds	r6, r3, r4
 80859a4:	5d1b      	ldrb	r3, [r3, r4]
 80859a6:	2b3d      	cmp	r3, #61	; 0x3d
 80859a8:	d10b      	bne.n	80859c2 <_findenv_r+0x6e>
 80859aa:	f8da 3000 	ldr.w	r3, [sl]
 80859ae:	4638      	mov	r0, r7
 80859b0:	1aed      	subs	r5, r5, r3
 80859b2:	10ad      	asrs	r5, r5, #2
 80859b4:	f8c8 5000 	str.w	r5, [r8]
 80859b8:	f000 f8ab 	bl	8085b12 <__env_unlock>
 80859bc:	1c70      	adds	r0, r6, #1
 80859be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80859c2:	464d      	mov	r5, r9
 80859c4:	e7e1      	b.n	808598a <_findenv_r+0x36>
 80859c6:	bf00      	nop
 80859c8:	20000130 	.word	0x20000130

080859cc <_getenv_r>:
 80859cc:	b507      	push	{r0, r1, r2, lr}
 80859ce:	aa01      	add	r2, sp, #4
 80859d0:	f7ff ffc0 	bl	8085954 <_findenv_r>
 80859d4:	b003      	add	sp, #12
 80859d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080859dc <__gettzinfo>:
 80859dc:	4800      	ldr	r0, [pc, #0]	; (80859e0 <__gettzinfo+0x4>)
 80859de:	4770      	bx	lr
 80859e0:	200000f0 	.word	0x200000f0

080859e4 <gmtime_r>:
 80859e4:	6802      	ldr	r2, [r0, #0]
 80859e6:	4b46      	ldr	r3, [pc, #280]	; (8085b00 <gmtime_r+0x11c>)
 80859e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80859ea:	fb92 f4f3 	sdiv	r4, r2, r3
 80859ee:	fb03 2214 	mls	r2, r3, r4, r2
 80859f2:	2a00      	cmp	r2, #0
 80859f4:	bfbc      	itt	lt
 80859f6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80859fa:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80859fe:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8085a02:	fb92 f3f0 	sdiv	r3, r2, r0
 8085a06:	fb00 2213 	mls	r2, r0, r3, r2
 8085a0a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8085a0e:	608b      	str	r3, [r1, #8]
 8085a10:	fb92 f3f0 	sdiv	r3, r2, r0
 8085a14:	fb00 2213 	mls	r2, r0, r3, r2
 8085a18:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8085a1c:	bfac      	ite	ge
 8085a1e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8085a22:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8085a26:	604b      	str	r3, [r1, #4]
 8085a28:	600a      	str	r2, [r1, #0]
 8085a2a:	2307      	movs	r3, #7
 8085a2c:	1ce2      	adds	r2, r4, #3
 8085a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8085a32:	4d34      	ldr	r5, [pc, #208]	; (8085b04 <gmtime_r+0x120>)
 8085a34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085a38:	fb94 f5f5 	sdiv	r5, r4, r5
 8085a3c:	1ad3      	subs	r3, r2, r3
 8085a3e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8085a42:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8085a46:	618b      	str	r3, [r1, #24]
 8085a48:	4b2f      	ldr	r3, [pc, #188]	; (8085b08 <gmtime_r+0x124>)
 8085a4a:	4830      	ldr	r0, [pc, #192]	; (8085b0c <gmtime_r+0x128>)
 8085a4c:	fb03 4405 	mla	r4, r3, r5, r4
 8085a50:	fbb4 f2f2 	udiv	r2, r4, r2
 8085a54:	fbb4 f3f7 	udiv	r3, r4, r7
 8085a58:	fbb4 f0f0 	udiv	r0, r4, r0
 8085a5c:	4422      	add	r2, r4
 8085a5e:	1ad2      	subs	r2, r2, r3
 8085a60:	f648 6694 	movw	r6, #36500	; 0x8e94
 8085a64:	1a13      	subs	r3, r2, r0
 8085a66:	f240 126d 	movw	r2, #365	; 0x16d
 8085a6a:	fbb3 f6f6 	udiv	r6, r3, r6
 8085a6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8085a72:	fbb3 f3f7 	udiv	r3, r3, r7
 8085a76:	4434      	add	r4, r6
 8085a78:	1ae3      	subs	r3, r4, r3
 8085a7a:	fb02 3310 	mls	r3, r2, r0, r3
 8085a7e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8085a82:	2499      	movs	r4, #153	; 0x99
 8085a84:	3202      	adds	r2, #2
 8085a86:	fbb2 f2f4 	udiv	r2, r2, r4
 8085a8a:	4354      	muls	r4, r2
 8085a8c:	1ca6      	adds	r6, r4, #2
 8085a8e:	2405      	movs	r4, #5
 8085a90:	fbb6 f4f4 	udiv	r4, r6, r4
 8085a94:	2a0a      	cmp	r2, #10
 8085a96:	bf34      	ite	cc
 8085a98:	2602      	movcc	r6, #2
 8085a9a:	f06f 0609 	mvncs.w	r6, #9
 8085a9e:	4416      	add	r6, r2
 8085aa0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085aa4:	fb02 0505 	mla	r5, r2, r5, r0
 8085aa8:	1c5f      	adds	r7, r3, #1
 8085aaa:	2e01      	cmp	r6, #1
 8085aac:	bf98      	it	ls
 8085aae:	3501      	addls	r5, #1
 8085ab0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8085ab4:	eba7 0704 	sub.w	r7, r7, r4
 8085ab8:	d302      	bcc.n	8085ac0 <gmtime_r+0xdc>
 8085aba:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8085abe:	e014      	b.n	8085aea <gmtime_r+0x106>
 8085ac0:	0782      	lsls	r2, r0, #30
 8085ac2:	d105      	bne.n	8085ad0 <gmtime_r+0xec>
 8085ac4:	2464      	movs	r4, #100	; 0x64
 8085ac6:	fbb0 f2f4 	udiv	r2, r0, r4
 8085aca:	fb04 0212 	mls	r2, r4, r2, r0
 8085ace:	b94a      	cbnz	r2, 8085ae4 <gmtime_r+0x100>
 8085ad0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085ad4:	fbb0 f4f2 	udiv	r4, r0, r2
 8085ad8:	fb02 0014 	mls	r0, r2, r4, r0
 8085adc:	fab0 f280 	clz	r2, r0
 8085ae0:	0952      	lsrs	r2, r2, #5
 8085ae2:	e000      	b.n	8085ae6 <gmtime_r+0x102>
 8085ae4:	2201      	movs	r2, #1
 8085ae6:	333b      	adds	r3, #59	; 0x3b
 8085ae8:	441a      	add	r2, r3
 8085aea:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8085aee:	2300      	movs	r3, #0
 8085af0:	61ca      	str	r2, [r1, #28]
 8085af2:	614d      	str	r5, [r1, #20]
 8085af4:	610e      	str	r6, [r1, #16]
 8085af6:	60cf      	str	r7, [r1, #12]
 8085af8:	620b      	str	r3, [r1, #32]
 8085afa:	4608      	mov	r0, r1
 8085afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085afe:	bf00      	nop
 8085b00:	00015180 	.word	0x00015180
 8085b04:	00023ab1 	.word	0x00023ab1
 8085b08:	fffdc54f 	.word	0xfffdc54f
 8085b0c:	00023ab0 	.word	0x00023ab0

08085b10 <__env_lock>:
 8085b10:	4770      	bx	lr

08085b12 <__env_unlock>:
 8085b12:	4770      	bx	lr

08085b14 <dynalib_user>:
 8085b14:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8085b24:	0000 0000                                   ....

08085b28 <_ZTV8MB85RC64>:
	...
 8085b30:	00f9 0808 010d 0808 1a69 0808 1b15 0808     ........i.......
 8085b40:	1b8f 0808 5fa2 0808 5fdd 0808 5fe2 0808     ....._..._..._..
 8085b50:	5fe7 0808 5feb 0808 5ff0 0808 5ff5 0808     ._..._..._..._..
 8085b60:	5ff9 0808 6004 0808 600f 0808 5fa2 0808     ._...`...`..._..
 8085b70:	5faa 0808 5fae 0808 5fb7 0808 5fbf 0808     ._..._..._..._..
 8085b80:	5fcb 0808 5fd1 0808                         ._..._..

08085b88 <_ZL17FRAMversionNumber>:
 8085b88:	0001 0000 6925 252f 2c69 2520 2c69 2520     ....%i/%i, %i, %
 8085b98:	2c69 2520 0069 202c 5400 6d69 2c65 4420     i, %i., .Time, D
 8085ba8:	6961 796c 202c 614d 2c78 4d20 6e69 202c     aily, Max, Min, 
 8085bb8:	3231 4d41 202c 4131 2c4d 3220 4d41 202c     12AM, 1AM, 2AM, 
 8085bc8:	4133 2c4d 3420 4d41 202c 4135 2c4d 3620     3AM, 4AM, 5AM, 6
 8085bd8:	4d41 202c 4137 2c4d 3820 4d41 202c 4139     AM, 7AM, 8AM, 9A
 8085be8:	2c4d 3120 4130 2c4d 3120 4131 2c4d 3120     M, 10AM, 11AM, 1
 8085bf8:	5032 2c4d 3120 4d50 202c 5032 2c4d 3320     2PM, 1PM, 2PM, 3
 8085c08:	4d50 202c 5034 2c4d 3520 4d50 202c 5036     PM, 4PM, 5PM, 6P
 8085c18:	2c4d 3720 4d50 202c 5038 2c4d 3920 4d50     M, 7PM, 8PM, 9PM
 8085c28:	202c 3031 4d50 202c 3131 4d50 2500 2073     , 10PM, 11PM.%s 
 8085c38:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
 8085c48:	6630 2525 0020 5441 432b 5546 3d4e 3631     0f%% .AT+CFUN=16
 8085c58:	0a0d 5000 6572 7373 7275 2065 6553 736e     ...Pressure Sens
 8085c68:	726f 4100 6c6c 6320 756f 746e 2073 6572     or.All counts re
 8085c78:	6573 0074 6148 6472 5220 7365 7465 6920     set.Hard Reset i
 8085c88:	206e 2032 6573 6f63 646e 0073 6843 6e61     n 2 seconds.Chan
 8085c98:	6967 676e 6420 7665 6369 2065 6f74 6420     ging device to d
 8085ca8:	7369 6f63 6e6e 6365 6574 2064 6f6d 6564     isconnected mode
 8085cb8:	2d20 5520 6573 2072 202f 6552 6573 2074      - User / Reset 
 8085cc8:	6f74 7220 6365 766f 7265 3000 4300 6168     to recover.0.Cha
 8085cd8:	676e 6e69 2067 6564 6976 6563 7420 206f     nging device to 
 8085ce8:	6f63 6e6e 6365 6574 2064 6f6d 6564 2d20     connected mode -
 8085cf8:	5520 6573 2072 202f 6552 6573 2074 6f74      User / Reset to
 8085d08:	7220 6365 766f 7265 5300 7465 5320 6c6f      recover.Set Sol
 8085d18:	7261 5020 776f 7265 6465 4d20 646f 0065     ar Powered Mode.
 8085d28:	6c43 6165 6572 2064 6f53 616c 2072 6f50     Cleared Solar Po
 8085d38:	6577 6572 2064 6f4d 6564 5300 7465 5320     wered Mode.Set S
 8085d48:	6e65 6f73 2072 6f4d 6564 7420 206f 7250     ensor Mode to Pr
 8085d58:	7365 7573 6572 5000 5249 5320 6e65 6f73     essure.PIR Senso
 8085d68:	0072 6553 2074 6553 736e 726f 4d20 646f     r.Set Sensor Mod
 8085d78:	2065 6f74 5020 5249 3200 4c00 6765 6361     e to PIR.2.Legac
 8085d88:	2079 6553 736e 726f 5300 7465 5320 6e65     y Sensor.Set Sen
 8085d98:	6f73 2072 6f4d 6564 7420 206f 654c 6167     sor Mode to Lega
 8085da8:	7963 5300 7465 5620 7265 6f62 6573 4d20     cy.Set Verbose M
 8085db8:	646f 0065 6c43 6165 6572 2064 6556 6272     ode.Cleared Verb
 8085dc8:	736f 2065 6f4d 6564 2500 2e32 6631 5520     ose Mode.%2.1f U
 8085dd8:	4354 5400 6d69 2065 6f7a 656e 6f20 6666     TC.Time zone off
 8085de8:	6573 2074 6925 4f00 6570 206e 6974 656d     set %i.Open time
 8085df8:	7320 7465 7420 206f 6925 4300 6f6c 6973      set to %i.Closi
 8085e08:	676e 7420 6d69 2065 6573 2074 6f74 2520     ng time set to %
 8085e18:	0069 6f4c 2077 6f50 6577 2072 6f4d 6564     i.Low Power Mode
 8085e28:	5400 7572 0065 6f4e 6d72 6c61 4f20 6570     .True.Normal Ope
 8085e38:	6172 6974 6e6f 0073 6146 736c 0065 6f4c     rations.False.Lo
 8085e48:	6461 6e69 2067 7953 7473 6d65 4420 6665     ading System Def
 8085e58:	7561 746c 0073 7246 6d6f 2520 2073 6f74     aults.From %s to
 8085e68:	2520 0073 7453 7461 2065 7254 6e61 6973      %s.State Transi
 8085e78:	6974 6e6f 4500 7272 726f 5320 6174 6574     tion.Error State
 8085e88:	2d20 5220 7365 7465 5300 6174 6574 4500      - Reset.State.E
 8085e98:	7272 726f 5320 6174 6574 2d20 4620 6c75     rror State - Ful
 8085ea8:	206c 6f4d 6564 206d 6552 6573 0074 5344     l Modem Reset.DS
 8085eb8:	2054 666f 7366 7465 2520 2e32 6631 4800     T offset %2.1f.H
 8085ec8:	756f 6c72 4379 756f 746e 4400 6961 796c     ourlyCount.Daily
 8085ed8:	6f43 6e75 0074 6953 6e67 6c61 5200 6c65     Count.Signal.Rel
 8085ee8:	6165 6573 7300 6174 6574 664f 6843 0067     ease.stateOfChg.
 8085ef8:	6c43 736f 5465 6d69 0065 6c41 7265 7374     CloseTime.Alerts
 8085f08:	5400 6d69 4f65 6666 6573 0074 6142 7474     .TimeOffset.Batt
 8085f18:	7265 4379 6e6f 6574 7478 5300 6e65 6f73     eryContext.Senso
 8085f28:	5372 6174 7574 0073 6572 6573 4674 4152     rStatus.resetFRA
 8085f38:	004d 6572 6573 4374 756f 746e 0073 6148     M.resetCounts.Ha
 8085f48:	6472 6552 6573 0074 6553 2d74 6954 656d     rdReset.Set-Time
 8085f58:	6f7a 656e 5300 7465 442d 5453 664f 7366     zone.Set-DSTOffs
 8085f68:	7465 5300 7465 4f2d 6570 546e 6d69 0065     et.Set-OpenTime.
 8085f78:	6553 2d74 6c43 736f 0065 6553 2d74 6553     Set-Close.Set-Se
 8085f88:	736e 726f 7954 6570 5300 7465 442d 7369     nsorType.Set-Dis
 8085f98:	6f63 6e6e 6365 6574 0064 6e55 6e6b 776f     connected.Unknow
 8085fa8:	006e 6f4e 2074 6843 7261 6967 676e 4300     n.Not Charging.C
 8085fb8:	6168 6772 6465 4400 7369 6863 7261 6967     harged.Dischargi
 8085fc8:	676e 4600 7561 746c 4400 6369 6e6f 656e     ng.Fault.Diconne
 8085fd8:	7463 6465 4e00 6e6f 0065 6957 6946 4700     cted.None.WiFi.G
 8085fe8:	4d53 5500 544d 0053 4443 414d 4c00 4554     SM.UMTS.CDMA.LTE
 8085ff8:	4900 4545 3845 3230 3531 0034 544c 5f45     .IEEE802154.LTE_
 8086008:	4143 5f54 314d 4c00 4554 435f 5441 4e5f     CAT_M1.LTE_CAT_N
 8086018:	3142 7700 6972 6574 6144 6174 6620 6961     B1.writeData fai
 8086028:	656c 2064 7564 6972 676e 6520 6172 6573     led during erase
 8086038:	6620 6172 416d 6464 3d72 7525 7200 6165      framAddr=%u.rea
 8086048:	2064 6573 2074 6461 7264 7365 2073 6166     d set address fa
 8086058:	6c69 6465 2520 0064 6964 6e64 7427 7220     iled %d.didn't r
 8086068:	6365 6965 6576 6520 6f6e 6775 2068 7962     eceive enough by
 8086078:	6574 2073 6f63 6e75 3d74 7525 7700 6972     tes count=%u.wri
 8086088:	6574 6620 6961 656c 2064 6425 0000 0000     te failed %d....

08086098 <_ZTV6MB85RC>:
	...
 80860a0:	1989 0808 198b 0808 1a69 0808 1b15 0808     ........i.......
 80860b0:	1b8f 0808 7550 6c62 7369 5168 6575 6575     ....PublishQueue
 80860c0:	7341 6e79 0063 7571 7565 6965 676e 6520     Async.queueing e
 80860d0:	6576 746e 614e 656d 253d 2073 6164 6174     ventName=%s data
 80860e0:	253d 2073 7474 3d6c 6425 6620 616c 7367     =%s ttl=%d flags
 80860f0:	3d31 6425 6620 616c 7367 3d32 6425 7320     1=%d flags2=%d s
 8086100:	7a69 3d65 6425 7000 6275 696c 6873 6e69     ize=%d.publishin
 8086110:	2067 7325 2520 2073 7474 3d6c 6425 6620     g %s %s ttl=%d f
 8086120:	616c 7367 253d 0078 7570 6c62 7369 6568     lags=%x.publishe
 8086130:	2064 7573 6363 7365 6673 6c75 796c 7000     d successfully.p
 8086140:	6275 696c 6873 6465 6620 6961 656c 2c64     ublished failed,
 8086150:	7720 6c69 206c 6572 7274 2079 6e69 2520      will retry in %
 8086160:	756c 6d20 0073 7061 2e70 7570 7162 0000     lu ms.app.pubq..

08086170 <_ZTVN5spark13CellularClassE>:
	...
 8086178:	2365 0808 235b 0808 2351 0808 22c3 0808     e#..[#..Q#..."..
 8086188:	2345 0808 2339 0808 232d 0808 2325 0808     E#..9#..-#..%#..
 8086198:	231b 0808 2311 0808 22cd 0808               .#...#..."..

080861a4 <_ZTV14CellularSignal>:
	...
 80861ac:	2415 0808 2465 0808 2417 0808 24a5 0808     .$..e$...$...$..
 80861bc:	241d 0808 2475 0808 2441 0808 252b 0808     .$..u$..A$..+%..
 80861cc:	fffc ffff 0000 0000 2555 0808               ........U%..

080861d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80861e0:	255d 0808 2563 0808 25a7 0808 2571 0808     ]%..c%...%..q%..
 80861f0:	255f 0808                                   _%..

080861f4 <_ZTV7TwoWire>:
	...
 80861fc:	2b6d 0808 2bb7 0808 2b8f 0808 2b6f 0808     m+...+...+..o+..
 808620c:	2b97 0808 2b9f 0808 2ba7 0808 2baf 0808     .+...+...+...+..

0808621c <_ZTV9IPAddress>:
	...
 8086224:	2d29 0808 2d19 0808 2d1b 0808 6162 6475     )-...-...-..baud
 8086234:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 8086244:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 8086254:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 8086264:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 8086274:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 8086284:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 8086294:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80862a4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80862b4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80862c4:	6564 6174 6c69 2073 203d 6c00 006e 6e66     details = .ln.fn
 80862d4:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
 80862e4:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
 80862f4:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
 8086304:	006c 0000                                   l...

08086308 <_ZTVN5spark12NetworkClassE>:
	...
 8086310:	2dc9 0808 2dd3 0808 2ddd 0808 2de7 0808     .-...-...-...-..
 8086320:	2df1 0808 2dfd 0808 2e09 0808 2e15 0808     .-...-..........
 8086330:	2e1d 0808 2e27 0808 2e31 0808 6977 6972     ....'...1...wiri
 8086340:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
 8086350:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
 8086360:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
 8086370:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8086380:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8086390:	0000 0000                                   ....

08086394 <_ZTV11USARTSerial>:
	...
 808639c:	36b1 0808 3701 0808 370f 0808 2fd9 0808     .6...7...7.../..
 80863ac:	36c5 0808 36e7 0808 36d3 0808 36fb 0808     .6...6...6...6..
 80863bc:	36b3 0808 36b7 0808                         .6...6..

080863c4 <_ZTV9USBSerial>:
	...
 80863cc:	37c5 0808 3815 0808 3823 0808 2fd9 0808     .7...8..#8.../..
 80863dc:	3801 0808 37c7 0808 37dd 0808 380f 0808     .8...7...7...8..
 80863ec:	37f3 0808 37c1 0808                         .7...7..

080863f4 <_ZSt7nothrow>:
	...

080863f5 <day_name.4723>:
 80863f5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8086405:	6972 6153 4a74                                   riSat

0808640a <mon_name.4724>:
 808640a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808641a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808642a:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 808643a:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 808644a:	6425 000a                                   %d..

0808644e <_ctype_>:
 808644e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808645e:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808646e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808647e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808648e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808649e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80864ae:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80864be:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80864ce:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08086550 <__sf_fake_stdin>:
	...

08086570 <__sf_fake_stdout>:
	...

08086590 <__sf_fake_stderr>:
	...

080865b0 <__month_lengths>:
 80865b0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80865c0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80865d0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80865e0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80865f0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8086600:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8086610:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8086620:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8086630:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8086640:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

0808664c <link_const_variable_data_end>:
 808664c:	0808189d 	.word	0x0808189d
 8086650:	08081c41 	.word	0x08081c41
 8086654:	08081c59 	.word	0x08081c59
 8086658:	080823e5 	.word	0x080823e5
 808665c:	08082db9 	.word	0x08082db9
 8086660:	08082e7d 	.word	0x08082e7d
 8086664:	080830a1 	.word	0x080830a1
 8086668:	0808340d 	.word	0x0808340d
 808666c:	0808369d 	.word	0x0808369d
 8086670:	08083d95 	.word	0x08083d95
 8086674:	08083e0d 	.word	0x08083e0d
 8086678:	08083ed1 	.word	0x08083ed1
 808667c:	08083f55 	.word	0x08083f55
 8086680:	08083fd9 	.word	0x08083fd9

08086684 <link_constructors_end>:
	...
