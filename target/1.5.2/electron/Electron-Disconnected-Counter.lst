
/Users/chipmc/Documents/Maker/Particle/Projects/Electron-Disconnected-Counter/target/1.5.2/electron/Electron-Disconnected-Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006810  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08086830  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  20000000  08086834  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000087c  20000134  20000134  00040134  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  08086968  08086968  00036968  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  08086994  08086994  00036994  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c4470  00000000  00000000  00036998  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000118a0  00000000  00000000  000fae08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019075  00000000  00000000  0010c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002680  00000000  00000000  0012571d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004178  00000000  00000000  00127d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002786f  00000000  00000000  0012bf15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002952c  00000000  00000000  00153784  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000af170  00000000  00000000  0017ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d110  00000000  00000000  0022be20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f005 f9ed 	bl	8085410 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f005 f9f2 	bl	8085426 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08086834 	.word	0x08086834
 8080050:	20000134 	.word	0x20000134
 8080054:	20000134 	.word	0x20000134
 8080058:	200009b0 	.word	0x200009b0
 808005c:	200009b0 	.word	0x200009b0

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f003 fe83 	bl	8083d6c <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	080867f4 	.word	0x080867f4
 8080088:	08086828 	.word	0x08086828

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 bacc 	b.w	8081628 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f001 f895 	bl	80811c0 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f003 be29 	b.w	8083cf0 <_post_loop>

0808009e <_Znwj>:
 808009e:	f002 b9f5 	b.w	808248c <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f002 b9fb 	b.w	808249c <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr
	...

080800b8 <_Z11watchdogISRv>:
  else frontTireFlag = true;
}

void watchdogISR()
{
  watchdogFlag = true;
 80800b8:	4b01      	ldr	r3, [pc, #4]	; (80800c0 <_Z11watchdogISRv+0x8>)
 80800ba:	2201      	movs	r2, #1
 80800bc:	701a      	strb	r2, [r3, #0]
 80800be:	4770      	bx	lr
 80800c0:	2000020c 	.word	0x2000020c

080800c4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800c4:	6803      	ldr	r3, [r0, #0]
 80800c6:	4718      	bx	r3

080800c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800c8:	2a01      	cmp	r2, #1
 80800ca:	d002      	beq.n	80800d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800cc:	2a02      	cmp	r2, #2
 80800ce:	d002      	beq.n	80800d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800d0:	e004      	b.n	80800dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800d2:	6001      	str	r1, [r0, #0]
	      break;
 80800d4:	e002      	b.n	80800dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800d6:	680b      	ldr	r3, [r1, #0]
 80800d8:	b100      	cbz	r0, 80800dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800da:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800dc:	2000      	movs	r0, #0
 80800de:	4770      	bx	lr

080800e0 <_Z19countSignalTimerISRv>:
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
}

void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
 80800e0:	2100      	movs	r1, #0
 80800e2:	2007      	movs	r0, #7
 80800e4:	f003 bedd 	b.w	8083ea2 <digitalWrite>

080800e8 <_ZN24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
 80800e8:	b538      	push	{r3, r4, r5, lr}
 80800ea:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
 80800ec:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
 80800ee:	b128      	cbz	r0, 80800fc <_ZN24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
 80800f0:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
 80800f2:	210c      	movs	r1, #12
 80800f4:	f003 ffa7 	bl	8084046 <_ZdlPvj>
            wakeupSource = next;
 80800f8:	4628      	mov	r0, r5

    // Destructor
    ~SystemSleepConfiguration() {
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
        while (wakeupSource) {
 80800fa:	e7f8      	b.n	80800ee <_ZN24SystemSleepConfigurationD1Ev+0x6>
            auto next = wakeupSource->next;
            delete wakeupSource;
            wakeupSource = next;
        }
    }
 80800fc:	4620      	mov	r0, r4
 80800fe:	bd38      	pop	{r3, r4, r5, pc}

08080100 <_Z9resetFRAM6String>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
  return !Particle.connected();
}

int resetFRAM(String command)                                     // Will reset the local counts
{
 8080100:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080102:	4904      	ldr	r1, [pc, #16]	; (8080114 <_Z9resetFRAM6String+0x14>)
 8080104:	f003 f9c0 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080108:	b118      	cbz	r0, 8080112 <_Z9resetFRAM6String+0x12>
  {
    fram.erase();
 808010a:	4803      	ldr	r0, [pc, #12]	; (8080118 <_Z9resetFRAM6String+0x18>)
 808010c:	f001 fd86 	bl	8081c1c <_ZN6MB85RC5eraseEv>
    return 1;
 8080110:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080112:	bd08      	pop	{r3, pc}
 8080114:	0808627e 	.word	0x0808627e
 8080118:	200001b4 	.word	0x200001b4

0808011c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 808011c:	6943      	ldr	r3, [r0, #20]
 808011e:	b113      	cbz	r3, 8080126 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080120:	6983      	ldr	r3, [r0, #24]
 8080122:	300c      	adds	r0, #12
 8080124:	4718      	bx	r3
 8080126:	4770      	bx	lr

08080128 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 8080128:	b510      	push	{r4, lr}
 808012a:	4604      	mov	r4, r0
 808012c:	4b02      	ldr	r3, [pc, #8]	; (8080138 <_ZN8MB85RC64D1Ev+0x10>)
 808012e:	6003      	str	r3, [r0, #0]
 8080130:	f001 fd3c 	bl	8081bac <_ZN6MB85RCD1Ev>
 8080134:	4620      	mov	r0, r4
 8080136:	bd10      	pop	{r4, pc}
 8080138:	08085dbc 	.word	0x08085dbc

0808013c <_ZN8MB85RC64D0Ev>:
 808013c:	b510      	push	{r4, lr}
 808013e:	4604      	mov	r4, r0
 8080140:	f7ff fff2 	bl	8080128 <_ZN8MB85RC64D1Ev>
 8080144:	4620      	mov	r0, r4
 8080146:	2110      	movs	r1, #16
 8080148:	f003 ff7d 	bl	8084046 <_ZdlPvj>
 808014c:	4620      	mov	r0, r4
 808014e:	bd10      	pop	{r4, pc}

08080150 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 8080150:	b513      	push	{r0, r1, r4, lr}
 8080152:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8080154:	2100      	movs	r1, #0
 8080156:	4608      	mov	r0, r1
 8080158:	f001 fea6 	bl	8081ea8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 808015c:	a902      	add	r1, sp, #8
 808015e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 8080160:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8080162:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 8080166:	f001 feb7 	bl	8081ed8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 808016a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 808016c:	b10c      	cbz	r4, 8080172 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 808016e:	2301      	movs	r3, #1
 8080170:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8080172:	2100      	movs	r1, #0
 8080174:	2001      	movs	r0, #1
 8080176:	f001 fe97 	bl	8081ea8 <os_thread_scheduling>
            }
        }
        if (t) {
 808017a:	b12c      	cbz	r4, 8080188 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 808017c:	6823      	ldr	r3, [r4, #0]
 808017e:	4620      	mov	r0, r4
 8080180:	689b      	ldr	r3, [r3, #8]
 8080182:	4798      	blx	r3
            t->running = false;
 8080184:	2300      	movs	r3, #0
 8080186:	7123      	strb	r3, [r4, #4]
        }
    }
 8080188:	b002      	add	sp, #8
 808018a:	bd10      	pop	{r4, pc}

0808018c <_ZN10CloudClass12syncTimeDoneEv.isra.17>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808018c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808018e:	2000      	movs	r0, #0
 8080190:	f002 f91c 	bl	80823cc <spark_sync_time_pending>
 8080194:	b128      	cbz	r0, 80801a2 <_ZN10CloudClass12syncTimeDoneEv.isra.17+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080196:	f002 f901 	bl	808239c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808019a:	f080 0001 	eor.w	r0, r0, #1
 808019e:	b2c0      	uxtb	r0, r0
 80801a0:	bd08      	pop	{r3, pc}
 80801a2:	2001      	movs	r0, #1
    }
 80801a4:	bd08      	pop	{r3, pc}
	...

080801a8 <_Z9sensorISRv>:
  return current.temperature;
}

// Here are the various hardware and timer interrupt service routines
void sensorISR()
{
 80801a8:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.sensorType == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
 80801aa:	4b21      	ldr	r3, [pc, #132]	; (8080230 <_Z9sensorISRv+0x88>)
 80801ac:	781a      	ldrb	r2, [r3, #0]
 80801ae:	4619      	mov	r1, r3
 80801b0:	b922      	cbnz	r2, 80801bc <_Z9sensorISRv+0x14>
 80801b2:	4a20      	ldr	r2, [pc, #128]	; (8080234 <_Z9sensorISRv+0x8c>)
 80801b4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80801b8:	2a01      	cmp	r2, #1
 80801ba:	d115      	bne.n	80801e8 <_Z9sensorISRv+0x40>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
 80801bc:	4b1e      	ldr	r3, [pc, #120]	; (8080238 <_Z9sensorISRv+0x90>)
 80801be:	2201      	movs	r2, #1
 80801c0:	701a      	strb	r2, [r3, #0]
      }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_add(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }
 80801c2:	4b1e      	ldr	r3, [pc, #120]	; (808023c <_Z9sensorISRv+0x94>)
 80801c4:	e853 2f00 	ldrex	r2, [r3]
 80801c8:	3201      	adds	r2, #1
 80801ca:	e843 2000 	strex	r0, r2, [r3]
 80801ce:	2800      	cmp	r0, #0
 80801d0:	d1f8      	bne.n	80801c4 <_Z9sensorISRv+0x1c>
 80801d2:	4b1b      	ldr	r3, [pc, #108]	; (8080240 <_Z9sensorISRv+0x98>)
 80801d4:	e853 2f00 	ldrex	r2, [r3]
 80801d8:	3201      	adds	r2, #1
 80801da:	e843 2000 	strex	r0, r2, [r3]
 80801de:	2800      	cmp	r0, #0
 80801e0:	d1f8      	bne.n	80801d4 <_Z9sensorISRv+0x2c>
    hourlyAtomic.fetch_add(1, std::memory_order_relaxed);
    dailyAtomic.fetch_add(1, std::memory_order_relaxed);
    frontTireFlag = false;
 80801e2:	2300      	movs	r3, #0
 80801e4:	700b      	strb	r3, [r1, #0]
 80801e6:	bd10      	pop	{r4, pc}
  }
  else if (sysStatus.sensorType == 2) {
 80801e8:	2a02      	cmp	r2, #2
 80801ea:	d11e      	bne.n	808022a <_Z9sensorISRv+0x82>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80801ec:	f001 fecc 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
    static long unsigned lastCountMillis = 0;
    if (millis() - lastCountMillis >= 700) {                          // Set a standard 700mSec debounce
 80801f0:	4c14      	ldr	r4, [pc, #80]	; (8080244 <_Z9sensorISRv+0x9c>)
 80801f2:	6823      	ldr	r3, [r4, #0]
 80801f4:	1ac0      	subs	r0, r0, r3
 80801f6:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
 80801fa:	d318      	bcc.n	808022e <_Z9sensorISRv+0x86>
      sensorDetect = true;                                            // sets the sensor flag for the main loop
 80801fc:	4b0e      	ldr	r3, [pc, #56]	; (8080238 <_Z9sensorISRv+0x90>)
 80801fe:	2201      	movs	r2, #1
 8080200:	701a      	strb	r2, [r3, #0]
 8080202:	4b0e      	ldr	r3, [pc, #56]	; (808023c <_Z9sensorISRv+0x94>)
 8080204:	e853 2f00 	ldrex	r2, [r3]
 8080208:	3201      	adds	r2, #1
 808020a:	e843 2100 	strex	r1, r2, [r3]
 808020e:	2900      	cmp	r1, #0
 8080210:	d1f8      	bne.n	8080204 <_Z9sensorISRv+0x5c>
 8080212:	4b0b      	ldr	r3, [pc, #44]	; (8080240 <_Z9sensorISRv+0x98>)
 8080214:	e853 2f00 	ldrex	r2, [r3]
 8080218:	3201      	adds	r2, #1
 808021a:	e843 2100 	strex	r1, r2, [r3]
 808021e:	2900      	cmp	r1, #0
 8080220:	d1f8      	bne.n	8080214 <_Z9sensorISRv+0x6c>
 8080222:	f001 feb1 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
      hourlyAtomic.fetch_add(1, std::memory_order_relaxed);
      dailyAtomic.fetch_add(1, std::memory_order_relaxed);
      lastCountMillis = millis(); 
 8080226:	6020      	str	r0, [r4, #0]
 8080228:	bd10      	pop	{r4, pc}
    }
  }
  else frontTireFlag = true;
 808022a:	2201      	movs	r2, #1
 808022c:	701a      	strb	r2, [r3, #0]
 808022e:	bd10      	pop	{r4, pc}
 8080230:	20000280 	.word	0x20000280
 8080234:	200002c0 	.word	0x200002c0
 8080238:	200001a8 	.word	0x200001a8
 808023c:	20000200 	.word	0x20000200
 8080240:	200001fc 	.word	0x200001fc
 8080244:	200002ac 	.word	0x200002ac

08080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 8080248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808024a:	4605      	mov	r5, r0
 808024c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8080250:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080252:	f88d 3000 	strb.w	r3, [sp]
 8080256:	233c      	movs	r3, #60	; 0x3c
 8080258:	f002 fc42 	bl	8082ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 808025c:	4628      	mov	r0, r5
 808025e:	b003      	add	sp, #12
 8080260:	bd30      	pop	{r4, r5, pc}

08080262 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080262:	b510      	push	{r4, lr}
 8080264:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 8080266:	6800      	ldr	r0, [r0, #0]
 8080268:	b108      	cbz	r0, 808026e <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 808026a:	f002 f917 	bl	808249c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 808026e:	4620      	mov	r0, r4
 8080270:	bd10      	pop	{r4, pc}

08080272 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080272:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080274:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080276:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080278:	b113      	cbz	r3, 8080280 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808027a:	2203      	movs	r2, #3
 808027c:	4601      	mov	r1, r0
 808027e:	4798      	blx	r3
    }
 8080280:	4620      	mov	r0, r4
 8080282:	bd10      	pop	{r4, pc}

08080284 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 8080284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080286:	4b13      	ldr	r3, [pc, #76]	; (80802d4 <_ZN5TimerD1Ev+0x50>)
 8080288:	4604      	mov	r4, r0
 808028a:	6003      	str	r3, [r0, #0]
    }
    bool _changePeriod(std::chrono::milliseconds ms, unsigned block, bool fromISR=false) { return _changePeriod(ms.count(), block, fromISR); }

    void dispose()
    {
        if (handle) {
 808028c:	6880      	ldr	r0, [r0, #8]
 808028e:	b1c8      	cbz	r0, 80802c4 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 8080290:	2500      	movs	r5, #0
 8080292:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8080296:	e88d 0028 	stmia.w	sp, {r3, r5}
 808029a:	2102      	movs	r1, #2
 808029c:	462b      	mov	r3, r5
 808029e:	462a      	mov	r2, r5
 80802a0:	f001 fe22 	bl	8081ee8 <os_timer_change>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 80802a4:	4629      	mov	r1, r5
 80802a6:	68a0      	ldr	r0, [r4, #8]
 80802a8:	f001 fe3e 	bl	8081f28 <os_timer_set_id>
            while (running) {
 80802ac:	7923      	ldrb	r3, [r4, #4]
 80802ae:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80802b2:	b113      	cbz	r3, 80802ba <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
 80802b4:	f001 fdf0 	bl	8081e98 <os_thread_yield>
 80802b8:	e7f8      	b.n	80802ac <_ZN5TimerD1Ev+0x28>
            }
            os_timer_destroy(handle, nullptr);
 80802ba:	4629      	mov	r1, r5
 80802bc:	68a0      	ldr	r0, [r4, #8]
 80802be:	f001 fe03 	bl	8081ec8 <os_timer_destroy>
            handle = nullptr;
 80802c2:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80802c4:	f104 000c 	add.w	r0, r4, #12
 80802c8:	f7ff ffd3 	bl	8080272 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80802cc:	4620      	mov	r0, r4
 80802ce:	b003      	add	sp, #12
 80802d0:	bd30      	pop	{r4, r5, pc}
 80802d2:	bf00      	nop
 80802d4:	08085da8 	.word	0x08085da8

080802d8 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80802d8:	b510      	push	{r4, lr}
 80802da:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80802dc:	f7ff ffd2 	bl	8080284 <_ZN5TimerD1Ev>
 80802e0:	4620      	mov	r0, r4
 80802e2:	211c      	movs	r1, #28
 80802e4:	f003 feaf 	bl	8084046 <_ZdlPvj>
 80802e8:	4620      	mov	r0, r4
 80802ea:	bd10      	pop	{r4, pc}

080802ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>:
    hal_wakeup_source_base_t* wakeupSource() const {
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 80802ec:	6803      	ldr	r3, [r0, #0]
 80802ee:	68d8      	ldr	r0, [r3, #12]
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
 80802f0:	b120      	cbz	r0, 80802fc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
 80802f2:	8883      	ldrh	r3, [r0, #4]
 80802f4:	428b      	cmp	r3, r1
 80802f6:	d001      	beq.n	80802fc <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x10>
                return start;
            }
            start = start->next;
 80802f8:	6880      	ldr	r0, [r0, #8]
 80802fa:	e7f9      	b.n	80802f0 <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t+0x4>
        return config_->wakeup_sources;
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }
 80802fc:	4770      	bx	lr
	...

08080300 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 8080300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if (valid_) {
 8080304:	7d03      	ldrb	r3, [r0, #20]
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
 8080306:	4605      	mov	r5, r0
 8080308:	460f      	mov	r7, r1
 808030a:	4616      	mov	r6, r2
        if (valid_) {
 808030c:	b33b      	cbz	r3, 808035e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
            // Check if this pin has been featured.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO);
 808030e:	2101      	movs	r1, #1
 8080310:	f7ff ffec 	bl	80802ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            while (wakeup) {
 8080314:	b150      	cbz	r0, 808032c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x2c>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
 8080316:	8983      	ldrh	r3, [r0, #12]
 8080318:	42bb      	cmp	r3, r7
 808031a:	d104      	bne.n	8080326 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
                    gpioWakeup->mode = mode;
 808031c:	7386      	strb	r6, [r0, #14]
                    return *this;
 808031e:	e01e      	b.n	808035e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
            return nullptr;
        }
        while (start) {
            if (start->type == type) {
 8080320:	8883      	ldrh	r3, [r0, #4]
 8080322:	2b01      	cmp	r3, #1
 8080324:	d0f6      	beq.n	8080314 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x14>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
 8080326:	6880      	ldr	r0, [r0, #8]
    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type) const {
        return wakeupSourceFeatured(type, config_->wakeup_sources);
    }

    hal_wakeup_source_base_t* wakeupSourceFeatured(hal_wakeup_source_type_t type, hal_wakeup_source_base_t* start) const {
        if (!start) {
 8080328:	2800      	cmp	r0, #0
 808032a:	d1f9      	bne.n	8080320 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x20>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
 808032c:	490d      	ldr	r1, [pc, #52]	; (8080364 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
 808032e:	2010      	movs	r0, #16
 8080330:	f003 fe94 	bl	808405c <_ZnwjRKSt9nothrow_t>
 8080334:	4604      	mov	r4, r0
 8080336:	b188      	cbz	r0, 808035c <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
 8080338:	f04f 0810 	mov.w	r8, #16
 808033c:	4642      	mov	r2, r8
 808033e:	2100      	movs	r1, #0
 8080340:	f005 f871 	bl	8085426 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
 8080344:	2302      	movs	r3, #2
 8080346:	8063      	strh	r3, [r4, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 8080348:	2301      	movs	r3, #1
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
 808034a:	f8a4 8000 	strh.w	r8, [r4]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 808034e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 8080350:	692b      	ldr	r3, [r5, #16]
            wakeupSource->pin = pin;
 8080352:	81a7      	strh	r7, [r4, #12]
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
 8080354:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
 8080356:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 8080358:	612c      	str	r4, [r5, #16]
 808035a:	e000      	b.n	808035e <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode+0x5e>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
            if (!wakeupSource) {
                valid_ = false;
 808035c:	7528      	strb	r0, [r5, #20]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
 808035e:	4628      	mov	r0, r5
 8080360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080364:	0808659c 	.word	0x0808659c

08080368 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
 8080368:	b510      	push	{r4, lr}
 808036a:	4604      	mov	r4, r0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
 808036c:	b139      	cbz	r1, 808037e <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x16>
 808036e:	3901      	subs	r1, #1
 8080370:	f7ff fffa 	bl	8080368 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
 8080374:	4601      	mov	r1, r0
 8080376:	4620      	mov	r0, r4
 8080378:	f004 fd1c 	bl	8084db4 <__aeabi_fmul>
 808037c:	bd10      	pop	{r4, pc}
 808037e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
}
 8080382:	bd10      	pop	{r4, pc}

08080384 <_Z11recordCountv>:
    hourliesCountsWriteNeeded = false;
  }
}

void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the Arduino
{
 8080384:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8080386:	4b20      	ldr	r3, [pc, #128]	; (8080408 <_Z11recordCountv+0x84>)
 8080388:	681b      	ldr	r3, [r3, #0]
 808038a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 808038e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8080392:	8313      	strh	r3, [r2, #24]
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
    }

    bool _reset(unsigned block, bool fromISR=false)
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
 8080394:	4b1d      	ldr	r3, [pc, #116]	; (808040c <_Z11recordCountv+0x88>)
 8080396:	6898      	ldr	r0, [r3, #8]
 8080398:	b140      	cbz	r0, 80803ac <_Z11recordCountv+0x28>
 808039a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 808039e:	2300      	movs	r3, #0
 80803a0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80803a4:	2101      	movs	r1, #1
 80803a6:	461a      	mov	r2, r3
 80803a8:	f001 fd9e 	bl	8081ee8 <os_timer_change>
  static byte currentMinutePeriod;                                  // Current minute

  pinSetFast(blueLED);                                              // Turn on the blue LED
  countSignalTimer.reset();                                         // Keep the LED on for a set time so we can see it.

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
 80803ac:	4d18      	ldr	r5, [pc, #96]	; (8080410 <_Z11recordCountv+0x8c>)
 80803ae:	782c      	ldrb	r4, [r5, #0]
 80803b0:	f003 fa8e 	bl	80838d0 <_ZN9TimeClass6minuteEv>
 80803b4:	4284      	cmp	r4, r0
 80803b6:	4c17      	ldr	r4, [pc, #92]	; (8080414 <_Z11recordCountv+0x90>)
 80803b8:	d004      	beq.n	80803c4 <_Z11recordCountv+0x40>
    currentMinutePeriod = Time.minute();                            // Reset period
 80803ba:	f003 fa89 	bl	80838d0 <_ZN9TimeClass6minuteEv>
    current.maxMinValue = 1;                                        // Reset for the new minute
 80803be:	2301      	movs	r3, #1

  pinSetFast(blueLED);                                              // Turn on the blue LED
  countSignalTimer.reset();                                         // Keep the LED on for a set time so we can see it.

  if (currentMinutePeriod != Time.minute()) {                       // Done counting for the last minute
    currentMinutePeriod = Time.minute();                            // Reset period
 80803c0:	7028      	strb	r0, [r5, #0]
    current.maxMinValue = 1;                                        // Reset for the new minute
 80803c2:	61a3      	str	r3, [r4, #24]
  }
  current.maxMinValue++;
 80803c4:	69a3      	ldr	r3, [r4, #24]
 80803c6:	3301      	adds	r3, #1
 80803c8:	61a3      	str	r3, [r4, #24]

  current.lastCountTime = Time.now();
 80803ca:	f003 fa70 	bl	80838ae <_ZN9TimeClass3nowEv>
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_and(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }
 80803ce:	4912      	ldr	r1, [pc, #72]	; (8080418 <_Z11recordCountv+0x94>)
 80803d0:	60e0      	str	r0, [r4, #12]
 80803d2:	2300      	movs	r3, #0
 80803d4:	e851 2f00 	ldrex	r2, [r1]
 80803d8:	e841 3000 	strex	r0, r3, [r1]
 80803dc:	2800      	cmp	r0, #0
 80803de:	d1f9      	bne.n	80803d4 <_Z11recordCountv+0x50>
  current.hourlyCount += hourlyAtomic.fetch_and(0,std::memory_order_relaxed);   // Increment the hourlyCount from the atomic variable
 80803e0:	6821      	ldr	r1, [r4, #0]
 80803e2:	440a      	add	r2, r1
 80803e4:	490d      	ldr	r1, [pc, #52]	; (808041c <_Z11recordCountv+0x98>)
 80803e6:	6022      	str	r2, [r4, #0]
 80803e8:	e851 2f00 	ldrex	r2, [r1]
 80803ec:	e841 3000 	strex	r0, r3, [r1]
 80803f0:	2800      	cmp	r0, #0
 80803f2:	d1f9      	bne.n	80803e8 <_Z11recordCountv+0x64>
  current.dailyCount += dailyAtomic.fetch_and(0,std::memory_order_relaxed);    // Increment the dailyCount from the atomic vairable
 80803f4:	68a1      	ldr	r1, [r4, #8]
 80803f6:	440a      	add	r2, r1
 80803f8:	60a2      	str	r2, [r4, #8]

  currentCountsWriteNeeded = true;                                  // Write updated values to FRAM
 80803fa:	4a09      	ldr	r2, [pc, #36]	; (8080420 <_Z11recordCountv+0x9c>)
 80803fc:	2101      	movs	r1, #1
 80803fe:	7011      	strb	r1, [r2, #0]
  sensorDetect = false;                                             // Reset the flag
 8080400:	4a08      	ldr	r2, [pc, #32]	; (8080424 <_Z11recordCountv+0xa0>)
 8080402:	7013      	strb	r3, [r2, #0]
}
 8080404:	b003      	add	sp, #12
 8080406:	bd30      	pop	{r4, r5, pc}
 8080408:	20000238 	.word	0x20000238
 808040c:	200001c8 	.word	0x200001c8
 8080410:	20000204 	.word	0x20000204
 8080414:	20000290 	.word	0x20000290
 8080418:	20000200 	.word	0x20000200
 808041c:	200001fc 	.word	0x200001fc
 8080420:	20000288 	.word	0x20000288
 8080424:	200001a8 	.word	0x200001a8

08080428 <_Z16recordHourlyDatav>:

void recordHourlyData() {
 8080428:	b510      	push	{r4, lr}
  if (sysStatus.stateOfCharge > hourlies.maxStateOfCharge) hourlies.maxStateOfCharge = sysStatus.stateOfCharge;
 808042a:	4b10      	ldr	r3, [pc, #64]	; (808046c <_Z16recordHourlyDatav+0x44>)
  if (sysStatus.stateOfCharge < hourlies.minStateOfCharge) hourlies.minStateOfCharge = sysStatus.stateOfCharge;
  hourlies.hourlyCount[currentHourlyPeriod] = current.hourlyCount;
 808042c:	4c10      	ldr	r4, [pc, #64]	; (8080470 <_Z16recordHourlyDatav+0x48>)
  currentCountsWriteNeeded = true;                                  // Write updated values to FRAM
  sensorDetect = false;                                             // Reset the flag
}

void recordHourlyData() {
  if (sysStatus.stateOfCharge > hourlies.maxStateOfCharge) hourlies.maxStateOfCharge = sysStatus.stateOfCharge;
 808042e:	689a      	ldr	r2, [r3, #8]
 8080430:	4b10      	ldr	r3, [pc, #64]	; (8080474 <_Z16recordHourlyDatav+0x4c>)
 8080432:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8080434:	428a      	cmp	r2, r1
  if (sysStatus.stateOfCharge < hourlies.minStateOfCharge) hourlies.minStateOfCharge = sysStatus.stateOfCharge;
 8080436:	6e99      	ldr	r1, [r3, #104]	; 0x68
  currentCountsWriteNeeded = true;                                  // Write updated values to FRAM
  sensorDetect = false;                                             // Reset the flag
}

void recordHourlyData() {
  if (sysStatus.stateOfCharge > hourlies.maxStateOfCharge) hourlies.maxStateOfCharge = sysStatus.stateOfCharge;
 8080438:	bfc8      	it	gt
 808043a:	66da      	strgt	r2, [r3, #108]	; 0x6c
  if (sysStatus.stateOfCharge < hourlies.minStateOfCharge) hourlies.minStateOfCharge = sysStatus.stateOfCharge;
 808043c:	428a      	cmp	r2, r1
 808043e:	bfbc      	itt	lt
 8080440:	490c      	ldrlt	r1, [pc, #48]	; (8080474 <_Z16recordHourlyDatav+0x4c>)
 8080442:	668a      	strlt	r2, [r1, #104]	; 0x68
  hourlies.hourlyCount[currentHourlyPeriod] = current.hourlyCount;
 8080444:	6822      	ldr	r2, [r4, #0]
 8080446:	1c91      	adds	r1, r2, #2
 8080448:	4a0b      	ldr	r2, [pc, #44]	; (8080478 <_Z16recordHourlyDatav+0x50>)
 808044a:	6810      	ldr	r0, [r2, #0]
 808044c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  current.hourlyCount = 0;                                          // reset each hour
 8080450:	2100      	movs	r1, #0
 8080452:	6011      	str	r1, [r2, #0]
  hourlies.dailyCount = current.dailyCount;
 8080454:	6892      	ldr	r2, [r2, #8]
 8080456:	605a      	str	r2, [r3, #4]
  hourliesCountsWriteNeeded = true;
 8080458:	4a08      	ldr	r2, [pc, #32]	; (808047c <_Z16recordHourlyDatav+0x54>)
 808045a:	2301      	movs	r3, #1
 808045c:	7013      	strb	r3, [r2, #0]
  currentCountsWriteNeeded = true;
 808045e:	4a08      	ldr	r2, [pc, #32]	; (8080480 <_Z16recordHourlyDatav+0x58>)
 8080460:	7013      	strb	r3, [r2, #0]
  currentHourlyPeriod = Time.hour();
 8080462:	f003 fa2b 	bl	80838bc <_ZN9TimeClass4hourEv>
 8080466:	6020      	str	r0, [r4, #0]
 8080468:	bd10      	pop	{r4, pc}
 808046a:	bf00      	nop
 808046c:	200002c0 	.word	0x200002c0
 8080470:	20000208 	.word	0x20000208
 8080474:	20000138 	.word	0x20000138
 8080478:	20000290 	.word	0x20000290
 808047c:	200001f6 	.word	0x200001f6
 8080480:	20000288 	.word	0x20000288

08080484 <_Z14writeToDataLogv>:
}

void writeToDataLog() {
 8080484:	b570      	push	{r4, r5, r6, lr}
  char data[256];
  snprintf(data, sizeof(data), "%i/%i, %i, %i, %i", Time.month(current.lastCountTime), Time.day(current.lastCountTime), hourlies.dailyCount, hourlies.maxStateOfCharge, hourlies.minStateOfCharge);
 8080486:	4c1a      	ldr	r4, [pc, #104]	; (80804f0 <_Z14writeToDataLogv+0x6c>)
  hourliesCountsWriteNeeded = true;
  currentCountsWriteNeeded = true;
  currentHourlyPeriod = Time.hour();
}

void writeToDataLog() {
 8080488:	b0c8      	sub	sp, #288	; 0x120
  char data[256];
  snprintf(data, sizeof(data), "%i/%i, %i, %i, %i", Time.month(current.lastCountTime), Time.day(current.lastCountTime), hourlies.dailyCount, hourlies.maxStateOfCharge, hourlies.minStateOfCharge);
 808048a:	68e0      	ldr	r0, [r4, #12]
 808048c:	f003 f96e 	bl	808376c <_ZN9TimeClass5monthEl>
 8080490:	4606      	mov	r6, r0
 8080492:	68e0      	ldr	r0, [r4, #12]
 8080494:	4c17      	ldr	r4, [pc, #92]	; (80804f4 <_Z14writeToDataLogv+0x70>)
 8080496:	f003 f957 	bl	8083748 <_ZN9TimeClass3dayEl>
 808049a:	4625      	mov	r5, r4
 808049c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 808049e:	4a16      	ldr	r2, [pc, #88]	; (80804f8 <_Z14writeToDataLogv+0x74>)
 80804a0:	9303      	str	r3, [sp, #12]
 80804a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80804a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80804a8:	9302      	str	r3, [sp, #8]
 80804aa:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80804ae:	3464      	adds	r4, #100	; 0x64
 80804b0:	e88d 0009 	stmia.w	sp, {r0, r3}
 80804b4:	4633      	mov	r3, r6
 80804b6:	a808      	add	r0, sp, #32
 80804b8:	f002 f810 	bl	80824dc <snprintf>
  for (int i=0; i <24; i++) {
    strcat(data, ", ");
 80804bc:	490f      	ldr	r1, [pc, #60]	; (80804fc <_Z14writeToDataLogv+0x78>)
 80804be:	a808      	add	r0, sp, #32
 80804c0:	f004 ffe2 	bl	8085488 <strcat>
    strcat(data, String(hourlies.hourlyCount[i]));
 80804c4:	220a      	movs	r2, #10
 80804c6:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80804ca:	a804      	add	r0, sp, #16
 80804cc:	f002 ffc9 	bl	8083462 <_ZN6StringC1Eih>
 80804d0:	9904      	ldr	r1, [sp, #16]
 80804d2:	a808      	add	r0, sp, #32
 80804d4:	f004 ffd8 	bl	8085488 <strcat>
 80804d8:	a804      	add	r0, sp, #16
 80804da:	f002 ff3d 	bl	8083358 <_ZN6StringD1Ev>
}

void writeToDataLog() {
  char data[256];
  snprintf(data, sizeof(data), "%i/%i, %i, %i, %i", Time.month(current.lastCountTime), Time.day(current.lastCountTime), hourlies.dailyCount, hourlies.maxStateOfCharge, hourlies.minStateOfCharge);
  for (int i=0; i <24; i++) {
 80804de:	42a5      	cmp	r5, r4
 80804e0:	d1ec      	bne.n	80804bc <_Z14writeToDataLogv+0x38>
    strcat(data, ", ");
    strcat(data, String(hourlies.hourlyCount[i]));
  }
  Serial1.println(data);
 80804e2:	f003 fa83 	bl	80839ec <_Z22__fetch_global_Serial1v>
 80804e6:	a908      	add	r1, sp, #32
 80804e8:	f002 fee7 	bl	80832ba <_ZN5Print7printlnEPKc>
}
 80804ec:	b048      	add	sp, #288	; 0x120
 80804ee:	bd70      	pop	{r4, r5, r6, pc}
 80804f0:	20000290 	.word	0x20000290
 80804f4:	20000138 	.word	0x20000138
 80804f8:	08085e18 	.word	0x08085e18
 80804fc:	08085e2a 	.word	0x08085e2a

08080500 <_Z17initializeDataLogv>:

void initializeDataLog() {                                        // Simply writes the header line after the memory card is swapped out
 8080500:	b510      	push	{r4, lr}
  if (initializeOnce) Serial1.println("Date, Daily, BattMax, BattMin, 12a,1a,2a,3a,4a,5a,6a,7a,8a,9a,10a,11a,12p,1p,2p,3p,4p,5p,6p,7p,8p,9p,10p,11p");
 8080502:	4b06      	ldr	r3, [pc, #24]	; (808051c <_Z17initializeDataLogv+0x1c>)
 8080504:	781a      	ldrb	r2, [r3, #0]
 8080506:	461c      	mov	r4, r3
 8080508:	b122      	cbz	r2, 8080514 <_Z17initializeDataLogv+0x14>
 808050a:	f003 fa6f 	bl	80839ec <_Z22__fetch_global_Serial1v>
 808050e:	4904      	ldr	r1, [pc, #16]	; (8080520 <_Z17initializeDataLogv+0x20>)
 8080510:	f002 fed3 	bl	80832ba <_ZN5Print7printlnEPKc>
  initializeOnce = false;
 8080514:	2300      	movs	r3, #0
 8080516:	7023      	strb	r3, [r4, #0]
 8080518:	bd10      	pop	{r4, pc}
 808051a:	bf00      	nop
 808051c:	20000076 	.word	0x20000076
 8080520:	08085e2d 	.word	0x08085e2d

08080524 <_Z17getSignalStrengthv>:
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
 8080524:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 8080526:	4d17      	ldr	r5, [pc, #92]	; (8080584 <_Z17getSignalStrengthv+0x60>)
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
  systemStatusWriteNeeded=true;
}


void getSignalStrength() {
 8080528:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 808052a:	ac04      	add	r4, sp, #16
 808052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080534:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080538:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 808053c:	4912      	ldr	r1, [pc, #72]	; (8080588 <_Z17getSignalStrengthv+0x64>)
 808053e:	a80e      	add	r0, sp, #56	; 0x38
 8080540:	f002 f852 	bl	80825e8 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 8080544:	a80e      	add	r0, sp, #56	; 0x38
 8080546:	f002 f8a2 	bl	808268e <_ZNK14CellularSignal19getAccessTechnologyEv>
 808054a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 808054c:	a80e      	add	r0, sp, #56	; 0x38
 808054e:	f002 f8e5 	bl	808271c <_ZNK14CellularSignal11getStrengthEv>
 8080552:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 8080554:	a80e      	add	r0, sp, #56	; 0x38
 8080556:	f002 f8c9 	bl	80826ec <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 808055a:	ab18      	add	r3, sp, #96	; 0x60
 808055c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8080560:	f004 f83c 	bl	80845dc <__aeabi_f2d>
 8080564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080568:	4628      	mov	r0, r5
 808056a:	f004 f837 	bl	80845dc <__aeabi_f2d>
 808056e:	e9cd 0100 	strd	r0, r1, [sp]
 8080572:	4a06      	ldr	r2, [pc, #24]	; (808058c <_Z17getSignalStrengthv+0x68>)
 8080574:	f854 3c50 	ldr.w	r3, [r4, #-80]
 8080578:	2140      	movs	r1, #64	; 0x40
 808057a:	4805      	ldr	r0, [pc, #20]	; (8080590 <_Z17getSignalStrengthv+0x6c>)
 808057c:	f001 ffae 	bl	80824dc <snprintf>
}
 8080580:	b019      	add	sp, #100	; 0x64
 8080582:	bd30      	pop	{r4, r5, pc}
 8080584:	08085dd0 	.word	0x08085dd0
 8080588:	200002ec 	.word	0x200002ec
 808058c:	08085e9a 	.word	0x08085e9a
 8080590:	20000240 	.word	0x20000240
 8080594:	00000000 	.word	0x00000000

08080598 <_Z14getTemperaturev>:
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);

}

int getTemperature()
{
 8080598:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
 808059a:	200a      	movs	r0, #10
 808059c:	f003 fcad 	bl	8083efa <analogRead>
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
 80805a0:	f004 f80a 	bl	80845b8 <__aeabi_i2d>
 80805a4:	a316      	add	r3, pc, #88	; (adr r3, 8080600 <_Z14getTemperaturev+0x68>)
 80805a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805aa:	f004 f86b 	bl	8084684 <__aeabi_dmul>
 80805ae:	f004 faa3 	bl	8084af8 <__aeabi_d2f>
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    // converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);       // now convert to Fahrenheit
 80805b2:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80805b6:	f004 fbfd 	bl	8084db4 <__aeabi_fmul>
 80805ba:	f004 f80f 	bl	80845dc <__aeabi_f2d>
 80805be:	2200      	movs	r2, #0
 80805c0:	4b11      	ldr	r3, [pc, #68]	; (8080608 <_Z14getTemperaturev+0x70>)
 80805c2:	f003 feab 	bl	808431c <__aeabi_dsub>
 80805c6:	2200      	movs	r2, #0
 80805c8:	4b10      	ldr	r3, [pc, #64]	; (808060c <_Z14getTemperaturev+0x74>)
 80805ca:	f004 f85b 	bl	8084684 <__aeabi_dmul>
 80805ce:	f004 fa6b 	bl	8084aa8 <__aeabi_d2iz>
 80805d2:	f003 fff1 	bl	80845b8 <__aeabi_i2d>
 80805d6:	2200      	movs	r2, #0
 80805d8:	4b0d      	ldr	r3, [pc, #52]	; (8080610 <_Z14getTemperaturev+0x78>)
 80805da:	f004 f853 	bl	8084684 <__aeabi_dmul>
 80805de:	2200      	movs	r2, #0
 80805e0:	4b0c      	ldr	r3, [pc, #48]	; (8080614 <_Z14getTemperaturev+0x7c>)
 80805e2:	f004 f979 	bl	80848d8 <__aeabi_ddiv>
 80805e6:	2200      	movs	r2, #0
 80805e8:	4b0b      	ldr	r3, [pc, #44]	; (8080618 <_Z14getTemperaturev+0x80>)
 80805ea:	f003 fe99 	bl	8084320 <__adddf3>
 80805ee:	f004 fa5b 	bl	8084aa8 <__aeabi_d2iz>
 80805f2:	4b0a      	ldr	r3, [pc, #40]	; (808061c <_Z14getTemperaturev+0x84>)
  currentCountsWriteNeeded=true;
 80805f4:	2201      	movs	r2, #1
{
  int reading = analogRead(tmp36Pin);                                 //getting the voltage reading from the temperature sensor
  float voltage = reading * 3.3;                                      // converting that reading to voltage, for 3.3v arduino use 3.3
  voltage /= 4096.0;                                                  // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));                    // converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);       // now convert to Fahrenheit
 80805f6:	6118      	str	r0, [r3, #16]
  currentCountsWriteNeeded=true;
 80805f8:	4b09      	ldr	r3, [pc, #36]	; (8080620 <_Z14getTemperaturev+0x88>)
 80805fa:	701a      	strb	r2, [r3, #0]
  return current.temperature;
}
 80805fc:	bd08      	pop	{r3, pc}
 80805fe:	bf00      	nop
 8080600:	66666666 	.word	0x66666666
 8080604:	400a6666 	.word	0x400a6666
 8080608:	3fe00000 	.word	0x3fe00000
 808060c:	40590000 	.word	0x40590000
 8080610:	40220000 	.word	0x40220000
 8080614:	40140000 	.word	0x40140000
 8080618:	40400000 	.word	0x40400000
 808061c:	20000290 	.word	0x20000290
 8080620:	20000288 	.word	0x20000288

08080624 <_Z11petWatchdogv>:
 8080624:	4b07      	ldr	r3, [pc, #28]	; (8080644 <_Z11petWatchdogv+0x20>)
 8080626:	681b      	ldr	r3, [r3, #0]
 8080628:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 808062c:	f8b3 10ac 	ldrh.w	r1, [r3, #172]	; 0xac
 8080630:	8311      	strh	r1, [r2, #24]
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8080632:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8080636:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 808063a:	8353      	strh	r3, [r2, #26]

void petWatchdog()
{
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
  digitalWriteFast(donePin, LOW);
  watchdogFlag = false;
 808063c:	4b02      	ldr	r3, [pc, #8]	; (8080648 <_Z11petWatchdogv+0x24>)
 808063e:	2200      	movs	r2, #0
 8080640:	701a      	strb	r2, [r3, #0]
 8080642:	4770      	bx	lr
 8080644:	20000238 	.word	0x20000238
 8080648:	2000020c 	.word	0x2000020c

0808064c <_Z14enableChargingb>:
    return res;
  }
}

bool enableCharging(bool enableCharge)
{
 808064c:	b513      	push	{r0, r1, r4, lr}
 808064e:	4604      	mov	r4, r0
  PMIC pmic(true);
 8080650:	2101      	movs	r1, #1
 8080652:	a801      	add	r0, sp, #4
 8080654:	f002 fd5f 	bl	8083116 <_ZN4PMICC1Eb>
  if(enableCharge) {
    pmic.enableCharging();
 8080658:	a801      	add	r0, sp, #4
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
  if(enableCharge) {
 808065a:	b11c      	cbz	r4, 8080664 <_Z14enableChargingb+0x18>
    pmic.enableCharging();
 808065c:	f002 fdf6 	bl	808324c <_ZN4PMIC14enableChargingEv>
    return TRUE;
 8080660:	2401      	movs	r4, #1
 8080662:	e001      	b.n	8080668 <_Z14enableChargingb+0x1c>
  }
  else {
    pmic.disableCharging();
 8080664:	f002 fdc2 	bl	80831ec <_ZN4PMIC15disableChargingEv>
  }
}

bool enableCharging(bool enableCharge)
{
  PMIC pmic(true);
 8080668:	a801      	add	r0, sp, #4
 808066a:	f002 fd63 	bl	8083134 <_ZN4PMICD1Ev>
  }
  else {
    pmic.disableCharging();
    return FALSE;
  }
}
 808066e:	4620      	mov	r0, r4
 8080670:	b002      	add	sp, #8
 8080672:	bd10      	pop	{r4, pc}

08080674 <_Z14setPowerConfigv>:
void countSignalTimerISR() {
  digitalWrite(blueLED,LOW);
}

// Power Management function
int setPowerConfig() {
 8080674:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 8080676:	2420      	movs	r4, #32
 8080678:	b090      	sub	sp, #64	; 0x40
 808067a:	4622      	mov	r2, r4
 808067c:	2100      	movs	r1, #0
 808067e:	4668      	mov	r0, sp
 8080680:	f004 fed1 	bl	8085426 <memset>
 8080684:	4622      	mov	r2, r4
 8080686:	2100      	movs	r1, #0
 8080688:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
 808068c:	f88d 4005 	strb.w	r4, [sp, #5]

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 8080690:	f004 fec9 	bl	8085426 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
 8080694:	2100      	movs	r1, #0
 8080696:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
 808069a:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 808069e:	f001 fe41 	bl	8082324 <system_power_management_set_config>
  SystemPowerConfiguration conf;
  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  if (sysStatus.solarPowerMode) {
 80806a2:	4b1a      	ldr	r3, [pc, #104]	; (808070c <_Z14setPowerConfigv+0x98>)
 80806a4:	7959      	ldrb	r1, [r3, #5]
 80806a6:	9b00      	ldr	r3, [sp, #0]
 80806a8:	b1a1      	cbz	r1, 80806d4 <_Z14setPowerConfigv+0x60>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 80806aa:	f240 2226 	movw	r2, #550	; 0x226
 80806ae:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80806b2:	f241 32d8 	movw	r2, #5080	; 0x13d8
 80806b6:	f8ad 2006 	strh.w	r2, [sp, #6]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 80806ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80806be:	f8ad 200a 	strh.w	r2, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80806c2:	f241 0270 	movw	r2, #4208	; 0x1070
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80806c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80806ca:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80806ce:	9300      	str	r3, [sp, #0]
 80806d0:	2100      	movs	r1, #0
 80806d2:	e010      	b.n	80806f6 <_Z14setPowerConfigv+0x82>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 80806d4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80806d8:	f8ad 2008 	strh.w	r2, [sp, #8]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80806dc:	f241 0070 	movw	r0, #4208	; 0x1070
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 80806e0:	f8ad 200a 	strh.w	r2, [sp, #10]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80806e4:	f241 0210 	movw	r2, #4112	; 0x1010
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80806e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
 80806ec:	f8ad 0006 	strh.w	r0, [sp, #6]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
 80806f0:	f8ad 200c 	strh.w	r2, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 80806f4:	9300      	str	r3, [sp, #0]
 80806f6:	4668      	mov	r0, sp
 80806f8:	f001 fe14 	bl	8082324 <system_power_management_set_config>
 80806fc:	4604      	mov	r4, r0
        .powerSourceMinVoltage(4208)                                  // This is the default value for the Boron
        .batteryChargeCurrent(900)                                    // higher charge current from DC-IN when not solar powered
        .batteryChargeVoltage(4112)                                   // default is 4.112V termination voltage
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST) ;
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    enableCharging(true);
 80806fe:	2001      	movs	r0, #1
 8080700:	f7ff ffa4 	bl	808064c <_Z14enableChargingb>
    return res;
  }
}
 8080704:	4620      	mov	r0, r4
 8080706:	b010      	add	sp, #64	; 0x40
 8080708:	bd10      	pop	{r4, pc}
 808070a:	bf00      	nop
 808070c:	200002c0 	.word	0x200002c0

08080710 <_Z17connectToParticlev>:

 // These are the particle functions that allow you to configure and run the device
 // They are intended to allow for customization and control during installations
 // and to allow for management.

bool connectToParticle() {
 8080710:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080714:	4820      	ldr	r0, [pc, #128]	; (8080798 <_Z17connectToParticlev+0x88>)
 8080716:	2300      	movs	r3, #0
 8080718:	461a      	mov	r2, r3
 808071a:	4619      	mov	r1, r3
 808071c:	6840      	ldr	r0, [r0, #4]
 808071e:	f001 fe85 	bl	808242c <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080722:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080726:	f001 fe29 	bl	808237c <spark_cloud_flag_connect>
 808072a:	f44f 7496 	mov.w	r4, #300	; 0x12c
 808072e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080730:	2000      	movs	r0, #0
 8080732:	f001 fc41 	bl	8081fb8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080736:	4680      	mov	r8, r0
 8080738:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808073c:	2000      	movs	r0, #0
 808073e:	f001 fc3b 	bl	8081fb8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080742:	ebb0 0008 	subs.w	r0, r0, r8
 8080746:	eb61 0109 	sbc.w	r1, r1, r9
 808074a:	428f      	cmp	r7, r1
 808074c:	bf08      	it	eq
 808074e:	4286      	cmpeq	r6, r0
 8080750:	d305      	bcc.n	808075e <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080752:	f001 fe23 	bl	808239c <spark_cloud_flag_connected>
 8080756:	b910      	cbnz	r0, 808075e <_Z17connectToParticlev+0x4e>
            spark_process();
 8080758:	f001 fe08 	bl	808236c <spark_process>
 808075c:	e7ee      	b.n	808073c <_Z17connectToParticlev+0x2c>
 808075e:	f001 fe1d 	bl	808239c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080762:	b148      	cbz	r0, 8080778 <_Z17connectToParticlev+0x68>
 8080764:	f001 fe1a 	bl	808239c <spark_cloud_flag_connected>
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
    Particle.process();
  }
  if (Particle.connected()) {
 8080768:	b1a0      	cbz	r0, 8080794 <_Z17connectToParticlev+0x84>
    sysStatus.connectedStatus = true;
 808076a:	4a0c      	ldr	r2, [pc, #48]	; (808079c <_Z17connectToParticlev+0x8c>)
 808076c:	2301      	movs	r3, #1
 808076e:	70d3      	strb	r3, [r2, #3]
    systemStatusWriteNeeded = true;
 8080770:	4a0b      	ldr	r2, [pc, #44]	; (80807a0 <_Z17connectToParticlev+0x90>)
 8080772:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
 8080774:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
    if(sensorDetect) recordCount(); // service the interrupt every 10 seconds
 8080778:	4b0a      	ldr	r3, [pc, #40]	; (80807a4 <_Z17connectToParticlev+0x94>)
 808077a:	781b      	ldrb	r3, [r3, #0]
 808077c:	b10b      	cbz	r3, 8080782 <_Z17connectToParticlev+0x72>
 808077e:	f7ff fe01 	bl	8080384 <_Z11recordCountv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080782:	f001 fc01 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080786:	4b08      	ldr	r3, [pc, #32]	; (80807a8 <_Z17connectToParticlev+0x98>)
 8080788:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 808078a:	f001 fdef 	bl	808236c <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 808078e:	3c01      	subs	r4, #1
 8080790:	d0e8      	beq.n	8080764 <_Z17connectToParticlev+0x54>
 8080792:	e7cd      	b.n	8080730 <_Z17connectToParticlev+0x20>
    return 1;                               // Were able to connect successfully
  }
  else {
    return 0;                                                    // Failed to connect
  }
}
 8080794:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8080798:	200002ec 	.word	0x200002ec
 808079c:	200002c0 	.word	0x200002c0
 80807a0:	200001f7 	.word	0x200001f7
 80807a4:	200001a8 	.word	0x200001a8
 80807a8:	200008a8 	.word	0x200008a8

080807ac <_Z12notConnectedv>:
  systemStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 80807ac:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80807ae:	f001 fdf5 	bl	808239c <spark_cloud_flag_connected>
  return !Particle.connected();
 80807b2:	f080 0001 	eor.w	r0, r0, #1
}
 80807b6:	b2c0      	uxtb	r0, r0
 80807b8:	bd08      	pop	{r3, pc}
	...

080807bc <_Z22disconnectFromParticlev>:
    return 0;                                                    // Failed to connect
  }
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 80807bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 80807be:	f001 fde5 	bl	808238c <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80807c2:	2000      	movs	r0, #0
 80807c4:	f001 fbf8 	bl	8081fb8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80807c8:	f643 2697 	movw	r6, #14999	; 0x3a97
 80807cc:	4604      	mov	r4, r0
 80807ce:	2500      	movs	r5, #0
 80807d0:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80807d2:	2000      	movs	r0, #0
 80807d4:	f001 fbf0 	bl	8081fb8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80807d8:	1b00      	subs	r0, r0, r4
 80807da:	eb61 0105 	sbc.w	r1, r1, r5
 80807de:	428f      	cmp	r7, r1
 80807e0:	bf08      	it	eq
 80807e2:	4286      	cmpeq	r6, r0
 80807e4:	d305      	bcc.n	80807f2 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
 80807e6:	f7ff ffe1 	bl	80807ac <_Z12notConnectedv>
 80807ea:	b910      	cbnz	r0, 80807f2 <_Z22disconnectFromParticlev+0x36>
            spark_process();
 80807ec:	f001 fdbe 	bl	808236c <spark_process>
 80807f0:	e7ef      	b.n	80807d2 <_Z22disconnectFromParticlev+0x16>
 80807f2:	f7ff ffdb 	bl	80807ac <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80807f6:	4809      	ldr	r0, [pc, #36]	; (808081c <_Z22disconnectFromParticlev+0x60>)
 80807f8:	2300      	movs	r3, #0
 80807fa:	4619      	mov	r1, r3
 80807fc:	461a      	mov	r2, r3
 80807fe:	6840      	ldr	r0, [r0, #4]
 8080800:	f001 fe1c 	bl	808243c <network_off>
  Cellular.off();
  sysStatus.connectedStatus = false;
 8080804:	4b06      	ldr	r3, [pc, #24]	; (8080820 <_Z22disconnectFromParticlev+0x64>)
 8080806:	2200      	movs	r2, #0
 8080808:	70da      	strb	r2, [r3, #3]
  systemStatusWriteNeeded = true;
 808080a:	4b06      	ldr	r3, [pc, #24]	; (8080824 <_Z22disconnectFromParticlev+0x68>)
 808080c:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
 808080e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
{
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
  Cellular.off();
  sysStatus.connectedStatus = false;
  systemStatusWriteNeeded = true;
 8080812:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
 8080814:	f001 fe7a 	bl	808250c <delay>
  return true;
}
 8080818:	4620      	mov	r0, r4
 808081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808081c:	200002ec 	.word	0x200002ec
 8080820:	200002c0 	.word	0x200002c0
 8080824:	200001f7 	.word	0x200001f7

08080828 <_Z14fullModemResetv>:
  oldState = state;
  if(Particle.connected()) Particle.publish("State Transition",stateTransitionString, PRIVATE);
  Serial.println(stateTransitionString);
}

void fullModemReset() {                                                 // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808082a:	f001 fdaf 	bl	808238c <spark_cloud_flag_disconnect>
 808082e:	f001 fbab 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080832:	f643 2597 	movw	r5, #14999	; 0x3a97
 8080836:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080838:	f001 fdb0 	bl	808239c <spark_cloud_flag_connected>
 808083c:	b140      	cbz	r0, 8080850 <_Z14fullModemResetv+0x28>
 808083e:	f001 fba3 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
 8080842:	1b00      	subs	r0, r0, r4
 8080844:	42a8      	cmp	r0, r5
 8080846:	d803      	bhi.n	8080850 <_Z14fullModemResetv+0x28>
		delay(100);
 8080848:	2064      	movs	r0, #100	; 0x64
 808084a:	f001 fe5f 	bl	808250c <delay>
}

void fullModemReset() {                                                 // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
	Particle.disconnect(); 	                                              // Disconnect from the cloud
	unsigned long startTime = millis();  	                                // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808084e:	e7f3      	b.n	8080838 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080850:	2100      	movs	r1, #0
 8080852:	4b09      	ldr	r3, [pc, #36]	; (8080878 <_Z14fullModemResetv+0x50>)
 8080854:	f247 5230 	movw	r2, #30000	; 0x7530
 8080858:	4608      	mov	r0, r1
 808085a:	f001 fb15 	bl	8081e88 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 808085e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080862:	f001 fe53 	bl	808250c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8080866:	4b05      	ldr	r3, [pc, #20]	; (808087c <_Z14fullModemResetv+0x54>)
 8080868:	220a      	movs	r2, #10
 808086a:	681b      	ldr	r3, [r3, #0]
 808086c:	2101      	movs	r1, #1
 808086e:	4668      	mov	r0, sp
 8080870:	f002 fee2 	bl	8083638 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080874:	b003      	add	sp, #12
 8080876:	bd30      	pop	{r4, r5, pc}
 8080878:	08085eb3 	.word	0x08085eb3
 808087c:	20000228 	.word	0x20000228

08080880 <_Z8isDSTusav>:
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
}

bool isDSTusa() {
 8080880:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 8080882:	f003 f82f 	bl	80838e4 <_ZN9TimeClass3dayEv>
 8080886:	4605      	mov	r5, r0
  int month = Time.month();
 8080888:	f003 f83d 	bl	8083906 <_ZN9TimeClass5monthEv>
 808088c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 808088e:	f003 f833 	bl	80838f8 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 8080892:	1f23      	subs	r3, r4, #4
 8080894:	2b06      	cmp	r3, #6
 8080896:	d90e      	bls.n	80808b6 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 8080898:	1ee3      	subs	r3, r4, #3
 808089a:	2b08      	cmp	r3, #8
 808089c:	d80d      	bhi.n	80808ba <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
 808089e:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 80808a0:	1a2d      	subs	r5, r5, r0
 80808a2:	d501      	bpl.n	80808a8 <_Z8isDSTusav+0x28>
 80808a4:	2c0b      	cmp	r4, #11
 80808a6:	e002      	b.n	80808ae <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 80808a8:	2d07      	cmp	r5, #7
 80808aa:	dd06      	ble.n	80808ba <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 80808ac:	2c03      	cmp	r4, #3
 80808ae:	bf14      	ite	ne
 80808b0:	2000      	movne	r0, #0
 80808b2:	2001      	moveq	r0, #1
 80808b4:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
  { // April to October definetly DST
    return true;
 80808b6:	2001      	movs	r0, #1
 80808b8:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
 80808ba:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 80808bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080808c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 80808c0:	b530      	push	{r4, r5, lr}
 80808c2:	b085      	sub	sp, #20
 80808c4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
 80808c6:	2200      	movs	r2, #0
 80808c8:	a904      	add	r1, sp, #16
 80808ca:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
 80808ce:	f001 fccb 	bl	8082268 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 80808d2:	b9a8      	cbnz	r0, 8080900 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
 80808d4:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
 80808d6:	b10c      	cbz	r4, 80808dc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
 80808d8:	6923      	ldr	r3, [r4, #16]
 80808da:	b923      	cbnz	r3, 80808e6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
 80808dc:	4a09      	ldr	r2, [pc, #36]	; (8080904 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
 80808de:	2100      	movs	r1, #0
 80808e0:	200a      	movs	r0, #10
 80808e2:	f001 fca9 	bl	8082238 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 80808e6:	2300      	movs	r3, #0
 80808e8:	9301      	str	r3, [sp, #4]
 80808ea:	230c      	movs	r3, #12
 80808ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80808f0:	2304      	movs	r3, #4
 80808f2:	9303      	str	r3, [sp, #12]
 80808f4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 80808f6:	6923      	ldr	r3, [r4, #16]
 80808f8:	aa01      	add	r2, sp, #4
 80808fa:	2101      	movs	r1, #1
 80808fc:	4620      	mov	r0, r4
 80808fe:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
 8080900:	b005      	add	sp, #20
 8080902:	bd30      	pop	{r4, r5, pc}
 8080904:	08081f79 	.word	0x08081f79

08080908 <_Z17getBatteryContextv>:
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
 8080908:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
 808090a:	4d0e      	ldr	r5, [pc, #56]	; (8080944 <_Z17getBatteryContextv+0x3c>)
  float qualityPercentage = sig.getQuality();

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}

void getBatteryContext() {
 808090c:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
 808090e:	ac01      	add	r4, sp, #4
 8080910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8080918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 808091c:	4669      	mov	r1, sp
 808091e:	2007      	movs	r0, #7
 8080920:	f7ff ffce 	bl	80808c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
 8080924:	2800      	cmp	r0, #0
        return val;
 8080926:	bfa8      	it	ge
 8080928:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
 808092a:	ab08      	add	r3, sp, #32
 808092c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8080930:	f850 3c1c 	ldr.w	r3, [r0, #-28]
 8080934:	4a04      	ldr	r2, [pc, #16]	; (8080948 <_Z17getBatteryContextv+0x40>)
 8080936:	2110      	movs	r1, #16
 8080938:	4804      	ldr	r0, [pc, #16]	; (808094c <_Z17getBatteryContextv+0x44>)
 808093a:	f001 fdcf 	bl	80824dc <snprintf>

}
 808093e:	b009      	add	sp, #36	; 0x24
 8080940:	bd30      	pop	{r4, r5, pc}
 8080942:	bf00      	nop
 8080944:	08085df8 	.word	0x08085df8
 8080948:	080860ce 	.word	0x080860ce
 808094c:	200001e6 	.word	0x200001e6

08080950 <_Z16takeMeasurementsv>:
}


// These are the functions that are part of the takeMeasurements call
void takeMeasurements()
{
 8080950:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080952:	4b19      	ldr	r3, [pc, #100]	; (80809b8 <_Z16takeMeasurementsv+0x68>)
 8080954:	2200      	movs	r2, #0
 8080956:	4611      	mov	r1, r2
 8080958:	6858      	ldr	r0, [r3, #4]
 808095a:	f001 fd5f 	bl	808241c <network_ready>
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 808095e:	b108      	cbz	r0, 8080964 <_Z16takeMeasurementsv+0x14>
 8080960:	f7ff fde0 	bl	8080524 <_Z17getSignalStrengthv>
  getTemperature();                                                   // Get Temperature at startup as well
 8080964:	f7ff fe18 	bl	8080598 <_Z14getTemperaturev>
  getBatteryContext();                                                // What is the battery up to?
 8080968:	f7ff ffce 	bl	8080908 <_Z17getBatteryContextv>
 808096c:	a901      	add	r1, sp, #4
 808096e:	2003      	movs	r0, #3
 8080970:	f7ff ffa6 	bl	80808c0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
 8080974:	b9b0      	cbnz	r0, 80809a4 <_Z16takeMeasurementsv+0x54>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
 8080976:	2106      	movs	r1, #6
 8080978:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 808097c:	f7ff fcf4 	bl	8080368 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
 8080980:	4605      	mov	r5, r0
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 8080982:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8080986:	f004 f9bd 	bl	8084d04 <__aeabi_ui2f>
 808098a:	4629      	mov	r1, r5
 808098c:	4604      	mov	r4, r0
 808098e:	4628      	mov	r0, r5
 8080990:	f004 f908 	bl	8084ba4 <__addsf3>
 8080994:	4601      	mov	r1, r0
 8080996:	f004 f905 	bl	8084ba4 <__addsf3>
 808099a:	4601      	mov	r1, r0
 808099c:	4620      	mov	r0, r4
 808099e:	f004 fabd 	bl	8084f1c <__aeabi_fdiv>
 80809a2:	e000      	b.n	80809a6 <_Z16takeMeasurementsv+0x56>
            return -1.0f;
 80809a4:	4805      	ldr	r0, [pc, #20]	; (80809bc <_Z16takeMeasurementsv+0x6c>)
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
 80809a6:	f004 fbcb 	bl	8085140 <__aeabi_f2iz>
 80809aa:	4b05      	ldr	r3, [pc, #20]	; (80809c0 <_Z16takeMeasurementsv+0x70>)
  systemStatusWriteNeeded=true;
 80809ac:	2201      	movs	r2, #1
void takeMeasurements()
{
  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
  getTemperature();                                                   // Get Temperature at startup as well
  getBatteryContext();                                                // What is the battery up to?
  sysStatus.stateOfCharge = int(System.batteryCharge());             // Percentage of full charge
 80809ae:	6098      	str	r0, [r3, #8]
  systemStatusWriteNeeded=true;
 80809b0:	4b04      	ldr	r3, [pc, #16]	; (80809c4 <_Z16takeMeasurementsv+0x74>)
 80809b2:	701a      	strb	r2, [r3, #0]
}
 80809b4:	b003      	add	sp, #12
 80809b6:	bd30      	pop	{r4, r5, pc}
 80809b8:	200002ec 	.word	0x200002ec
 80809bc:	bf800000 	.word	0xbf800000
 80809c0:	200002c0 	.word	0x200002c0
 80809c4:	200001f7 	.word	0x200001f7

080809c8 <_Z17checkSystemValuesv>:
  sysStatus.sensorType = 0;
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 80809c8:	b538      	push	{r3, r4, r5, lr}
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80809ca:	4c2c      	ldr	r4, [pc, #176]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
 80809cc:	f7ff ffc0 	bl	8080950 <_Z16takeMeasurementsv>
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80809d0:	78a3      	ldrb	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
 80809d2:	4d2a      	ldr	r5, [pc, #168]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}

void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
  takeMeasurements();                                               // Sets the sysStatus.stateOfCharge
  if (sysStatus.metricUnits < 0 || sysStatus.metricUnits >1) sysStatus.metricUnits = 0;
 80809d4:	2b01      	cmp	r3, #1
 80809d6:	bf84      	itt	hi
 80809d8:	2300      	movhi	r3, #0
 80809da:	70a3      	strbhi	r3, [r4, #2]
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
 80809dc:	78e3      	ldrb	r3, [r4, #3]
 80809de:	2b01      	cmp	r3, #1
 80809e0:	d906      	bls.n	80809f0 <_Z17checkSystemValuesv+0x28>
 80809e2:	f001 fcdb 	bl	808239c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
 80809e6:	b110      	cbz	r0, 80809ee <_Z17checkSystemValuesv+0x26>
 80809e8:	2301      	movs	r3, #1
 80809ea:	70eb      	strb	r3, [r5, #3]
 80809ec:	e000      	b.n	80809f0 <_Z17checkSystemValuesv+0x28>
    else sysStatus.connectedStatus = false;
 80809ee:	70e8      	strb	r0, [r5, #3]
  }
  if (sysStatus.sensorType > 2) {
 80809f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80809f4:	2b02      	cmp	r3, #2
 80809f6:	d907      	bls.n	8080a08 <_Z17checkSystemValuesv+0x40>
    sysStatus.sensorType = 0;
 80809f8:	4b20      	ldr	r3, [pc, #128]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
 80809fa:	2200      	movs	r2, #0
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 80809fc:	4920      	ldr	r1, [pc, #128]	; (8080a80 <_Z17checkSystemValuesv+0xb8>)
 80809fe:	4821      	ldr	r0, [pc, #132]	; (8080a84 <_Z17checkSystemValuesv+0xbc>)
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
    if (Particle.connected()) sysStatus.connectedStatus = true;
    else sysStatus.connectedStatus = false;
  }
  if (sysStatus.sensorType > 2) {
    sysStatus.sensorType = 0;
 8080a00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080a04:	f004 fd59 	bl	80854ba <strcpy>
  }
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 8080a08:	68a2      	ldr	r2, [r4, #8]
 8080a0a:	4b1c      	ldr	r3, [pc, #112]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
 8080a0c:	2a1d      	cmp	r2, #29
 8080a0e:	bfd4      	ite	le
 8080a10:	2201      	movle	r2, #1
  else sysStatus.lowBatteryMode = false;
 8080a12:	2200      	movgt	r2, #0
 8080a14:	71da      	strb	r2, [r3, #7]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 8080a16:	6923      	ldr	r3, [r4, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 8080a18:	6965      	ldr	r5, [r4, #20]
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
  }
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 8080a1a:	2bff      	cmp	r3, #255	; 0xff
 8080a1c:	bf82      	ittt	hi
 8080a1e:	4b17      	ldrhi	r3, [pc, #92]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
 8080a20:	2200      	movhi	r2, #0
 8080a22:	611a      	strhi	r2, [r3, #16]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 8080a24:	4918      	ldr	r1, [pc, #96]	; (8080a88 <_Z17checkSystemValuesv+0xc0>)
 8080a26:	4628      	mov	r0, r5
 8080a28:	f004 fb62 	bl	80850f0 <__aeabi_fcmplt>
 8080a2c:	b920      	cbnz	r0, 8080a38 <_Z17checkSystemValuesv+0x70>
 8080a2e:	4917      	ldr	r1, [pc, #92]	; (8080a8c <_Z17checkSystemValuesv+0xc4>)
 8080a30:	4628      	mov	r0, r5
 8080a32:	f004 fb7b 	bl	808512c <__aeabi_fcmpgt>
 8080a36:	b108      	cbz	r0, 8080a3c <_Z17checkSystemValuesv+0x74>
 8080a38:	4b15      	ldr	r3, [pc, #84]	; (8080a90 <_Z17checkSystemValuesv+0xc8>)
 8080a3a:	6163      	str	r3, [r4, #20]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 8080a3c:	69a5      	ldr	r5, [r4, #24]
 8080a3e:	2100      	movs	r1, #0
 8080a40:	4628      	mov	r0, r5
 8080a42:	f004 fb55 	bl	80850f0 <__aeabi_fcmplt>
 8080a46:	b928      	cbnz	r0, 8080a54 <_Z17checkSystemValuesv+0x8c>
 8080a48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080a4c:	4628      	mov	r0, r5
 8080a4e:	f004 fb6d 	bl	808512c <__aeabi_fcmpgt>
 8080a52:	b110      	cbz	r0, 8080a5a <_Z17checkSystemValuesv+0x92>
 8080a54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8080a58:	61a3      	str	r3, [r4, #24]
  if (sysStatus.openTime < 0 || sysStatus.openTime > 12) sysStatus.openTime = 0;
 8080a5a:	69e3      	ldr	r3, [r4, #28]
 8080a5c:	2b0c      	cmp	r3, #12
 8080a5e:	bf82      	ittt	hi
 8080a60:	4b06      	ldrhi	r3, [pc, #24]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
 8080a62:	2200      	movhi	r2, #0
 8080a64:	61da      	strhi	r2, [r3, #28]
  if (sysStatus.closeTime < 12 || sysStatus.closeTime > 24) sysStatus.closeTime = 24;
 8080a66:	6a23      	ldr	r3, [r4, #32]
 8080a68:	3b0c      	subs	r3, #12
 8080a6a:	2b0c      	cmp	r3, #12
 8080a6c:	bf82      	ittt	hi
 8080a6e:	4b03      	ldrhi	r3, [pc, #12]	; (8080a7c <_Z17checkSystemValuesv+0xb4>)
 8080a70:	2218      	movhi	r2, #24
 8080a72:	621a      	strhi	r2, [r3, #32]

  systemStatusWriteNeeded = true;
 8080a74:	4b07      	ldr	r3, [pc, #28]	; (8080a94 <_Z17checkSystemValuesv+0xcc>)
 8080a76:	2201      	movs	r2, #1
 8080a78:	701a      	strb	r2, [r3, #0]
 8080a7a:	bd38      	pop	{r3, r4, r5, pc}
 8080a7c:	200002c0 	.word	0x200002c0
 8080a80:	08085ec0 	.word	0x08085ec0
 8080a84:	200002b0 	.word	0x200002b0
 8080a88:	c1400000 	.word	0xc1400000
 8080a8c:	41400000 	.word	0x41400000
 8080a90:	c0a00000 	.word	0xc0a00000
 8080a94:	200001f7 	.word	0x200001f7

08080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080a98:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080a9a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080a9c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080a9e:	b17c      	cbz	r4, 8080ac0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080aa0:	6863      	ldr	r3, [r4, #4]
 8080aa2:	3b01      	subs	r3, #1
 8080aa4:	6063      	str	r3, [r4, #4]
 8080aa6:	b95b      	cbnz	r3, 8080ac0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080aa8:	6823      	ldr	r3, [r4, #0]
 8080aaa:	4620      	mov	r0, r4
 8080aac:	689b      	ldr	r3, [r3, #8]
 8080aae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080ab0:	68a3      	ldr	r3, [r4, #8]
 8080ab2:	3b01      	subs	r3, #1
 8080ab4:	60a3      	str	r3, [r4, #8]
 8080ab6:	b91b      	cbnz	r3, 8080ac0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080ab8:	6823      	ldr	r3, [r4, #0]
 8080aba:	4620      	mov	r0, r4
 8080abc:	68db      	ldr	r3, [r3, #12]
 8080abe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080ac0:	4628      	mov	r0, r5
 8080ac2:	bd38      	pop	{r3, r4, r5, pc}

08080ac4 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)                                       // Resets the current hourly and daily counts
{
 8080ac4:	b530      	push	{r4, r5, lr}
 8080ac6:	491c      	ldr	r1, [pc, #112]	; (8080b38 <_Z11resetCounts6String+0x74>)
 8080ac8:	b085      	sub	sp, #20
 8080aca:	f002 fcdd 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080ace:	2800      	cmp	r0, #0
 8080ad0:	d02f      	beq.n	8080b32 <_Z11resetCounts6String+0x6e>
 8080ad2:	f001 fc63 	bl	808239c <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("Reset","All counts reset",PRIVATE);
 8080ad6:	b160      	cbz	r0, 8080af2 <_Z11resetCounts6String+0x2e>
 8080ad8:	4b18      	ldr	r3, [pc, #96]	; (8080b3c <_Z11resetCounts6String+0x78>)
 8080ada:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080adc:	781b      	ldrb	r3, [r3, #0]
 8080ade:	a802      	add	r0, sp, #8
 8080ae0:	f88d 2000 	strb.w	r2, [sp]
 8080ae4:	4916      	ldr	r1, [pc, #88]	; (8080b40 <_Z11resetCounts6String+0x7c>)
 8080ae6:	4a17      	ldr	r2, [pc, #92]	; (8080b44 <_Z11resetCounts6String+0x80>)
 8080ae8:	f7ff fbae 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080aec:	a803      	add	r0, sp, #12
 8080aee:	f7ff ffd3 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    current.dailyCount = 0;                              // Reset the counts in FRAM as well
 8080af2:	4d15      	ldr	r5, [pc, #84]	; (8080b48 <_Z11resetCounts6String+0x84>)
 8080af4:	2400      	movs	r4, #0
 8080af6:	60ac      	str	r4, [r5, #8]
    current.hourlyCount = 0;
 8080af8:	602c      	str	r4, [r5, #0]
    current.lastCountTime = Time.now();                      // Set the time context to the new day
 8080afa:	f002 fed8 	bl	80838ae <_ZN9TimeClass3nowEv>
    sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080afe:	4b13      	ldr	r3, [pc, #76]	; (8080b4c <_Z11resetCounts6String+0x88>)
  {
    if (Particle.connected()) Particle.publish("Reset","All counts reset",PRIVATE);

    current.dailyCount = 0;                              // Reset the counts in FRAM as well
    current.hourlyCount = 0;
    current.lastCountTime = Time.now();                      // Set the time context to the new day
 8080b00:	60e8      	str	r0, [r5, #12]
    sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day
 8080b02:	611c      	str	r4, [r3, #16]
 8080b04:	616c      	str	r4, [r5, #20]

    hourlies.startingTimeStamp = Time.now();
 8080b06:	f002 fed2 	bl	80838ae <_ZN9TimeClass3nowEv>
 8080b0a:	4b11      	ldr	r3, [pc, #68]	; (8080b50 <_Z11resetCounts6String+0x8c>)
    hourlies.maxStateOfCharge = 0;
    hourlies.minStateOfCharge = 100;
 8080b0c:	2264      	movs	r2, #100	; 0x64
 8080b0e:	669a      	str	r2, [r3, #104]	; 0x68
    hourlies.dailyCount = 0;
 8080b10:	461a      	mov	r2, r3
    current.dailyCount = 0;                              // Reset the counts in FRAM as well
    current.hourlyCount = 0;
    current.lastCountTime = Time.now();                      // Set the time context to the new day
    sysStatus.resetCount = current.alertCount = 0;           // Reset everything for the day

    hourlies.startingTimeStamp = Time.now();
 8080b12:	6018      	str	r0, [r3, #0]
    hourlies.maxStateOfCharge = 0;
 8080b14:	66dc      	str	r4, [r3, #108]	; 0x6c
    hourlies.minStateOfCharge = 100;
    hourlies.dailyCount = 0;
 8080b16:	f842 4f04 	str.w	r4, [r2, #4]!
 8080b1a:	3364      	adds	r3, #100	; 0x64
    for (int i=0; i < 24; i++) {
      hourlies.hourlyCount[i] = 0;
 8080b1c:	f842 4f04 	str.w	r4, [r2, #4]!

    hourlies.startingTimeStamp = Time.now();
    hourlies.maxStateOfCharge = 0;
    hourlies.minStateOfCharge = 100;
    hourlies.dailyCount = 0;
    for (int i=0; i < 24; i++) {
 8080b20:	429a      	cmp	r2, r3
 8080b22:	d1fb      	bne.n	8080b1c <_Z11resetCounts6String+0x58>
      hourlies.hourlyCount[i] = 0;
    }
    hourliesCountsWriteNeeded = true;
 8080b24:	4b0b      	ldr	r3, [pc, #44]	; (8080b54 <_Z11resetCounts6String+0x90>)
 8080b26:	2001      	movs	r0, #1
 8080b28:	7018      	strb	r0, [r3, #0]
    currentCountsWriteNeeded=true;
 8080b2a:	4b0b      	ldr	r3, [pc, #44]	; (8080b58 <_Z11resetCounts6String+0x94>)
 8080b2c:	7018      	strb	r0, [r3, #0]
    systemStatusWriteNeeded=true;
 8080b2e:	4b0b      	ldr	r3, [pc, #44]	; (8080b5c <_Z11resetCounts6String+0x98>)
 8080b30:	7018      	strb	r0, [r3, #0]
    return 1;
  }
  else return 0;
}
 8080b32:	b005      	add	sp, #20
 8080b34:	bd30      	pop	{r4, r5, pc}
 8080b36:	bf00      	nop
 8080b38:	0808627e 	.word	0x0808627e
 8080b3c:	200001c4 	.word	0x200001c4
 8080b40:	080860f0 	.word	0x080860f0
 8080b44:	08085ed0 	.word	0x08085ed0
 8080b48:	20000290 	.word	0x20000290
 8080b4c:	200002c0 	.word	0x200002c0
 8080b50:	20000138 	.word	0x20000138
 8080b54:	200001f6 	.word	0x200001f6
 8080b58:	20000288 	.word	0x20000288
 8080b5c:	200001f7 	.word	0x200001f7

08080b60 <_Z12hardResetNow6String>:

int hardResetNow(String command)   {                                    // Will perform a hard reset on the Electron
 8080b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8080b62:	490f      	ldr	r1, [pc, #60]	; (8080ba0 <_Z12hardResetNow6String+0x40>)
 8080b64:	f002 fc90 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080b68:	b1b0      	cbz	r0, 8080b98 <_Z12hardResetNow6String+0x38>
 8080b6a:	4a0e      	ldr	r2, [pc, #56]	; (8080ba4 <_Z12hardResetNow6String+0x44>)
 8080b6c:	4b0e      	ldr	r3, [pc, #56]	; (8080ba8 <_Z12hardResetNow6String+0x48>)
 8080b6e:	7812      	ldrb	r2, [r2, #0]
 8080b70:	781b      	ldrb	r3, [r3, #0]
  {
    Particle.publish("Reset","Hard Reset in 2 seconds",PRIVATE, WITH_ACK);
 8080b72:	490e      	ldr	r1, [pc, #56]	; (8080bac <_Z12hardResetNow6String+0x4c>)
 8080b74:	f88d 2000 	strb.w	r2, [sp]
 8080b78:	a802      	add	r0, sp, #8
 8080b7a:	4a0d      	ldr	r2, [pc, #52]	; (8080bb0 <_Z12hardResetNow6String+0x50>)
 8080b7c:	f7ff fb64 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080b80:	a803      	add	r0, sp, #12
 8080b82:	f7ff ff89 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(2000);
 8080b86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080b8a:	f001 fcbf 	bl	808250c <delay>
    digitalWrite(hardResetPin,HIGH);                                    // This will cut all power to the Electron AND the carrir board
 8080b8e:	2004      	movs	r0, #4
 8080b90:	2101      	movs	r1, #1
 8080b92:	f003 f986 	bl	8083ea2 <digitalWrite>
 8080b96:	2001      	movs	r0, #1
    return 1;                                                           // Unfortunately, this will never be sent
  }
  else return 0;
}
 8080b98:	b005      	add	sp, #20
 8080b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8080b9e:	bf00      	nop
 8080ba0:	0808627e 	.word	0x0808627e
 8080ba4:	200001e5 	.word	0x200001e5
 8080ba8:	200001c4 	.word	0x200001c4
 8080bac:	080860f0 	.word	0x080860f0
 8080bb0:	08085ee1 	.word	0x08085ee1

08080bb4 <_Z19setDisconnectedMode6String>:

int setDisconnectedMode(String command) // Function to force sending data in current hour
{
 8080bb4:	b530      	push	{r4, r5, lr}
 8080bb6:	491c      	ldr	r1, [pc, #112]	; (8080c28 <_Z19setDisconnectedMode6String+0x74>)
 8080bb8:	b085      	sub	sp, #20
 8080bba:	4604      	mov	r4, r0
 8080bbc:	f002 fc64 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080bc0:	4605      	mov	r5, r0
 8080bc2:	b1b8      	cbz	r0, 8080bf4 <_Z19setDisconnectedMode6String+0x40>
  {
    sysStatus.disconnectedLogger = true;
 8080bc4:	4b19      	ldr	r3, [pc, #100]	; (8080c2c <_Z19setDisconnectedMode6String+0x78>)
    sysStatus.connectedStatus = false;
 8080bc6:	2200      	movs	r2, #0

int setDisconnectedMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    sysStatus.disconnectedLogger = true;
 8080bc8:	2401      	movs	r4, #1
 8080bca:	705c      	strb	r4, [r3, #1]
    sysStatus.connectedStatus = false;
 8080bcc:	70da      	strb	r2, [r3, #3]
 8080bce:	4b18      	ldr	r3, [pc, #96]	; (8080c30 <_Z19setDisconnectedMode6String+0x7c>)
    Particle.publish("Mode","Changing device to disconnected mode - User / Reset to recover",PRIVATE);
 8080bd0:	4918      	ldr	r1, [pc, #96]	; (8080c34 <_Z19setDisconnectedMode6String+0x80>)
 8080bd2:	781b      	ldrb	r3, [r3, #0]
 8080bd4:	a802      	add	r0, sp, #8
 8080bd6:	f88d 2000 	strb.w	r2, [sp]
 8080bda:	4a17      	ldr	r2, [pc, #92]	; (8080c38 <_Z19setDisconnectedMode6String+0x84>)
 8080bdc:	f7ff fb34 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080be0:	a803      	add	r0, sp, #12
 8080be2:	f7ff ff59 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay (10000);
 8080be6:	f242 7010 	movw	r0, #10000	; 0x2710
 8080bea:	f001 fc8f 	bl	808250c <delay>
    disconnectFromParticle();
 8080bee:	f7ff fde5 	bl	80807bc <_Z22disconnectFromParticlev>
 8080bf2:	e016      	b.n	8080c22 <_Z19setDisconnectedMode6String+0x6e>
 8080bf4:	4911      	ldr	r1, [pc, #68]	; (8080c3c <_Z19setDisconnectedMode6String+0x88>)
 8080bf6:	4620      	mov	r0, r4
 8080bf8:	f002 fc46 	bl	8083488 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0") {
 8080bfc:	b190      	cbz	r0, 8080c24 <_Z19setDisconnectedMode6String+0x70>
    sysStatus.disconnectedLogger = false;
 8080bfe:	4b0b      	ldr	r3, [pc, #44]	; (8080c2c <_Z19setDisconnectedMode6String+0x78>)
    sysStatus.connectedStatus = true;
 8080c00:	2401      	movs	r4, #1
    delay (10000);
    disconnectFromParticle();
    return 1;
  }
  else if (command == "0") {
    sysStatus.disconnectedLogger = false;
 8080c02:	705d      	strb	r5, [r3, #1]
    sysStatus.connectedStatus = true;
 8080c04:	70dc      	strb	r4, [r3, #3]
    connectToParticle();
 8080c06:	f7ff fd83 	bl	8080710 <_Z17connectToParticlev>
 8080c0a:	4b09      	ldr	r3, [pc, #36]	; (8080c30 <_Z19setDisconnectedMode6String+0x7c>)
    if (Particle.connected) Particle.publish("Mode","Changing device to connected mode - User / Reset to recover",PRIVATE);
 8080c0c:	a802      	add	r0, sp, #8
 8080c0e:	781b      	ldrb	r3, [r3, #0]
 8080c10:	4a0b      	ldr	r2, [pc, #44]	; (8080c40 <_Z19setDisconnectedMode6String+0x8c>)
 8080c12:	f88d 5000 	strb.w	r5, [sp]
 8080c16:	4907      	ldr	r1, [pc, #28]	; (8080c34 <_Z19setDisconnectedMode6String+0x80>)
 8080c18:	f7ff fb16 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080c1c:	a803      	add	r0, sp, #12
 8080c1e:	f7ff ff3b 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080c22:	4620      	mov	r0, r4
    return 1;
  }
  else return 0;
}
 8080c24:	b005      	add	sp, #20
 8080c26:	bd30      	pop	{r4, r5, pc}
 8080c28:	0808627e 	.word	0x0808627e
 8080c2c:	200002c0 	.word	0x200002c0
 8080c30:	200001c4 	.word	0x200001c4
 8080c34:	08085fa3 	.word	0x08085fa3
 8080c38:	08085ef9 	.word	0x08085ef9
 8080c3c:	08085f38 	.word	0x08085f38
 8080c40:	08085f3a 	.word	0x08085f3a

08080c44 <_Z15dailyResetEventv>:
void initializeDataLog() {                                        // Simply writes the header line after the memory card is swapped out
  if (initializeOnce) Serial1.println("Date, Daily, BattMax, BattMin, 12a,1a,2a,3a,4a,5a,6a,7a,8a,9a,10a,11a,12p,1p,2p,3p,4p,5p,6p,7p,8p,9p,10p,11p");
  initializeOnce = false;
}

void dailyResetEvent() {
 8080c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  takeMeasurements();
 8080c46:	f7ff fe83 	bl	8080950 <_Z16takeMeasurementsv>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
 8080c4a:	f7ff fe19 	bl	8080880 <_Z8isDSTusav>
 8080c4e:	b110      	cbz	r0, 8080c56 <_Z15dailyResetEventv+0x12>
 8080c50:	f002 fdda 	bl	8083808 <_ZN9TimeClass8beginDSTEv>
 8080c54:	e001      	b.n	8080c5a <_Z15dailyResetEventv+0x16>
 8080c56:	f002 fde1 	bl	808381c <_ZN9TimeClass6endDSTEv>
    
  if (sysStatus.stateOfCharge < 60) setDisconnectedMode("1");     // Someone forgot to put it into disconnected mode
 8080c5a:	4b17      	ldr	r3, [pc, #92]	; (8080cb8 <_Z15dailyResetEventv+0x74>)
 8080c5c:	689a      	ldr	r2, [r3, #8]
 8080c5e:	461c      	mov	r4, r3
 8080c60:	2a3b      	cmp	r2, #59	; 0x3b
 8080c62:	dc09      	bgt.n	8080c78 <_Z15dailyResetEventv+0x34>
 8080c64:	4915      	ldr	r1, [pc, #84]	; (8080cbc <_Z15dailyResetEventv+0x78>)
 8080c66:	4668      	mov	r0, sp
 8080c68:	f002 fbbd 	bl	80833e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8080c6c:	4668      	mov	r0, sp
 8080c6e:	f7ff ffa1 	bl	8080bb4 <_Z19setDisconnectedMode6String>
 8080c72:	4668      	mov	r0, sp
 8080c74:	f002 fb70 	bl	8083358 <_ZN6StringD1Ev>
  
  if (sysStatus.stateOfCharge < 50) {                             // Battery levels are getting low - reduce reporting
 8080c78:	68a2      	ldr	r2, [r4, #8]
 8080c7a:	4b0f      	ldr	r3, [pc, #60]	; (8080cb8 <_Z15dailyResetEventv+0x74>)
 8080c7c:	2a31      	cmp	r2, #49	; 0x31
 8080c7e:	dc03      	bgt.n	8080c88 <_Z15dailyResetEventv+0x44>
    sysStatus.openTime = 6;
 8080c80:	2206      	movs	r2, #6
 8080c82:	61da      	str	r2, [r3, #28]
    sysStatus.closeTime = 21;
 8080c84:	2215      	movs	r2, #21
 8080c86:	e004      	b.n	8080c92 <_Z15dailyResetEventv+0x4e>
  }
  else if (sysStatus.stateOfCharge > 90) {                        // Battery levels are high - more reporting
 8080c88:	2a5a      	cmp	r2, #90	; 0x5a
 8080c8a:	dd03      	ble.n	8080c94 <_Z15dailyResetEventv+0x50>
    sysStatus.openTime = 0;
 8080c8c:	2200      	movs	r2, #0
 8080c8e:	61da      	str	r2, [r3, #28]
    sysStatus.closeTime = 24;
 8080c90:	2218      	movs	r2, #24
 8080c92:	621a      	str	r2, [r3, #32]
  }
  writeToDataLog();                                               // To write to the datalog daily - covers state where deivce sleeps
 8080c94:	f7ff fbf6 	bl	8080484 <_Z14writeToDataLogv>
  resetCounts("1");
 8080c98:	4908      	ldr	r1, [pc, #32]	; (8080cbc <_Z15dailyResetEventv+0x78>)
 8080c9a:	4668      	mov	r0, sp
 8080c9c:	f002 fba3 	bl	80833e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8080ca0:	4668      	mov	r0, sp
 8080ca2:	f7ff ff0f 	bl	8080ac4 <_Z11resetCounts6String>
 8080ca6:	4668      	mov	r0, sp
 8080ca8:	f002 fb56 	bl	8083358 <_ZN6StringD1Ev>
  initializeOnce = true;
 8080cac:	4b04      	ldr	r3, [pc, #16]	; (8080cc0 <_Z15dailyResetEventv+0x7c>)
 8080cae:	2201      	movs	r2, #1
 8080cb0:	701a      	strb	r2, [r3, #0]
}
 8080cb2:	b004      	add	sp, #16
 8080cb4:	bd10      	pop	{r4, pc}
 8080cb6:	bf00      	nop
 8080cb8:	200002c0 	.word	0x200002c0
 8080cbc:	0808627e 	.word	0x0808627e
 8080cc0:	20000076 	.word	0x20000076

08080cc4 <_Z13setSensorType6String>:
  }
  else return 0;
}

int setSensorType(String command) // Function to force sending data in current hour
{
 8080cc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080cc6:	4930      	ldr	r1, [pc, #192]	; (8080d88 <_Z13setSensorType6String+0xc4>)
 8080cc8:	4604      	mov	r4, r0
 8080cca:	f002 fbdd 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command == "0")
 8080cce:	4606      	mov	r6, r0
 8080cd0:	b1a8      	cbz	r0, 8080cfe <_Z13setSensorType6String+0x3a>
  {
    sysStatus.sensorType = 0;
 8080cd2:	4b2e      	ldr	r3, [pc, #184]	; (8080d8c <_Z13setSensorType6String+0xc8>)
 8080cd4:	2500      	movs	r5, #0
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080cd6:	492e      	ldr	r1, [pc, #184]	; (8080d90 <_Z13setSensorType6String+0xcc>)
 8080cd8:	482e      	ldr	r0, [pc, #184]	; (8080d94 <_Z13setSensorType6String+0xd0>)

int setSensorType(String command) // Function to force sending data in current hour
{
  if (command == "0")
  {
    sysStatus.sensorType = 0;
 8080cda:	f883 5028 	strb.w	r5, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8080cde:	f004 fbec 	bl	80854ba <strcpy>
    systemStatusWriteNeeded=true;
 8080ce2:	4b2d      	ldr	r3, [pc, #180]	; (8080d98 <_Z13setSensorType6String+0xd4>)
 8080ce4:	2401      	movs	r4, #1
 8080ce6:	701c      	strb	r4, [r3, #0]
 8080ce8:	f001 fb58 	bl	808239c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Pressure", PRIVATE);
 8080cec:	b908      	cbnz	r0, 8080cf2 <_Z13setSensorType6String+0x2e>
    return 1;
 8080cee:	2001      	movs	r0, #1
 8080cf0:	e047      	b.n	8080d82 <_Z13setSensorType6String+0xbe>
 8080cf2:	4b2a      	ldr	r3, [pc, #168]	; (8080d9c <_Z13setSensorType6String+0xd8>)
  if (command == "0")
  {
    sysStatus.sensorType = 0;
    strcpy(sensorTypeConfigStr,"Pressure Sensor");
    systemStatusWriteNeeded=true;
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Pressure", PRIVATE);
 8080cf4:	4a2a      	ldr	r2, [pc, #168]	; (8080da0 <_Z13setSensorType6String+0xdc>)
 8080cf6:	781b      	ldrb	r3, [r3, #0]
 8080cf8:	f88d 5000 	strb.w	r5, [sp]
 8080cfc:	e018      	b.n	8080d30 <_Z13setSensorType6String+0x6c>
 8080cfe:	4929      	ldr	r1, [pc, #164]	; (8080da4 <_Z13setSensorType6String+0xe0>)
 8080d00:	4620      	mov	r0, r4
 8080d02:	f002 fbc1 	bl	8083488 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "1")
 8080d06:	4605      	mov	r5, r0
 8080d08:	b1d0      	cbz	r0, 8080d40 <_Z13setSensorType6String+0x7c>
  {
    sysStatus.sensorType = 1;
 8080d0a:	4b20      	ldr	r3, [pc, #128]	; (8080d8c <_Z13setSensorType6String+0xc8>)
 8080d0c:	2401      	movs	r4, #1
    strcpy(sensorTypeConfigStr,"PIR Sensor");
 8080d0e:	4926      	ldr	r1, [pc, #152]	; (8080da8 <_Z13setSensorType6String+0xe4>)
 8080d10:	4820      	ldr	r0, [pc, #128]	; (8080d94 <_Z13setSensorType6String+0xd0>)
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Pressure", PRIVATE);
    return 1;
  }
  else if (command == "1")
  {
    sysStatus.sensorType = 1;
 8080d12:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"PIR Sensor");
 8080d16:	f004 fbd0 	bl	80854ba <strcpy>
    systemStatusWriteNeeded=true;
 8080d1a:	4b1f      	ldr	r3, [pc, #124]	; (8080d98 <_Z13setSensorType6String+0xd4>)
 8080d1c:	701c      	strb	r4, [r3, #0]
 8080d1e:	f001 fb3d 	bl	808239c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
 8080d22:	2800      	cmp	r0, #0
 8080d24:	d0e3      	beq.n	8080cee <_Z13setSensorType6String+0x2a>
 8080d26:	4b1d      	ldr	r3, [pc, #116]	; (8080d9c <_Z13setSensorType6String+0xd8>)
 8080d28:	4a20      	ldr	r2, [pc, #128]	; (8080dac <_Z13setSensorType6String+0xe8>)
 8080d2a:	781b      	ldrb	r3, [r3, #0]
 8080d2c:	f88d 6000 	strb.w	r6, [sp]
 8080d30:	a802      	add	r0, sp, #8
 8080d32:	491f      	ldr	r1, [pc, #124]	; (8080db0 <_Z13setSensorType6String+0xec>)
 8080d34:	f7ff fa88 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080d38:	a803      	add	r0, sp, #12
 8080d3a:	f7ff fead 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080d3e:	e7d6      	b.n	8080cee <_Z13setSensorType6String+0x2a>
 8080d40:	491c      	ldr	r1, [pc, #112]	; (8080db4 <_Z13setSensorType6String+0xf0>)
 8080d42:	4620      	mov	r0, r4
 8080d44:	f002 fba0 	bl	8083488 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "2")
 8080d48:	b1d8      	cbz	r0, 8080d82 <_Z13setSensorType6String+0xbe>
  {
    sysStatus.sensorType = 2;
 8080d4a:	4b10      	ldr	r3, [pc, #64]	; (8080d8c <_Z13setSensorType6String+0xc8>)
 8080d4c:	2202      	movs	r2, #2
    strcpy(sensorTypeConfigStr,"Legacy Sensor");
 8080d4e:	491a      	ldr	r1, [pc, #104]	; (8080db8 <_Z13setSensorType6String+0xf4>)
 8080d50:	4810      	ldr	r0, [pc, #64]	; (8080d94 <_Z13setSensorType6String+0xd0>)
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }
  else if (command == "2")
  {
    sysStatus.sensorType = 2;
 8080d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    strcpy(sensorTypeConfigStr,"Legacy Sensor");
 8080d56:	f004 fbb0 	bl	80854ba <strcpy>
    systemStatusWriteNeeded=true;
 8080d5a:	4b0f      	ldr	r3, [pc, #60]	; (8080d98 <_Z13setSensorType6String+0xd4>)
 8080d5c:	2401      	movs	r4, #1
 8080d5e:	701c      	strb	r4, [r3, #0]
 8080d60:	f001 fb1c 	bl	808239c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to Legacy", PRIVATE);
 8080d64:	2800      	cmp	r0, #0
 8080d66:	d0c2      	beq.n	8080cee <_Z13setSensorType6String+0x2a>
 8080d68:	4b0c      	ldr	r3, [pc, #48]	; (8080d9c <_Z13setSensorType6String+0xd8>)
 8080d6a:	4a14      	ldr	r2, [pc, #80]	; (8080dbc <_Z13setSensorType6String+0xf8>)
 8080d6c:	781b      	ldrb	r3, [r3, #0]
 8080d6e:	4910      	ldr	r1, [pc, #64]	; (8080db0 <_Z13setSensorType6String+0xec>)
 8080d70:	a802      	add	r0, sp, #8
 8080d72:	f88d 5000 	strb.w	r5, [sp]
 8080d76:	f7ff fa67 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080d7a:	a803      	add	r0, sp, #12
 8080d7c:	f7ff fe8c 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080d80:	4620      	mov	r0, r4
  }

  else return 0;
}
 8080d82:	b004      	add	sp, #16
 8080d84:	bd70      	pop	{r4, r5, r6, pc}
 8080d86:	bf00      	nop
 8080d88:	08085f38 	.word	0x08085f38
 8080d8c:	200002c0 	.word	0x200002c0
 8080d90:	08085ec0 	.word	0x08085ec0
 8080d94:	200002b0 	.word	0x200002b0
 8080d98:	200001f7 	.word	0x200001f7
 8080d9c:	200001c4 	.word	0x200001c4
 8080da0:	08085fa8 	.word	0x08085fa8
 8080da4:	0808627e 	.word	0x0808627e
 8080da8:	08085fc4 	.word	0x08085fc4
 8080dac:	08085fcf 	.word	0x08085fcf
 8080db0:	08085fa3 	.word	0x08085fa3
 8080db4:	08085fe6 	.word	0x08085fe6
 8080db8:	08085fe8 	.word	0x08085fe8
 8080dbc:	08085ff6 	.word	0x08085ff6

08080dc0 <_Z11setTimeZone6String>:
  }
  else return 0;
}

int setTimeZone(String command)
{
 8080dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080dc4:	b0cd      	sub	sp, #308	; 0x134
 8080dc6:	4604      	mov	r4, r0
 8080dc8:	f001 fae8 	bl	808239c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 8080dcc:	b110      	cbz	r0, 8080dd4 <_Z11setTimeZone6String+0x14>
            return false;
        }
        return spark_sync_time(NULL);
 8080dce:	2000      	movs	r0, #0
 8080dd0:	f001 faf4 	bl	80823bc <spark_sync_time>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080dd4:	2000      	movs	r0, #0
 8080dd6:	f001 f8ef 	bl	8081fb8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080dda:	f247 582f 	movw	r8, #29999	; 0x752f
 8080dde:	4606      	mov	r6, r0
 8080de0:	2700      	movs	r7, #0
 8080de2:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080de6:	2000      	movs	r0, #0
 8080de8:	f001 f8e6 	bl	8081fb8 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080dec:	1b80      	subs	r0, r0, r6
 8080dee:	eb61 0107 	sbc.w	r1, r1, r7
 8080df2:	4589      	cmp	r9, r1
 8080df4:	bf08      	it	eq
 8080df6:	4580      	cmpeq	r8, r0
 8080df8:	d305      	bcc.n	8080e06 <_Z11setTimeZone6String+0x46>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
 8080dfa:	f7ff f9c7 	bl	808018c <_ZN10CloudClass12syncTimeDoneEv.isra.17>
 8080dfe:	b910      	cbnz	r0, 8080e06 <_Z11setTimeZone6String+0x46>
            spark_process();
 8080e00:	f001 fab4 	bl	808236c <spark_process>
 8080e04:	e7ef      	b.n	8080de6 <_Z11setTimeZone6String+0x26>
 8080e06:	f7ff f9c1 	bl	808018c <_ZN10CloudClass12syncTimeDoneEv.isra.17>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080e0a:	220a      	movs	r2, #10
 8080e0c:	a905      	add	r1, sp, #20
 8080e0e:	6820      	ldr	r0, [r4, #0]
 8080e10:	f004 fc1a 	bl	8085648 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080e14:	f100 030c 	add.w	r3, r0, #12
 8080e18:	b2db      	uxtb	r3, r3
 8080e1a:	2b18      	cmp	r3, #24
 8080e1c:	d84d      	bhi.n	8080eba <_Z11setTimeZone6String+0xfa>
{
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080e1e:	b245      	sxtb	r5, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080e20:	4628      	mov	r0, r5
 8080e22:	f003 ff73 	bl	8084d0c <__aeabi_i2f>
 8080e26:	4b2a      	ldr	r3, [pc, #168]	; (8080ed0 <_Z11setTimeZone6String+0x110>)
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080e28:	2401      	movs	r4, #1
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080e2a:	6158      	str	r0, [r3, #20]
  Time.zone(sysStatus.timezone);
 8080e2c:	f002 fcb6 	bl	808379c <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080e30:	4b28      	ldr	r3, [pc, #160]	; (8080ed4 <_Z11setTimeZone6String+0x114>)
 8080e32:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8080e34:	f002 fca4 	bl	8083780 <_ZN9TimeClass5localEv>
 8080e38:	4606      	mov	r6, r0
 8080e3a:	f002 fd38 	bl	80838ae <_ZN9TimeClass3nowEv>
 8080e3e:	1a30      	subs	r0, r6, r0
 8080e40:	f003 fbba 	bl	80845b8 <__aeabi_i2d>
 8080e44:	a320      	add	r3, pc, #128	; (adr r3, 8080ec8 <_Z11setTimeZone6String+0x108>)
 8080e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080e4a:	f003 fd45 	bl	80848d8 <__aeabi_ddiv>
 8080e4e:	4a22      	ldr	r2, [pc, #136]	; (8080ed8 <_Z11setTimeZone6String+0x118>)
 8080e50:	e9cd 0100 	strd	r0, r1, [sp]
 8080e54:	210a      	movs	r1, #10
 8080e56:	4821      	ldr	r0, [pc, #132]	; (8080edc <_Z11setTimeZone6String+0x11c>)
 8080e58:	f001 fb40 	bl	80824dc <snprintf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080e5c:	f001 fa9e 	bl	808239c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080e60:	b348      	cbz	r0, 8080eb6 <_Z11setTimeZone6String+0xf6>
 8080e62:	4e1f      	ldr	r6, [pc, #124]	; (8080ee0 <_Z11setTimeZone6String+0x120>)
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080e64:	462b      	mov	r3, r5
 8080e66:	4a1f      	ldr	r2, [pc, #124]	; (8080ee4 <_Z11setTimeZone6String+0x124>)
 8080e68:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080e6c:	2500      	movs	r5, #0
 8080e6e:	a80c      	add	r0, sp, #48	; 0x30
 8080e70:	f001 fb34 	bl	80824dc <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080e74:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Time",data, PRIVATE);
 8080e76:	aa0c      	add	r2, sp, #48	; 0x30
 8080e78:	491b      	ldr	r1, [pc, #108]	; (8080ee8 <_Z11setTimeZone6String+0x128>)
 8080e7a:	a808      	add	r0, sp, #32
 8080e7c:	f88d 5000 	strb.w	r5, [sp]
 8080e80:	f7ff f9e2 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080e84:	a809      	add	r0, sp, #36	; 0x24
 8080e86:	f7ff fe07 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 8080e8a:	f002 fd10 	bl	80838ae <_ZN9TimeClass3nowEv>
 8080e8e:	4601      	mov	r1, r0
 8080e90:	a808      	add	r0, sp, #32
 8080e92:	f002 fcc9 	bl	8083828 <_ZN9TimeClass7timeStrEl>
 8080e96:	9b08      	ldr	r3, [sp, #32]
 8080e98:	4913      	ldr	r1, [pc, #76]	; (8080ee8 <_Z11setTimeZone6String+0x128>)
 8080e9a:	9303      	str	r3, [sp, #12]
 8080e9c:	9a03      	ldr	r2, [sp, #12]
 8080e9e:	7833      	ldrb	r3, [r6, #0]
 8080ea0:	a806      	add	r0, sp, #24
 8080ea2:	f88d 5000 	strb.w	r5, [sp]
 8080ea6:	f7ff f9cf 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080eaa:	a807      	add	r0, sp, #28
 8080eac:	f7ff fdf4 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080eb0:	a808      	add	r0, sp, #32
 8080eb2:	f002 fa51 	bl	8083358 <_ZN6StringD1Ev>
  }

  return 1;
 8080eb6:	4620      	mov	r0, r4
 8080eb8:	e000      	b.n	8080ebc <_Z11setTimeZone6String+0xfc>
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080eba:	2000      	movs	r0, #0
    Particle.publish("Time",data, PRIVATE);
    Particle.publish("Time",Time.timeStr(Time.now()), PRIVATE);
  }

  return 1;
}
 8080ebc:	b04d      	add	sp, #308	; 0x134
 8080ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080ec2:	bf00      	nop
 8080ec4:	f3af 8000 	nop.w
 8080ec8:	00000000 	.word	0x00000000
 8080ecc:	40ac2000 	.word	0x40ac2000
 8080ed0:	200002c0 	.word	0x200002c0
 8080ed4:	200001f7 	.word	0x200001f7
 8080ed8:	08086036 	.word	0x08086036
 8080edc:	200001a9 	.word	0x200001a9
 8080ee0:	200001c4 	.word	0x200001c4
 8080ee4:	08086040 	.word	0x08086040
 8080ee8:	08086162 	.word	0x08086162

08080eec <_Z11setOpenTime6String.part.37>:

int setOpenTime(String command)
 8080eec:	b500      	push	{lr}
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
 8080eee:	4b0d      	ldr	r3, [pc, #52]	; (8080f24 <_Z11setOpenTime6String.part.37+0x38>)
  }

  return 1;
}

int setOpenTime(String command)
 8080ef0:	b0c5      	sub	sp, #276	; 0x114
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
 8080ef2:	69db      	ldr	r3, [r3, #28]
 8080ef4:	4a0c      	ldr	r2, [pc, #48]	; (8080f28 <_Z11setOpenTime6String.part.37+0x3c>)
 8080ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080efa:	a804      	add	r0, sp, #16
 8080efc:	f001 faee 	bl	80824dc <snprintf>
 8080f00:	4b0a      	ldr	r3, [pc, #40]	; (8080f2c <_Z11setOpenTime6String.part.37+0x40>)
    Particle.publish("Time",data, PRIVATE);
 8080f02:	2200      	movs	r2, #0
 8080f04:	781b      	ldrb	r3, [r3, #0]
 8080f06:	490a      	ldr	r1, [pc, #40]	; (8080f30 <_Z11setOpenTime6String.part.37+0x44>)
 8080f08:	f88d 2000 	strb.w	r2, [sp]
 8080f0c:	a802      	add	r0, sp, #8
 8080f0e:	aa04      	add	r2, sp, #16
 8080f10:	f7ff f99a 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080f14:	a803      	add	r0, sp, #12
 8080f16:	f7ff fdbf 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  return 1;
}
 8080f1a:	2001      	movs	r0, #1
 8080f1c:	b045      	add	sp, #276	; 0x114
 8080f1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8080f22:	bf00      	nop
 8080f24:	200002c0 	.word	0x200002c0
 8080f28:	08086054 	.word	0x08086054
 8080f2c:	200001c4 	.word	0x200001c4
 8080f30:	08086162 	.word	0x08086162

08080f34 <_Z11setOpenTime6String>:

  return 1;
}

int setOpenTime(String command)
{
 8080f34:	b513      	push	{r0, r1, r4, lr}
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
 8080f36:	220a      	movs	r2, #10
 8080f38:	a901      	add	r1, sp, #4
 8080f3a:	6800      	ldr	r0, [r0, #0]
 8080f3c:	f004 fb84 	bl	8085648 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
 8080f40:	2817      	cmp	r0, #23
 8080f42:	d80a      	bhi.n	8080f5a <_Z11setOpenTime6String+0x26>
  sysStatus.openTime = tempTime;
 8080f44:	4b07      	ldr	r3, [pc, #28]	; (8080f64 <_Z11setOpenTime6String+0x30>)
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
 8080f46:	2401      	movs	r4, #1
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
  sysStatus.openTime = tempTime;
 8080f48:	61d8      	str	r0, [r3, #28]
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
 8080f4a:	4b07      	ldr	r3, [pc, #28]	; (8080f68 <_Z11setOpenTime6String+0x34>)
 8080f4c:	701c      	strb	r4, [r3, #0]
 8080f4e:	f001 fa25 	bl	808239c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080f52:	b120      	cbz	r0, 8080f5e <_Z11setOpenTime6String+0x2a>
 8080f54:	f7ff ffca 	bl	8080eec <_Z11setOpenTime6String.part.37>
 8080f58:	e002      	b.n	8080f60 <_Z11setOpenTime6String+0x2c>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                    // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;                            // Make sure it falls in a valid range or send a "fail" result
 8080f5a:	2000      	movs	r0, #0
 8080f5c:	e000      	b.n	8080f60 <_Z11setOpenTime6String+0x2c>
  systemStatusWriteNeeded = true;                                            // Need to store to FRAM back in the main loop
  if (Particle.connected()) {
    snprintf(data, sizeof(data), "Open time set to %i",sysStatus.openTime);
    Particle.publish("Time",data, PRIVATE);
  }
  return 1;
 8080f5e:	4620      	mov	r0, r4
}
 8080f60:	b002      	add	sp, #8
 8080f62:	bd10      	pop	{r4, pc}
 8080f64:	200002c0 	.word	0x200002c0
 8080f68:	200001f7 	.word	0x200001f7

08080f6c <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
 8080f6c:	b510      	push	{r4, lr}
 8080f6e:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080f70:	220a      	movs	r2, #10
 8080f72:	a903      	add	r1, sp, #12
 8080f74:	6800      	ldr	r0, [r0, #0]
 8080f76:	f004 fb67 	bl	8085648 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080f7a:	2818      	cmp	r0, #24

int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080f7c:	4603      	mov	r3, r0
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080f7e:	d81b      	bhi.n	8080fb8 <_Z12setCloseTime6String+0x4c>
  sysStatus.closeTime = tempTime;
 8080f80:	4a10      	ldr	r2, [pc, #64]	; (8080fc4 <_Z12setCloseTime6String+0x58>)
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080f82:	2401      	movs	r4, #1
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
 8080f84:	6210      	str	r0, [r2, #32]
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080f86:	4a10      	ldr	r2, [pc, #64]	; (8080fc8 <_Z12setCloseTime6String+0x5c>)
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
 8080f88:	f44f 7180 	mov.w	r1, #256	; 0x100
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
 8080f8c:	7014      	strb	r4, [r2, #0]
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
 8080f8e:	a806      	add	r0, sp, #24
 8080f90:	4a0e      	ldr	r2, [pc, #56]	; (8080fcc <_Z12setCloseTime6String+0x60>)
 8080f92:	f001 faa3 	bl	80824dc <snprintf>
 8080f96:	f001 fa01 	bl	808239c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
 8080f9a:	b178      	cbz	r0, 8080fbc <_Z12setCloseTime6String+0x50>
 8080f9c:	4b0c      	ldr	r3, [pc, #48]	; (8080fd0 <_Z12setCloseTime6String+0x64>)
 8080f9e:	2200      	movs	r2, #0
 8080fa0:	781b      	ldrb	r3, [r3, #0]
 8080fa2:	a804      	add	r0, sp, #16
 8080fa4:	f88d 2000 	strb.w	r2, [sp]
 8080fa8:	490a      	ldr	r1, [pc, #40]	; (8080fd4 <_Z12setCloseTime6String+0x68>)
 8080faa:	aa06      	add	r2, sp, #24
 8080fac:	f7ff f94c 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8080fb0:	a805      	add	r0, sp, #20
 8080fb2:	f7ff fd71 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080fb6:	e001      	b.n	8080fbc <_Z12setCloseTime6String+0x50>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080fb8:	2000      	movs	r0, #0
 8080fba:	e000      	b.n	8080fbe <_Z12setCloseTime6String+0x52>
  sysStatus.closeTime = tempTime;
  systemStatusWriteNeeded = true;                          // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",sysStatus.closeTime);
  if (Particle.connected()) Particle.publish("Time",data, PRIVATE);
  return 1;
 8080fbc:	4620      	mov	r0, r4
}
 8080fbe:	b046      	add	sp, #280	; 0x118
 8080fc0:	bd10      	pop	{r4, pc}
 8080fc2:	bf00      	nop
 8080fc4:	200002c0 	.word	0x200002c0
 8080fc8:	200001f7 	.word	0x200001f7
 8080fcc:	08086068 	.word	0x08086068
 8080fd0:	200001c4 	.word	0x200001c4
 8080fd4:	08086162 	.word	0x08086162

08080fd8 <_Z15setLowPowerMode6String>:

int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080fd8:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8080fda:	4927      	ldr	r1, [pc, #156]	; (8081078 <_Z15setLowPowerMode6String+0xa0>)
 8080fdc:	b085      	sub	sp, #20
 8080fde:	4604      	mov	r4, r0
 8080fe0:	f002 fa52 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080fe4:	b928      	cbnz	r0, 8080ff2 <_Z15setLowPowerMode6String+0x1a>
 8080fe6:	4925      	ldr	r1, [pc, #148]	; (808107c <_Z15setLowPowerMode6String+0xa4>)
 8080fe8:	4620      	mov	r0, r4
 8080fea:	f002 fa4d 	bl	8083488 <_ZNK6String6equalsEPKc>
 8080fee:	2800      	cmp	r0, #0
 8080ff0:	d03f      	beq.n	8081072 <_Z15setLowPowerMode6String+0x9a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080ff2:	4921      	ldr	r1, [pc, #132]	; (8081078 <_Z15setLowPowerMode6String+0xa0>)
 8080ff4:	4620      	mov	r0, r4
 8080ff6:	f002 fa47 	bl	8083488 <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080ffa:	b1a0      	cbz	r0, 8081026 <_Z15setLowPowerMode6String+0x4e>
 8080ffc:	f001 f9ce 	bl	808239c <spark_cloud_flag_connected>
  {
    if (Particle.connected()) {
 8081000:	b160      	cbz	r0, 808101c <_Z15setLowPowerMode6String+0x44>
 8081002:	4b1f      	ldr	r3, [pc, #124]	; (8081080 <_Z15setLowPowerMode6String+0xa8>)
      Particle.publish("Mode","Low Power Mode", PRIVATE);
 8081004:	2200      	movs	r2, #0
 8081006:	781b      	ldrb	r3, [r3, #0]
 8081008:	a802      	add	r0, sp, #8
 808100a:	f88d 2000 	strb.w	r2, [sp]
 808100e:	491d      	ldr	r1, [pc, #116]	; (8081084 <_Z15setLowPowerMode6String+0xac>)
 8081010:	4a1d      	ldr	r2, [pc, #116]	; (8081088 <_Z15setLowPowerMode6String+0xb0>)
 8081012:	f7ff f919 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8081016:	a803      	add	r0, sp, #12
 8081018:	f7ff fd3e 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    sysStatus.lowPowerMode = true;
 808101c:	4b1b      	ldr	r3, [pc, #108]	; (808108c <_Z15setLowPowerMode6String+0xb4>)
 808101e:	2201      	movs	r2, #1
 8081020:	719a      	strb	r2, [r3, #6]
    strcpy(lowPowerModeStr,"True");
 8081022:	491b      	ldr	r1, [pc, #108]	; (8081090 <_Z15setLowPowerMode6String+0xb8>)
 8081024:	e01f      	b.n	8081066 <_Z15setLowPowerMode6String+0x8e>
 8081026:	4915      	ldr	r1, [pc, #84]	; (808107c <_Z15setLowPowerMode6String+0xa4>)
 8081028:	4620      	mov	r0, r4
 808102a:	f002 fa2d 	bl	8083488 <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 808102e:	b1e8      	cbz	r0, 808106c <_Z15setLowPowerMode6String+0x94>
 8081030:	f001 f9b4 	bl	808239c <spark_cloud_flag_connected>
 8081034:	4c15      	ldr	r4, [pc, #84]	; (808108c <_Z15setLowPowerMode6String+0xb4>)
  {
    if (!Particle.connected()) {                                      // In case we are not connected, we will do so now.
 8081036:	b918      	cbnz	r0, 8081040 <_Z15setLowPowerMode6String+0x68>
      connectToParticle();
 8081038:	f7ff fb6a 	bl	8080710 <_Z17connectToParticlev>
      sysStatus.connectedStatus = true;
 808103c:	2301      	movs	r3, #1
 808103e:	70e3      	strb	r3, [r4, #3]
 8081040:	4b0f      	ldr	r3, [pc, #60]	; (8081080 <_Z15setLowPowerMode6String+0xa8>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081042:	2500      	movs	r5, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081044:	781b      	ldrb	r3, [r3, #0]
    }
    Particle.publish("Mode","Normal Operations", PRIVATE);
 8081046:	490f      	ldr	r1, [pc, #60]	; (8081084 <_Z15setLowPowerMode6String+0xac>)
 8081048:	4a12      	ldr	r2, [pc, #72]	; (8081094 <_Z15setLowPowerMode6String+0xbc>)
 808104a:	a802      	add	r0, sp, #8
 808104c:	f88d 5000 	strb.w	r5, [sp]
 8081050:	f7ff f8fa 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8081054:	a803      	add	r0, sp, #12
 8081056:	f7ff fd1f 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delay(1000);                                                      // Need to make sure the message gets out.
 808105a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808105e:	f001 fa55 	bl	808250c <delay>
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
 8081062:	490d      	ldr	r1, [pc, #52]	; (8081098 <_Z15setLowPowerMode6String+0xc0>)
      connectToParticle();
      sysStatus.connectedStatus = true;
    }
    Particle.publish("Mode","Normal Operations", PRIVATE);
    delay(1000);                                                      // Need to make sure the message gets out.
    sysStatus.lowPowerMode = false;                                   // update the variable used for console status
 8081064:	71a5      	strb	r5, [r4, #6]
    strcpy(lowPowerModeStr,"False");                                  // Use capitalization so we know that we set this.
 8081066:	480d      	ldr	r0, [pc, #52]	; (808109c <_Z15setLowPowerMode6String+0xc4>)
 8081068:	f004 fa27 	bl	80854ba <strcpy>
  }
  systemStatusWriteNeeded = true;
 808106c:	4b0c      	ldr	r3, [pc, #48]	; (80810a0 <_Z15setLowPowerMode6String+0xc8>)
 808106e:	2001      	movs	r0, #1
 8081070:	7018      	strb	r0, [r3, #0]
  return 1;
}
 8081072:	b005      	add	sp, #20
 8081074:	bd30      	pop	{r4, r5, pc}
 8081076:	bf00      	nop
 8081078:	0808627e 	.word	0x0808627e
 808107c:	08085f38 	.word	0x08085f38
 8081080:	200001c4 	.word	0x200001c4
 8081084:	08085fa3 	.word	0x08085fa3
 8081088:	0808607f 	.word	0x0808607f
 808108c:	200002c0 	.word	0x200002c0
 8081090:	0808608e 	.word	0x0808608e
 8081094:	08086093 	.word	0x08086093
 8081098:	080860a5 	.word	0x080860a5
 808109c:	20000289 	.word	0x20000289
 80810a0:	200001f7 	.word	0x200001f7

080810a4 <_Z18loadSystemDefaultsv>:
    pmic.disableCharging();
    return FALSE;
  }
}

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
 80810a4:	b510      	push	{r4, lr}
 80810a6:	b086      	sub	sp, #24
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
 80810a8:	f7ff fb32 	bl	8080710 <_Z17connectToParticlev>
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
 80810ac:	f7ff fc50 	bl	8080950 <_Z16takeMeasurementsv>
 80810b0:	f001 f974 	bl	808239c <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
 80810b4:	b160      	cbz	r0, 80810d0 <_Z18loadSystemDefaultsv+0x2c>
 80810b6:	4b1d      	ldr	r3, [pc, #116]	; (808112c <_Z18loadSystemDefaultsv+0x88>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80810b8:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80810ba:	781b      	ldrb	r3, [r3, #0]
 80810bc:	a802      	add	r0, sp, #8
 80810be:	f88d 2000 	strb.w	r2, [sp]
 80810c2:	491b      	ldr	r1, [pc, #108]	; (8081130 <_Z18loadSystemDefaultsv+0x8c>)
 80810c4:	4a1b      	ldr	r2, [pc, #108]	; (8081134 <_Z18loadSystemDefaultsv+0x90>)
 80810c6:	f7ff f8bf 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 80810ca:	a803      	add	r0, sp, #12
 80810cc:	f7ff fce4 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  sysStatus.structuresVersion = 2;
 80810d0:	4c19      	ldr	r4, [pc, #100]	; (8081138 <_Z18loadSystemDefaultsv+0x94>)
 80810d2:	2302      	movs	r3, #2
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 80810d4:	68a2      	ldr	r2, [r4, #8]

void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
 80810d6:	7023      	strb	r3, [r4, #0]
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 80810d8:	2a1d      	cmp	r2, #29
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
  connectToParticle();                                              // Get connected to Particle - sets sysStatus.connectedStatus to true
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
  sysStatus.metricUnits = false;
 80810da:	f04f 0300 	mov.w	r3, #0
 80810de:	70a3      	strb	r3, [r4, #2]
  sysStatus.verboseMode = false;
 80810e0:	7123      	strb	r3, [r4, #4]
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 80810e2:	4916      	ldr	r1, [pc, #88]	; (808113c <_Z18loadSystemDefaultsv+0x98>)
  takeMeasurements();                                               // Need information to set value here - sets sysStatus.stateOfCharge
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
 80810e4:	bfd8      	it	le
 80810e6:	2301      	movle	r3, #1
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
 80810e8:	a802      	add	r0, sp, #8
  if (Particle.connected()) Particle.publish("Mode","Loading System Defaults", PRIVATE);
  sysStatus.structuresVersion = 2;
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
 80810ea:	71e3      	strb	r3, [r4, #7]
  setLowPowerMode("0");
 80810ec:	f002 f97b 	bl	80833e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80810f0:	a802      	add	r0, sp, #8
 80810f2:	f7ff ff71 	bl	8080fd8 <_Z15setLowPowerMode6String>
 80810f6:	a802      	add	r0, sp, #8
 80810f8:	f002 f92e 	bl	8083358 <_ZN6StringD1Ev>
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 80810fc:	4b10      	ldr	r3, [pc, #64]	; (8081140 <_Z18loadSystemDefaultsv+0x9c>)
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 6;
  sysStatus.closeTime = 21;
  sysStatus.sensorType = 0;
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
 80810fe:	4911      	ldr	r1, [pc, #68]	; (8081144 <_Z18loadSystemDefaultsv+0xa0>)
  sysStatus.metricUnits = false;
  sysStatus.verboseMode = false;
  if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;
  else sysStatus.lowBatteryMode = false;
  setLowPowerMode("0");
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 8081100:	6163      	str	r3, [r4, #20]
  sysStatus.dstOffset = 1;
 8081102:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081106:	61a3      	str	r3, [r4, #24]
  sysStatus.openTime = 6;
 8081108:	2306      	movs	r3, #6
 808110a:	61e3      	str	r3, [r4, #28]
  sysStatus.closeTime = 21;
 808110c:	2315      	movs	r3, #21
 808110e:	6223      	str	r3, [r4, #32]
  sysStatus.sensorType = 0;
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8081110:	480d      	ldr	r0, [pc, #52]	; (8081148 <_Z18loadSystemDefaultsv+0xa4>)
  setLowPowerMode("0");
  sysStatus.timezone = -5;                                          // Default is East Coast Time
  sysStatus.dstOffset = 1;
  sysStatus.openTime = 6;
  sysStatus.closeTime = 21;
  sysStatus.sensorType = 0;
 8081112:	2300      	movs	r3, #0
 8081114:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  strcpy(sensorTypeConfigStr,"Pressure Sensor");
 8081118:	f004 f9cf 	bl	80854ba <strcpy>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 808111c:	232c      	movs	r3, #44	; 0x2c
 808111e:	4a06      	ldr	r2, [pc, #24]	; (8081138 <_Z18loadSystemDefaultsv+0x94>)
 8081120:	2101      	movs	r1, #1
 8081122:	480a      	ldr	r0, [pc, #40]	; (808114c <_Z18loadSystemDefaultsv+0xa8>)
 8081124:	f000 fe08 	bl	8081d38 <_ZN6MB85RC9writeDataEjPKhj>
  fram.put(FRAM::systemStatusAddr,sysStatus);                       // Write it now since this is a big deal and I don't want values over written
}
 8081128:	b006      	add	sp, #24
 808112a:	bd10      	pop	{r4, pc}
 808112c:	200001c4 	.word	0x200001c4
 8081130:	08085fa3 	.word	0x08085fa3
 8081134:	080860ab 	.word	0x080860ab
 8081138:	200002c0 	.word	0x200002c0
 808113c:	08085f38 	.word	0x08085f38
 8081140:	c0a00000 	.word	0xc0a00000
 8081144:	08085ec0 	.word	0x08085ec0
 8081148:	200002b0 	.word	0x200002b0
 808114c:	200001b4 	.word	0x200001b4

08081150 <_Z22publishStateTransitionv>:
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
 8081150:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8081152:	4d15      	ldr	r5, [pc, #84]	; (80811a8 <_Z22publishStateTransitionv+0x58>)
 8081154:	4915      	ldr	r1, [pc, #84]	; (80811ac <_Z22publishStateTransitionv+0x5c>)
 8081156:	782a      	ldrb	r2, [r5, #0]
 8081158:	230e      	movs	r3, #14
 808115a:	fb03 1202 	mla	r2, r3, r2, r1
 808115e:	4c14      	ldr	r4, [pc, #80]	; (80811b0 <_Z22publishStateTransitionv+0x60>)
  systemStatusWriteNeeded = true;
  return 1;
}

void publishStateTransition(void)
{
 8081160:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8081162:	7820      	ldrb	r0, [r4, #0]
 8081164:	9200      	str	r2, [sp, #0]
 8081166:	fb03 1300 	mla	r3, r3, r0, r1
 808116a:	4a12      	ldr	r2, [pc, #72]	; (80811b4 <_Z22publishStateTransitionv+0x64>)
 808116c:	2128      	movs	r1, #40	; 0x28
 808116e:	a804      	add	r0, sp, #16
 8081170:	f001 f9b4 	bl	80824dc <snprintf>
  oldState = state;
 8081174:	782b      	ldrb	r3, [r5, #0]
 8081176:	7023      	strb	r3, [r4, #0]
 8081178:	f001 f910 	bl	808239c <spark_cloud_flag_connected>
  if(Particle.connected()) Particle.publish("State Transition",stateTransitionString, PRIVATE);
 808117c:	b160      	cbz	r0, 8081198 <_Z22publishStateTransitionv+0x48>
 808117e:	4b0e      	ldr	r3, [pc, #56]	; (80811b8 <_Z22publishStateTransitionv+0x68>)
 8081180:	2200      	movs	r2, #0
 8081182:	781b      	ldrb	r3, [r3, #0]
 8081184:	a802      	add	r0, sp, #8
 8081186:	f88d 2000 	strb.w	r2, [sp]
 808118a:	490c      	ldr	r1, [pc, #48]	; (80811bc <_Z22publishStateTransitionv+0x6c>)
 808118c:	aa04      	add	r2, sp, #16
 808118e:	f7ff f85b 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8081192:	a803      	add	r0, sp, #12
 8081194:	f7ff fc80 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.println(stateTransitionString);
 8081198:	f002 fcba 	bl	8083b10 <_Z16_fetch_usbserialv>
 808119c:	a904      	add	r1, sp, #16
 808119e:	f002 f88c 	bl	80832ba <_ZN5Print7printlnEPKc>
}
 80811a2:	b00f      	add	sp, #60	; 0x3c
 80811a4:	bd30      	pop	{r4, r5, pc}
 80811a6:	bf00      	nop
 80811a8:	200001f8 	.word	0x200001f8
 80811ac:	20000000 	.word	0x20000000
 80811b0:	200001e4 	.word	0x200001e4
 80811b4:	080860c3 	.word	0x080860c3
 80811b8:	200001c4 	.word	0x200001c4
 80811bc:	080860d1 	.word	0x080860d1

080811c0 <loop>:

  digitalWrite(blueLED,LOW);
}

void loop()
{
 80811c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  switch(state) {
 80811c4:	4c96      	ldr	r4, [pc, #600]	; (8081420 <loop+0x260>)

  digitalWrite(blueLED,LOW);
}

void loop()
{
 80811c6:	b086      	sub	sp, #24
  switch(state) {
 80811c8:	7823      	ldrb	r3, [r4, #0]
 80811ca:	4f96      	ldr	r7, [pc, #600]	; (8081424 <loop+0x264>)
 80811cc:	3b01      	subs	r3, #1
 80811ce:	2b04      	cmp	r3, #4
 80811d0:	f200 80ca 	bhi.w	8081368 <loop+0x1a8>
 80811d4:	e8df f003 	tbb	[pc, r3]
 80811d8:	64360382 	.word	0x64360382
 80811dc:	74          	.byte	0x74
 80811dd:	00          	.byte	0x00
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
 80811de:	4b92      	ldr	r3, [pc, #584]	; (8081428 <loop+0x268>)
 80811e0:	781b      	ldrb	r3, [r3, #0]
 80811e2:	b10b      	cbz	r3, 80811e8 <loop+0x28>
 80811e4:	f7ff fa1e 	bl	8080624 <_Z11petWatchdogv>
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
 80811e8:	4b90      	ldr	r3, [pc, #576]	; (808142c <loop+0x26c>)
 80811ea:	781b      	ldrb	r3, [r3, #0]
 80811ec:	b10b      	cbz	r3, 80811f2 <loop+0x32>
 80811ee:	f7ff f8c9 	bl	8080384 <_Z11recordCountv>
    if (!digitalRead(userSwitch)) initializeDataLog();
 80811f2:	2005      	movs	r0, #5
 80811f4:	f002 fe6e 	bl	8083ed4 <digitalRead>
 80811f8:	b908      	cbnz	r0, 80811fe <loop+0x3e>
 80811fa:	f7ff f981 	bl	8080500 <_Z17initializeDataLogv>
    if (sysStatus.disconnectedLogger && millis() - stayAwakeTimeStamp > 1000) state = NAPPING_STATE;          // We will always nap between counts
 80811fe:	4b8c      	ldr	r3, [pc, #560]	; (8081430 <loop+0x270>)
 8081200:	785a      	ldrb	r2, [r3, #1]
 8081202:	461d      	mov	r5, r3
 8081204:	b142      	cbz	r2, 8081218 <loop+0x58>
 8081206:	f000 febf 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
 808120a:	4b8a      	ldr	r3, [pc, #552]	; (8081434 <loop+0x274>)
 808120c:	681b      	ldr	r3, [r3, #0]
 808120e:	1ac0      	subs	r0, r0, r3
 8081210:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8081214:	f200 80cc 	bhi.w	80813b0 <loop+0x1f0>
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
 8081218:	f002 fb50 	bl	80838bc <_ZN9TimeClass4hourEv>
 808121c:	6a2b      	ldr	r3, [r5, #32]
 808121e:	4298      	cmp	r0, r3
 8081220:	f280 80c9 	bge.w	80813b6 <loop+0x1f6>
 8081224:	f002 fb4a 	bl	80838bc <_ZN9TimeClass4hourEv>
 8081228:	4b81      	ldr	r3, [pc, #516]	; (8081430 <loop+0x270>)
 808122a:	69db      	ldr	r3, [r3, #28]
 808122c:	4298      	cmp	r0, r3
 808122e:	f2c0 80c2 	blt.w	80813b6 <loop+0x1f6>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;  // We want to report on the hour but not after bedtime
 8081232:	f002 fb43 	bl	80838bc <_ZN9TimeClass4hourEv>
 8081236:	4b80      	ldr	r3, [pc, #512]	; (8081438 <loop+0x278>)
 8081238:	681b      	ldr	r3, [r3, #0]
 808123a:	4298      	cmp	r0, r3
 808123c:	f000 8094 	beq.w	8081368 <loop+0x1a8>
 8081240:	2305      	movs	r3, #5
 8081242:	e049      	b.n	80812d8 <loop+0x118>
    break;

  case SLEEPING_STATE: {                                              // This state is triggered once the park closes and runs until it opens
    detachInterrupt(intPin);                                          // Done sensing for the day
 8081244:	2019      	movs	r0, #25
 8081246:	f001 fe89 	bl	8082f5c <_Z15detachInterruptt>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808124a:	4b7c      	ldr	r3, [pc, #496]	; (808143c <loop+0x27c>)
 808124c:	681b      	ldr	r3, [r3, #0]
 808124e:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8081252:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 8081256:	8313      	strh	r3, [r2, #24]
    pinSetFast(disableModule);                                        // Turn off the pressure module for the hour
    if (current.hourlyCount) {                                        // If this number is not zero then we need to send this last count
 8081258:	4b79      	ldr	r3, [pc, #484]	; (8081440 <loop+0x280>)
 808125a:	681b      	ldr	r3, [r3, #0]
 808125c:	2b00      	cmp	r3, #0
 808125e:	d1ef      	bne.n	8081240 <loop+0x80>
      state = REPORTING_STATE;
      break;
    }
    if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
 8081260:	4b73      	ldr	r3, [pc, #460]	; (8081430 <loop+0x270>)
 8081262:	78db      	ldrb	r3, [r3, #3]
 8081264:	b10b      	cbz	r3, 808126a <loop+0xaa>
 8081266:	f7ff faa9 	bl	80807bc <_Z22disconnectFromParticlev>
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 808126a:	2100      	movs	r1, #0
 808126c:	2007      	movs	r0, #7
 808126e:	f002 fe18 	bl	8083ea2 <digitalWrite>
    petWatchdog();
 8081272:	f7ff f9d7 	bl	8080624 <_Z11petWatchdogv>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
 8081276:	f002 fb1a 	bl	80838ae <_ZN9TimeClass3nowEv>
    System.sleep(SLEEP_MODE_DEEP,wakeInSeconds);                      // Very deep sleep until the next hour
 808127a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808127e:	fb90 f2f3 	sdiv	r2, r0, r3
 8081282:	fb02 0013 	mls	r0, r2, r3, r0
 8081286:	1a1a      	subs	r2, r3, r0
 8081288:	4b6e      	ldr	r3, [pc, #440]	; (8081444 <loop+0x284>)
 808128a:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 808128e:	681b      	ldr	r3, [r3, #0]
 8081290:	bfa8      	it	ge
 8081292:	f44f 6261 	movge.w	r2, #3600	; 0xe10
 8081296:	2101      	movs	r1, #1
 8081298:	a803      	add	r0, sp, #12
 808129a:	f002 f9cd 	bl	8083638 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 808129e:	e063      	b.n	8081368 <loop+0x1a8>

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sensorDetect || countSignalTimer.isActive()) break;                                          // Don't nap until we are done with event
 80812a0:	4b62      	ldr	r3, [pc, #392]	; (808142c <loop+0x26c>)
 80812a2:	781b      	ldrb	r3, [r3, #0]
 80812a4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80812a8:	2b00      	cmp	r3, #0
 80812aa:	d15d      	bne.n	8081368 <loop+0x1a8>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
    bool reset(unsigned block=default_wait) { return _reset(block, false); }
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
    inline bool changePeriod(std::chrono::milliseconds ms, unsigned block=default_wait) { return changePeriod(ms.count(), block); }

    bool isValid() const { return handle!=nullptr; }
 80812ac:	4b66      	ldr	r3, [pc, #408]	; (8081448 <loop+0x288>)
 80812ae:	6898      	ldr	r0, [r3, #8]
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }
 80812b0:	2800      	cmp	r0, #0
 80812b2:	f000 8083 	beq.w	80813bc <loop+0x1fc>
 80812b6:	f000 fe2f 	bl	8081f18 <os_timer_is_active>
 80812ba:	2800      	cmp	r0, #0
 80812bc:	d07e      	beq.n	80813bc <loop+0x1fc>
 80812be:	e053      	b.n	8081368 <loop+0x1a8>
    else if (result.wakeupPin() == intPin) stayAwakeTimeStamp = millis(); // Keeps us from napping too fase interferes with charging
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
    } break;

  case REPORTING_STATE:
      takeMeasurements();                                             // Update Temp, Battery and Signal Strength values
 80812c0:	f7ff fb46 	bl	8080950 <_Z16takeMeasurementsv>
      recordHourlyData();                                             // Record the current data to the data array / FRAM
 80812c4:	f7ff f8b0 	bl	8080428 <_Z16recordHourlyDatav>
      if (Time.hour() == 0) dailyResetEvent();  // To write to the datalog daily - Non-sleeping case
 80812c8:	f002 faf8 	bl	80838bc <_ZN9TimeClass4hourEv>
 80812cc:	b908      	cbnz	r0, 80812d2 <loop+0x112>
 80812ce:	f7ff fcb9 	bl	8080c44 <_Z15dailyResetEventv>
      writeToDataLog();                                               // To write to the datalog daily - covers state where deivce sleeps
 80812d2:	f7ff f8d7 	bl	8080484 <_Z14writeToDataLogv>
      state = IDLE_STATE;                                             // Wait for Response
 80812d6:	2302      	movs	r3, #2
 80812d8:	7023      	strb	r3, [r4, #0]
    break;
 80812da:	e045      	b.n	8081368 <loop+0x1a8>

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
 80812dc:	4c54      	ldr	r4, [pc, #336]	; (8081430 <loop+0x270>)
 80812de:	7923      	ldrb	r3, [r4, #4]
 80812e0:	b12b      	cbz	r3, 80812ee <loop+0x12e>
 80812e2:	4b5a      	ldr	r3, [pc, #360]	; (808144c <loop+0x28c>)
 80812e4:	781b      	ldrb	r3, [r3, #0]
 80812e6:	2b01      	cmp	r3, #1
 80812e8:	d001      	beq.n	80812ee <loop+0x12e>
 80812ea:	f7ff ff31 	bl	8081150 <_Z22publishStateTransitionv>
 80812ee:	f000 fe4b 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 80812f2:	4b57      	ldr	r3, [pc, #348]	; (8081450 <loop+0x290>)
 80812f4:	681b      	ldr	r3, [r3, #0]
 80812f6:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80812fa:	3330      	adds	r3, #48	; 0x30
 80812fc:	4298      	cmp	r0, r3
 80812fe:	d933      	bls.n	8081368 <loop+0x1a8>
      if (sysStatus.resetCount <= 3) {                                          // First try simple reset
 8081300:	6923      	ldr	r3, [r4, #16]
 8081302:	2b03      	cmp	r3, #3
 8081304:	dc16      	bgt.n	8081334 <loop+0x174>
 8081306:	f001 f849 	bl	808239c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 808130a:	b160      	cbz	r0, 8081326 <loop+0x166>
 808130c:	4b51      	ldr	r3, [pc, #324]	; (8081454 <loop+0x294>)
 808130e:	2200      	movs	r2, #0
 8081310:	781b      	ldrb	r3, [r3, #0]
 8081312:	a803      	add	r0, sp, #12
 8081314:	f88d 2000 	strb.w	r2, [sp]
 8081318:	494f      	ldr	r1, [pc, #316]	; (8081458 <loop+0x298>)
 808131a:	4a50      	ldr	r2, [pc, #320]	; (808145c <loop+0x29c>)
 808131c:	f7fe ff94 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 8081320:	a804      	add	r0, sp, #16
 8081322:	f7ff fbb9 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081326:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808132a:	f001 f8ef 	bl	808250c <delay>
        System.reset();
 808132e:	f002 f918 	bl	8083562 <_ZN11SystemClass5resetEv>
 8081332:	e019      	b.n	8081368 <loop+0x1a8>
 8081334:	f001 f832 	bl	808239c <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8081338:	b160      	cbz	r0, 8081354 <loop+0x194>
 808133a:	4b46      	ldr	r3, [pc, #280]	; (8081454 <loop+0x294>)
 808133c:	2200      	movs	r2, #0
 808133e:	781b      	ldrb	r3, [r3, #0]
 8081340:	a803      	add	r0, sp, #12
 8081342:	f88d 2000 	strb.w	r2, [sp]
 8081346:	4944      	ldr	r1, [pc, #272]	; (8081458 <loop+0x298>)
 8081348:	4a45      	ldr	r2, [pc, #276]	; (8081460 <loop+0x2a0>)
 808134a:	f7fe ff7d 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 808134e:	a804      	add	r0, sp, #16
 8081350:	f7ff fba2 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8081354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8081358:	f001 f8d8 	bl	808250c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
 808135c:	2300      	movs	r3, #0
 808135e:	6123      	str	r3, [r4, #16]
        systemStatusWriteNeeded=true;
 8081360:	2301      	movs	r3, #1
 8081362:	703b      	strb	r3, [r7, #0]
        fullModemReset();                                             // Full Modem reset and reboots
 8081364:	f7ff fa60 	bl	8080828 <_Z14fullModemResetv>
      }
    }
    break;
  }
  if (systemStatusWriteNeeded) {
 8081368:	783b      	ldrb	r3, [r7, #0]
 808136a:	b143      	cbz	r3, 808137e <loop+0x1be>
 808136c:	232c      	movs	r3, #44	; 0x2c
 808136e:	4a30      	ldr	r2, [pc, #192]	; (8081430 <loop+0x270>)
 8081370:	2101      	movs	r1, #1
 8081372:	483c      	ldr	r0, [pc, #240]	; (8081464 <loop+0x2a4>)
 8081374:	f000 fce0 	bl	8081d38 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::systemStatusAddr,sysStatus);
    systemStatusWriteNeeded = false;
 8081378:	4b2a      	ldr	r3, [pc, #168]	; (8081424 <loop+0x264>)
 808137a:	2200      	movs	r2, #0
 808137c:	701a      	strb	r2, [r3, #0]
  }
  if (currentCountsWriteNeeded) {
 808137e:	4c3a      	ldr	r4, [pc, #232]	; (8081468 <loop+0x2a8>)
 8081380:	7823      	ldrb	r3, [r4, #0]
 8081382:	b13b      	cbz	r3, 8081394 <loop+0x1d4>
 8081384:	231c      	movs	r3, #28
 8081386:	4a2e      	ldr	r2, [pc, #184]	; (8081440 <loop+0x280>)
 8081388:	2150      	movs	r1, #80	; 0x50
 808138a:	4836      	ldr	r0, [pc, #216]	; (8081464 <loop+0x2a4>)
 808138c:	f000 fcd4 	bl	8081d38 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::currentCountsAddr,current);
    currentCountsWriteNeeded = false;
 8081390:	2300      	movs	r3, #0
 8081392:	7023      	strb	r3, [r4, #0]
  }
  if (hourliesCountsWriteNeeded) {
 8081394:	4c35      	ldr	r4, [pc, #212]	; (808146c <loop+0x2ac>)
 8081396:	7823      	ldrb	r3, [r4, #0]
 8081398:	2b00      	cmp	r3, #0
 808139a:	f000 80ab 	beq.w	80814f4 <loop+0x334>
 808139e:	2370      	movs	r3, #112	; 0x70
 80813a0:	4a33      	ldr	r2, [pc, #204]	; (8081470 <loop+0x2b0>)
 80813a2:	2180      	movs	r1, #128	; 0x80
 80813a4:	482f      	ldr	r0, [pc, #188]	; (8081464 <loop+0x2a4>)
 80813a6:	f000 fcc7 	bl	8081d38 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::hourlyCountsAddr,hourlies);
    hourliesCountsWriteNeeded = false;
 80813aa:	2300      	movs	r3, #0
 80813ac:	7023      	strb	r3, [r4, #0]
  }
}
 80813ae:	e0a1      	b.n	80814f4 <loop+0x334>
  switch(state) {
  case IDLE_STATE:                                                    // Where we spend most time - note, the order of these conditionals is important
    if (watchdogFlag) petWatchdog();                                  // Watchdog flag is raised - time to pet the watchdog
    if (sensorDetect) recordCount();                                  // The ISR had raised the sensor flag
    if (!digitalRead(userSwitch)) initializeDataLog();
    if (sysStatus.disconnectedLogger && millis() - stayAwakeTimeStamp > 1000) state = NAPPING_STATE;          // We will always nap between counts
 80813b0:	2304      	movs	r3, #4
 80813b2:	7023      	strb	r3, [r4, #0]
 80813b4:	e730      	b.n	8081218 <loop+0x58>
    if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) state = SLEEPING_STATE;   // The park is closed - sleep
 80813b6:	2303      	movs	r3, #3
 80813b8:	7023      	strb	r3, [r4, #0]
 80813ba:	e73a      	b.n	8081232 <loop+0x72>
    System.sleep(SLEEP_MODE_DEEP,wakeInSeconds);                      // Very deep sleep until the next hour
    } break;

  case NAPPING_STATE: {  // This state puts the device in low power mode quickly
    if (sensorDetect || countSignalTimer.isActive()) break;                                          // Don't nap until we are done with event
    if (sysStatus.connectedStatus) disconnectFromParticle();          // If we are in connected mode we need to Disconnect from Particle
 80813bc:	4b1c      	ldr	r3, [pc, #112]	; (8081430 <loop+0x270>)
 80813be:	78db      	ldrb	r3, [r3, #3]
 80813c0:	b10b      	cbz	r3, 80813c6 <loop+0x206>
 80813c2:	f7ff f9fb 	bl	80807bc <_Z22disconnectFromParticlev>
    int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
 80813c6:	f002 fa72 	bl	80838ae <_ZN9TimeClass3nowEv>
 80813ca:	4606      	mov	r6, r0
    petWatchdog();                                                    // Reset the watchdog timer interval
 80813cc:	f7ff f92a 	bl	8080624 <_Z11petWatchdogv>
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
 80813d0:	4b28      	ldr	r3, [pc, #160]	; (8081474 <loop+0x2b4>)
 80813d2:	7d1a      	ldrb	r2, [r3, #20]
 80813d4:	b10a      	cbz	r2, 80813da <loop+0x21a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 80813d6:	2201      	movs	r2, #1
 80813d8:	721a      	strb	r2, [r3, #8]
    config.mode(SystemSleepMode::STOP).gpio(userSwitch,CHANGE).gpio(intPin,RISING).duration(wakeInSeconds * 1000).flag(SystemSleepFlag::WAIT_CLOUD);
 80813da:	2200      	movs	r2, #0
 80813dc:	2105      	movs	r1, #5
 80813de:	4825      	ldr	r0, [pc, #148]	; (8081474 <loop+0x2b4>)
 80813e0:	f7fe ff8e 	bl	8080300 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
 80813e4:	2201      	movs	r2, #1
 80813e6:	2119      	movs	r1, #25
 80813e8:	f7fe ff8a 	bl	8080300 <_ZN24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
 80813ec:	7d03      	ldrb	r3, [r0, #20]
 80813ee:	4605      	mov	r5, r0
 80813f0:	2b00      	cmp	r3, #0
 80813f2:	d059      	beq.n	80814a8 <loop+0x2e8>
 80813f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80813f8:	fb96 f3f2 	sdiv	r3, r6, r2
 80813fc:	fb02 6313 	mls	r3, r2, r3, r6
 8081400:	1ad3      	subs	r3, r2, r3
 8081402:	4293      	cmp	r3, r2
 8081404:	bfa8      	it	ge
 8081406:	4613      	movge	r3, r2
 8081408:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
            // Check if RTC has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_RTC);
 808140c:	2104      	movs	r1, #4
 808140e:	fb08 f803 	mul.w	r8, r8, r3
 8081412:	f7fe ff6b 	bl	80802ec <_ZNK30SystemSleepConfigurationHelper20wakeupSourceFeaturedE24hal_wakeup_source_type_t>
            if (wakeup) {
 8081416:	4681      	mov	r9, r0
 8081418:	b370      	cbz	r0, 8081478 <loop+0x2b8>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 808141a:	f8c0 800c 	str.w	r8, [r0, #12]
 808141e:	e043      	b.n	80814a8 <loop+0x2e8>
 8081420:	200001f8 	.word	0x200001f8
 8081424:	200001f7 	.word	0x200001f7
 8081428:	2000020c 	.word	0x2000020c
 808142c:	200001a8 	.word	0x200001a8
 8081430:	200002c0 	.word	0x200002c0
 8081434:	2000023c 	.word	0x2000023c
 8081438:	20000208 	.word	0x20000208
 808143c:	20000238 	.word	0x20000238
 8081440:	20000290 	.word	0x20000290
 8081444:	20000228 	.word	0x20000228
 8081448:	200001c8 	.word	0x200001c8
 808144c:	200001e4 	.word	0x200001e4
 8081450:	20000284 	.word	0x20000284
 8081454:	200001c4 	.word	0x200001c4
 8081458:	080860f6 	.word	0x080860f6
 808145c:	080860e2 	.word	0x080860e2
 8081460:	080860fc 	.word	0x080860fc
 8081464:	200001b4 	.word	0x200001b4
 8081468:	20000288 	.word	0x20000288
 808146c:	200001f6 	.word	0x200001f6
 8081470:	20000138 	.word	0x20000138
 8081474:	20000210 	.word	0x20000210
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
 8081478:	4920      	ldr	r1, [pc, #128]	; (80814fc <loop+0x33c>)
 808147a:	2010      	movs	r0, #16
 808147c:	f002 fdee 	bl	808405c <_ZnwjRKSt9nothrow_t>
 8081480:	4606      	mov	r6, r0
 8081482:	2800      	cmp	r0, #0
 8081484:	d034      	beq.n	80814f0 <loop+0x330>
 8081486:	f04f 0a10 	mov.w	sl, #16
 808148a:	4652      	mov	r2, sl
 808148c:	4649      	mov	r1, r9
 808148e:	f003 ffca 	bl	8085426 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
 8081492:	2302      	movs	r3, #2
 8081494:	8073      	strh	r3, [r6, #2]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 8081496:	2304      	movs	r3, #4
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 8081498:	f8a6 a000 	strh.w	sl, [r6]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 808149c:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 808149e:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
 80814a0:	f8c6 800c 	str.w	r8, [r6, #12]
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
            wakeupSource->base.next = config_.wakeup_sources;
 80814a4:	60b3      	str	r3, [r6, #8]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 80814a6:	612e      	str	r6, [r5, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& flag(particle::EnumFlags<SystemSleepFlag> f) {
        if (valid_) {
 80814a8:	7d2b      	ldrb	r3, [r5, #20]
 80814aa:	b11b      	cbz	r3, 80814b4 <loop+0x2f4>
            config_.flags |= f.value();
 80814ac:	68eb      	ldr	r3, [r5, #12]
 80814ae:	f043 0301 	orr.w	r3, r3, #1
 80814b2:	60eb      	str	r3, [r5, #12]
    SystemSleepResult result = System.sleep(config);                  // Put the device to sleep
 80814b4:	4912      	ldr	r1, [pc, #72]	; (8081500 <loop+0x340>)
 80814b6:	a803      	add	r0, sp, #12
 80814b8:	f002 f856 	bl	8083568 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>
 80814bc:	9b03      	ldr	r3, [sp, #12]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 80814be:	b173      	cbz	r3, 80814de <loop+0x31e>
            return SystemSleepWakeupReason::UNKNOWN;
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
 80814c0:	889a      	ldrh	r2, [r3, #4]
 80814c2:	2a01      	cmp	r2, #1
 80814c4:	d10b      	bne.n	80814de <loop+0x31e>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 80814c6:	899b      	ldrh	r3, [r3, #12]
    if (result.wakeupPin() == userSwitch) initializeDataLog();        // Simply puts the headers on the new file after a memory card swap
 80814c8:	2b05      	cmp	r3, #5
 80814ca:	d102      	bne.n	80814d2 <loop+0x312>
 80814cc:	f7ff f818 	bl	8080500 <_Z17initializeDataLogv>
 80814d0:	e005      	b.n	80814de <loop+0x31e>
    else if (result.wakeupPin() == intPin) stayAwakeTimeStamp = millis(); // Keeps us from napping too fase interferes with charging
 80814d2:	2b19      	cmp	r3, #25
 80814d4:	d103      	bne.n	80814de <loop+0x31e>
 80814d6:	f000 fd57 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
 80814da:	4b0a      	ldr	r3, [pc, #40]	; (8081504 <loop+0x344>)
 80814dc:	6018      	str	r0, [r3, #0]
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80814de:	9803      	ldr	r0, [sp, #12]
    state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap - not enabling updates here as napping is typicallly disconnected
 80814e0:	2302      	movs	r3, #2
 80814e2:	7023      	strb	r3, [r4, #0]
 80814e4:	2800      	cmp	r0, #0
 80814e6:	f43f af3f 	beq.w	8081368 <loop+0x1a8>
            free(wakeupSource_);
 80814ea:	f000 ffd7 	bl	808249c <free>
    } break;
 80814ee:	e73b      	b.n	8081368 <loop+0x1a8>
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
            if (!wakeupSource) {
                valid_ = false;
 80814f0:	7528      	strb	r0, [r5, #20]
 80814f2:	e7d9      	b.n	80814a8 <loop+0x2e8>
  }
  if (hourliesCountsWriteNeeded) {
    fram.put(FRAM::hourlyCountsAddr,hourlies);
    hourliesCountsWriteNeeded = false;
  }
}
 80814f4:	b006      	add	sp, #24
 80814f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80814fa:	bf00      	nop
 80814fc:	0808659c 	.word	0x0808659c
 8081500:	20000210 	.word	0x20000210
 8081504:	2000023c 	.word	0x2000023c

08081508 <_Z12setDSTOffset6String>:
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 8081508:	b570      	push	{r4, r5, r6, lr}
 808150a:	b0cc      	sub	sp, #304	; 0x130
 808150c:	4604      	mov	r4, r0
  char * pEND;
  char data[256];
  time_t t = Time.now();
 808150e:	f002 f9ce 	bl	80838ae <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8081512:	220a      	movs	r2, #10
}

int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
 8081514:	4606      	mov	r6, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8081516:	a905      	add	r1, sp, #20
 8081518:	6820      	ldr	r0, [r4, #0]
 808151a:	f004 f895 	bl	8085648 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 808151e:	b2c3      	uxtb	r3, r0
 8081520:	2b02      	cmp	r3, #2
 8081522:	d859      	bhi.n	80815d8 <_Z12setDSTOffset6String+0xd0>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 8081524:	b240      	sxtb	r0, r0
 8081526:	f003 fbf1 	bl	8084d0c <__aeabi_i2f>
 808152a:	4604      	mov	r4, r0
 808152c:	f002 f952 	bl	80837d4 <_ZN9TimeClass12setDSTOffsetEf>
  sysStatus.dstOffset = (float)tempDSTOffset;
 8081530:	4b2f      	ldr	r3, [pc, #188]	; (80815f0 <_Z12setDSTOffset6String+0xe8>)
  systemStatusWriteNeeded = true;
 8081532:	2201      	movs	r2, #1
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
  sysStatus.dstOffset = (float)tempDSTOffset;
 8081534:	619c      	str	r4, [r3, #24]
  systemStatusWriteNeeded = true;
 8081536:	4b2f      	ldr	r3, [pc, #188]	; (80815f4 <_Z12setDSTOffset6String+0xec>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8081538:	4620      	mov	r0, r4
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
  sysStatus.dstOffset = (float)tempDSTOffset;
  systemStatusWriteNeeded = true;
 808153a:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 808153c:	f003 f84e 	bl	80845dc <__aeabi_f2d>
 8081540:	4a2d      	ldr	r2, [pc, #180]	; (80815f8 <_Z12setDSTOffset6String+0xf0>)
 8081542:	e9cd 0100 	strd	r0, r1, [sp]
 8081546:	f44f 7180 	mov.w	r1, #256	; 0x100
 808154a:	a80c      	add	r0, sp, #48	; 0x30
 808154c:	f000 ffc6 	bl	80824dc <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8081550:	f002 f98c 	bl	808386c <_ZN9TimeClass7isValidEv>
 8081554:	b138      	cbz	r0, 8081566 <_Z12setDSTOffset6String+0x5e>
 8081556:	f7ff f993 	bl	8080880 <_Z8isDSTusav>
 808155a:	b110      	cbz	r0, 8081562 <_Z12setDSTOffset6String+0x5a>
 808155c:	f002 f954 	bl	8083808 <_ZN9TimeClass8beginDSTEv>
 8081560:	e001      	b.n	8081566 <_Z12setDSTOffset6String+0x5e>
 8081562:	f002 f95b 	bl	808381c <_ZN9TimeClass6endDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8081566:	f002 f90b 	bl	8083780 <_ZN9TimeClass5localEv>
 808156a:	4604      	mov	r4, r0
 808156c:	f002 f99f 	bl	80838ae <_ZN9TimeClass3nowEv>
 8081570:	1a20      	subs	r0, r4, r0
 8081572:	f003 f821 	bl	80845b8 <__aeabi_i2d>
 8081576:	a31c      	add	r3, pc, #112	; (adr r3, 80815e8 <_Z12setDSTOffset6String+0xe0>)
 8081578:	e9d3 2300 	ldrd	r2, r3, [r3]
 808157c:	f003 f9ac 	bl	80848d8 <__aeabi_ddiv>
 8081580:	4a1e      	ldr	r2, [pc, #120]	; (80815fc <_Z12setDSTOffset6String+0xf4>)
 8081582:	e9cd 0100 	strd	r0, r1, [sp]
 8081586:	210a      	movs	r1, #10
 8081588:	481d      	ldr	r0, [pc, #116]	; (8081600 <_Z12setDSTOffset6String+0xf8>)
 808158a:	f000 ffa7 	bl	80824dc <snprintf>
 808158e:	f000 ff05 	bl	808239c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8081592:	b318      	cbz	r0, 80815dc <_Z12setDSTOffset6String+0xd4>
 8081594:	4d1b      	ldr	r5, [pc, #108]	; (8081604 <_Z12setDSTOffset6String+0xfc>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8081596:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081598:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("Time",data, PRIVATE);
 808159a:	aa0c      	add	r2, sp, #48	; 0x30
 808159c:	491a      	ldr	r1, [pc, #104]	; (8081608 <_Z12setDSTOffset6String+0x100>)
 808159e:	a808      	add	r0, sp, #32
 80815a0:	f88d 4000 	strb.w	r4, [sp]
 80815a4:	f7fe fe50 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 80815a8:	a809      	add	r0, sp, #36	; 0x24
 80815aa:	f7ff fa75 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
 80815ae:	4631      	mov	r1, r6
 80815b0:	a808      	add	r0, sp, #32
 80815b2:	f002 f939 	bl	8083828 <_ZN9TimeClass7timeStrEl>
 80815b6:	9b08      	ldr	r3, [sp, #32]
 80815b8:	4913      	ldr	r1, [pc, #76]	; (8081608 <_Z12setDSTOffset6String+0x100>)
 80815ba:	9303      	str	r3, [sp, #12]
 80815bc:	9a03      	ldr	r2, [sp, #12]
 80815be:	782b      	ldrb	r3, [r5, #0]
 80815c0:	a806      	add	r0, sp, #24
 80815c2:	f88d 4000 	strb.w	r4, [sp]
 80815c6:	f7fe fe3f 	bl	8080248 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.32>
 80815ca:	a807      	add	r0, sp, #28
 80815cc:	f7ff fa64 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80815d0:	a808      	add	r0, sp, #32
 80815d2:	f001 fec1 	bl	8083358 <_ZN6StringD1Ev>
 80815d6:	e001      	b.n	80815dc <_Z12setDSTOffset6String+0xd4>
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
  char * pEND;
  char data[256];
  time_t t = Time.now();
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80815d8:	2000      	movs	r0, #0
 80815da:	e000      	b.n	80815de <_Z12setDSTOffset6String+0xd6>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
  if (Particle.connected()) {
    Particle.publish("Time",data, PRIVATE);
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
  }
  return 1;
 80815dc:	2001      	movs	r0, #1
}
 80815de:	b04c      	add	sp, #304	; 0x130
 80815e0:	bd70      	pop	{r4, r5, r6, pc}
 80815e2:	bf00      	nop
 80815e4:	f3af 8000 	nop.w
 80815e8:	00000000 	.word	0x00000000
 80815ec:	40ac2000 	.word	0x40ac2000
 80815f0:	200002c0 	.word	0x200002c0
 80815f4:	200001f7 	.word	0x200001f7
 80815f8:	0808611b 	.word	0x0808611b
 80815fc:	08086036 	.word	0x08086036
 8081600:	200001a9 	.word	0x200001a9
 8081604:	200001c4 	.word	0x200001c4
 8081608:	08086162 	.word	0x08086162

0808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 808160c:	2300      	movs	r3, #0
 808160e:	2202      	movs	r2, #2
 8081610:	f000 be9c 	b.w	808234c <spark_variable>

08081614 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>:
 8081614:	2300      	movs	r3, #0
 8081616:	2204      	movs	r2, #4
 8081618:	f000 be98 	b.w	808234c <spark_variable>

0808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 808161c:	4602      	mov	r2, r0
 808161e:	4801      	ldr	r0, [pc, #4]	; (8081624 <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081620:	f001 b936 	b.w	8082890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081624:	08082865 	.word	0x08082865

08081628 <setup>:


Timer countSignalTimer(1000, countSignalTimerISR, true);

void setup()                                        // Note: Disconnected Setup()
{
 8081628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808162c:	b088      	sub	sp, #32

  Serial1.begin(115200);
 808162e:	f002 f9dd 	bl	80839ec <_Z22__fetch_global_Serial1v>
 8081632:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8081636:	f002 f9d3 	bl	80839e0 <_ZN11USARTSerial5beginEm>
       2) Each hour while the device is sleeping
       3) After a reset event
    All three of these have some common code - this will go first then we will set a conditional
    to determine which of the three we are in and finish the code
  */
  pinMode(wakeUpPin,INPUT);                         // This pin is active HIGH
 808163a:	2100      	movs	r1, #0
 808163c:	2011      	movs	r0, #17
 808163e:	f002 fc1f 	bl	8083e80 <pinMode>
  pinMode(userSwitch,INPUT);                        // Momentary contact button on board for direct user input
 8081642:	2100      	movs	r1, #0
 8081644:	2005      	movs	r0, #5
 8081646:	f002 fc1b 	bl	8083e80 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808164a:	4c9d      	ldr	r4, [pc, #628]	; (80818c0 <setup+0x298>)
  pinMode(blueLED, OUTPUT);                         // declare the Blue LED Pin as an output
 808164c:	2101      	movs	r1, #1
 808164e:	2007      	movs	r0, #7
 8081650:	f002 fc16 	bl	8083e80 <pinMode>
  pinMode(donePin,OUTPUT);                          // Allows us to pet the watchdog
 8081654:	2101      	movs	r1, #1
 8081656:	2006      	movs	r0, #6
 8081658:	f002 fc12 	bl	8083e80 <pinMode>
 808165c:	6823      	ldr	r3, [r4, #0]
  pinResetFast(hardResetPin);
  pinMode(hardResetPin,OUTPUT);                     // For a hard reset active HIGH
 808165e:	2101      	movs	r1, #1
 8081660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8081662:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8081666:	2004      	movs	r0, #4
 8081668:	8353      	strh	r3, [r2, #26]
 808166a:	f002 fc09 	bl	8083e80 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                     // Turn on the temp sensor
 808166e:	2101      	movs	r1, #1
 8081670:	201d      	movs	r0, #29
 8081672:	f002 fc05 	bl	8083e80 <pinMode>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8081676:	6823      	ldr	r3, [r4, #0]
  pinSetFast(tmp36Shutdwn);                         // The sensor draws only 50uA so will just leave it on.
  pinMode(dataLogResetPin,OUTPUT);
 8081678:	2101      	movs	r1, #1
 808167a:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 808167e:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8081682:	200c      	movs	r0, #12
 8081684:	8313      	strh	r3, [r2, #24]
 8081686:	f002 fbfb 	bl	8083e80 <pinMode>
  digitalWrite(dataLogResetPin,HIGH);
 808168a:	2101      	movs	r1, #1
 808168c:	200c      	movs	r0, #12
 808168e:	f002 fc08 	bl	8083ea2 <digitalWrite>

  // Pressure / PIR Module Pin Setup
  pinMode(intPin,INPUT_PULLDOWN);                   // pressure sensor interrupt
 8081692:	2103      	movs	r1, #3
 8081694:	2019      	movs	r0, #25
 8081696:	f002 fbf3 	bl	8083e80 <pinMode>
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
 808169a:	2101      	movs	r1, #1
 808169c:	201b      	movs	r0, #27
 808169e:	f002 fbef 	bl	8083e80 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80816a2:	6823      	ldr	r3, [r4, #0]
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
 80816a4:	2101      	movs	r1, #1
 80816a6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80816aa:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80816ae:	201c      	movs	r0, #28
 80816b0:	8353      	strh	r3, [r2, #26]
 80816b2:	f002 fbe5 	bl	8083e80 <pinMode>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80816b6:	6823      	ldr	r3, [r4, #0]
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
 80816b8:	2101      	movs	r1, #1
 80816ba:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 80816be:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
 80816c2:	2007      	movs	r0, #7
 80816c4:	8313      	strh	r3, [r2, #24]

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
 80816c6:	2500      	movs	r5, #0
  pinMode(disableModule,OUTPUT);                    // Turns on the module when pulled low
  pinResetFast(disableModule);                      // Turn on the module - send high to switch off board
  pinMode(ledPower,OUTPUT);                         // Turn on the lights
  pinSetFast(ledPower);                             // Turns on the LED on the pressure sensor board

  digitalWrite(blueLED,HIGH);
 80816c8:	f002 fbeb 	bl	8083ea2 <digitalWrite>

  petWatchdog();                                    // Pet the watchdog - This will reset the watchdog time period
 80816cc:	f7fe ffaa 	bl	8080624 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);  // The watchdog timer will signal us and we have to respond
 80816d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80816d4:	2201      	movs	r2, #1
 80816d6:	497b      	ldr	r1, [pc, #492]	; (80818c4 <setup+0x29c>)
 80816d8:	9500      	str	r5, [sp, #0]
 80816da:	2011      	movs	r0, #17
 80816dc:	f001 fc16 	bl	8082f0c <_Z15attachInterrupttPFvvE13InterruptModeah>

  Particle.variable("HourlyCount", current.hourlyCount);                // Define my Particle variables
 80816e0:	4979      	ldr	r1, [pc, #484]	; (80818c8 <setup+0x2a0>)
 80816e2:	487a      	ldr	r0, [pc, #488]	; (80818cc <setup+0x2a4>)
 80816e4:	f7ff ff92 	bl	808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("DailyCount", current.dailyCount);                  // Note: Don't have to be connected for any of this!!!
 80816e8:	4979      	ldr	r1, [pc, #484]	; (80818d0 <setup+0x2a8>)
 80816ea:	487a      	ldr	r0, [pc, #488]	; (80818d4 <setup+0x2ac>)
 80816ec:	f7ff ff8e 	bl	808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Signal", SignalString);
 80816f0:	4979      	ldr	r1, [pc, #484]	; (80818d8 <setup+0x2b0>)
 80816f2:	487a      	ldr	r0, [pc, #488]	; (80818dc <setup+0x2b4>)
 80816f4:	f7ff ff8e 	bl	8081614 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("Release",currentPointRelease);
 80816f8:	4979      	ldr	r1, [pc, #484]	; (80818e0 <setup+0x2b8>)
 80816fa:	487a      	ldr	r0, [pc, #488]	; (80818e4 <setup+0x2bc>)
 80816fc:	f7ff ff8a 	bl	8081614 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("stateOfChg", sysStatus.stateOfCharge);
 8081700:	4979      	ldr	r1, [pc, #484]	; (80818e8 <setup+0x2c0>)
 8081702:	487a      	ldr	r0, [pc, #488]	; (80818ec <setup+0x2c4>)
 8081704:	f7ff ff82 	bl	808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("OpenTime",sysStatus.openTime);
 8081708:	4979      	ldr	r1, [pc, #484]	; (80818f0 <setup+0x2c8>)
 808170a:	487a      	ldr	r0, [pc, #488]	; (80818f4 <setup+0x2cc>)
 808170c:	f7ff ff7e 	bl	808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("CloseTime",sysStatus.closeTime);
 8081710:	4979      	ldr	r1, [pc, #484]	; (80818f8 <setup+0x2d0>)
 8081712:	487a      	ldr	r0, [pc, #488]	; (80818fc <setup+0x2d4>)
 8081714:	f7ff ff7a 	bl	808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("Alerts",current.alertCount);
 8081718:	4979      	ldr	r1, [pc, #484]	; (8081900 <setup+0x2d8>)
 808171a:	487a      	ldr	r0, [pc, #488]	; (8081904 <setup+0x2dc>)
 808171c:	f7ff ff76 	bl	808160c <_ZN10CloudClass8variableIA7_cIRiEEEbRKT_DpOT0_>
  Particle.variable("TimeOffset",currentOffsetStr);
 8081720:	4979      	ldr	r1, [pc, #484]	; (8081908 <setup+0x2e0>)
 8081722:	487a      	ldr	r0, [pc, #488]	; (808190c <setup+0x2e4>)
 8081724:	f7ff ff76 	bl	8081614 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("BatteryContext",batteryContextStr);
 8081728:	4979      	ldr	r1, [pc, #484]	; (8081910 <setup+0x2e8>)
 808172a:	487a      	ldr	r0, [pc, #488]	; (8081914 <setup+0x2ec>)
 808172c:	f7ff ff72 	bl	8081614 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>
  Particle.variable("SensorStatus",sensorTypeConfigStr);
 8081730:	4979      	ldr	r1, [pc, #484]	; (8081918 <setup+0x2f0>)
 8081732:	487a      	ldr	r0, [pc, #488]	; (808191c <setup+0x2f4>)
 8081734:	f7ff ff6e 	bl	8081614 <_ZN10CloudClass8variableIA13_cIRA16_cEEEbRKT_DpOT0_>

  Particle.function("resetFRAM", resetFRAM);                          // These are the functions exposed to the mobile app and console
 8081738:	4979      	ldr	r1, [pc, #484]	; (8081920 <setup+0x2f8>)
 808173a:	487a      	ldr	r0, [pc, #488]	; (8081924 <setup+0x2fc>)
 808173c:	f7ff ff6e 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("resetCounts",resetCounts);
 8081740:	4979      	ldr	r1, [pc, #484]	; (8081928 <setup+0x300>)
 8081742:	487a      	ldr	r0, [pc, #488]	; (808192c <setup+0x304>)
 8081744:	f7ff ff6a 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("HardReset",hardResetNow);
 8081748:	4979      	ldr	r1, [pc, #484]	; (8081930 <setup+0x308>)
 808174a:	487a      	ldr	r0, [pc, #488]	; (8081934 <setup+0x30c>)
 808174c:	f7ff ff66 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 8081750:	4979      	ldr	r1, [pc, #484]	; (8081938 <setup+0x310>)
 8081752:	487a      	ldr	r0, [pc, #488]	; (808193c <setup+0x314>)
 8081754:	f7ff ff62 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-DSTOffset",setDSTOffset);
 8081758:	4979      	ldr	r1, [pc, #484]	; (8081940 <setup+0x318>)
 808175a:	487a      	ldr	r0, [pc, #488]	; (8081944 <setup+0x31c>)
 808175c:	f7ff ff5e 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-OpenTime",setOpenTime);
 8081760:	4979      	ldr	r1, [pc, #484]	; (8081948 <setup+0x320>)
 8081762:	487a      	ldr	r0, [pc, #488]	; (808194c <setup+0x324>)
 8081764:	f7ff ff5a 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Close",setCloseTime);
 8081768:	4979      	ldr	r1, [pc, #484]	; (8081950 <setup+0x328>)
 808176a:	487a      	ldr	r0, [pc, #488]	; (8081954 <setup+0x32c>)
 808176c:	f7ff ff56 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-SensorType",setSensorType);
 8081770:	4979      	ldr	r1, [pc, #484]	; (8081958 <setup+0x330>)
 8081772:	487a      	ldr	r0, [pc, #488]	; (808195c <setup+0x334>)
 8081774:	f7ff ff52 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Disconnected", setDisconnectedMode);
 8081778:	4979      	ldr	r1, [pc, #484]	; (8081960 <setup+0x338>)
 808177a:	487a      	ldr	r0, [pc, #488]	; (8081964 <setup+0x33c>)
 808177c:	f7ff ff4e 	bl	808161c <_ZN10CloudClass8functionIA17_cIPFi6StringEEEEbRKT_DpT0_>

  // Load FRAM and reset variables to their correct values
  fram.begin();                                                       // Initialize the FRAM module
 8081780:	4879      	ldr	r0, [pc, #484]	; (8081968 <setup+0x340>)
 8081782:	f000 fa41 	bl	8081c08 <_ZN6MB85RC5beginEv>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8081786:	4629      	mov	r1, r5
 8081788:	2301      	movs	r3, #1
 808178a:	f10d 020f 	add.w	r2, sp, #15
 808178e:	4876      	ldr	r0, [pc, #472]	; (8081968 <setup+0x340>)
 8081790:	f000 fa7c 	bl	8081c8c <_ZN6MB85RC8readDataEjPhj>

  byte tempVersion;
  fram.get(FRAM::versionAddr, tempVersion);
  if (tempVersion != FRAMversionNumber) {                             // Check to see if the memory map in the sketch matches the data on the chip
 8081794:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8081798:	4627      	mov	r7, r4
 808179a:	2901      	cmp	r1, #1
 808179c:	4c73      	ldr	r4, [pc, #460]	; (808196c <setup+0x344>)
 808179e:	d00b      	beq.n	80817b8 <setup+0x190>
    fram.erase();                                                     // Reset the FRAM to correct the issue
 80817a0:	4871      	ldr	r0, [pc, #452]	; (8081968 <setup+0x340>)
 80817a2:	f000 fa3b 	bl	8081c1c <_ZN6MB85RC5eraseEv>
	 *
	 * @param framAddr The address in the FRAM to write to
	 * @param t The variable to write from. t is not modified.
	 */
    template <typename T> const T &put(size_t framAddr, const T &t) {
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 80817a6:	2304      	movs	r3, #4
 80817a8:	4a71      	ldr	r2, [pc, #452]	; (8081970 <setup+0x348>)
 80817aa:	4629      	mov	r1, r5
 80817ac:	486e      	ldr	r0, [pc, #440]	; (8081968 <setup+0x340>)
 80817ae:	f000 fac3 	bl	8081d38 <_ZN6MB85RC9writeDataEjPKhj>
    fram.put(FRAM::versionAddr, FRAMversionNumber);                   // Put the right value in
    loadSystemDefaults();                                             // Out of the box, we need the device to be awake and connected
 80817b2:	f7ff fc77 	bl	80810a4 <_Z18loadSystemDefaultsv>
 80817b6:	e004      	b.n	80817c2 <setup+0x19a>
	 *
	 * @param framAddr The address in the FRAM to read from
	 * @param t The variable to read to
	 */
    template <typename T> T &get(size_t framAddr, T &t) {
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 80817b8:	232c      	movs	r3, #44	; 0x2c
 80817ba:	4622      	mov	r2, r4
 80817bc:	486a      	ldr	r0, [pc, #424]	; (8081968 <setup+0x340>)
 80817be:	f000 fa65 	bl	8081c8c <_ZN6MB85RC8readDataEjPhj>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80817c2:	2600      	movs	r6, #0
 80817c4:	ad08      	add	r5, sp, #32
  }
  else fram.get(FRAM::systemStatusAddr,sysStatus);                    // Loads the System Status array from FRAM

  checkSystemValues();                                                // Make sure System values are all in valid range
 80817c6:	f7ff f8ff 	bl	80809c8 <_Z17checkSystemValuesv>
 80817ca:	f845 6d10 	str.w	r6, [r5, #-16]!

  // *************************
  sysStatus.sensorType = 1;                                           // This forces the PIR sensor - over-writes the carrier board
 80817ce:	2301      	movs	r3, #1
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80817d0:	4632      	mov	r2, r6
 80817d2:	4631      	mov	r1, r6
 80817d4:	4628      	mov	r0, r5
 80817d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80817da:	f000 fbbd 	bl	8081f58 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80817de:	9b04      	ldr	r3, [sp, #16]
  // *************************

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 80817e0:	2b14      	cmp	r3, #20
 80817e2:	f000 8116 	beq.w	8081a12 <setup+0x3ea>
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80817e6:	4632      	mov	r2, r6
 80817e8:	4631      	mov	r1, r6
 80817ea:	4628      	mov	r0, r5
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80817ec:	9604      	str	r6, [sp, #16]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80817ee:	f000 fbb3 	bl	8081f58 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80817f2:	9b04      	ldr	r3, [sp, #16]
 80817f4:	2b8c      	cmp	r3, #140	; 0x8c
 80817f6:	f000 810c 	beq.w	8081a12 <setup+0x3ea>
    sysStatus.resetCount++;
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
  }

  (sysStatus.lowPowerMode) ? strcpy(lowPowerModeStr,"True") : strcpy(lowPowerModeStr,"False");
 80817fa:	79a3      	ldrb	r3, [r4, #6]
 80817fc:	b10b      	cbz	r3, 8081802 <setup+0x1da>
 80817fe:	495d      	ldr	r1, [pc, #372]	; (8081974 <setup+0x34c>)
 8081800:	e000      	b.n	8081804 <setup+0x1dc>
 8081802:	495d      	ldr	r1, [pc, #372]	; (8081978 <setup+0x350>)
 8081804:	485d      	ldr	r0, [pc, #372]	; (808197c <setup+0x354>)
 8081806:	f003 fe58 	bl	80854ba <strcpy>

  if (sysStatus.sensorType == 0) strcpy(sensorTypeConfigStr,"Pressure Sensor");
 808180a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 808180e:	b90b      	cbnz	r3, 8081814 <setup+0x1ec>
 8081810:	495b      	ldr	r1, [pc, #364]	; (8081980 <setup+0x358>)
 8081812:	e003      	b.n	808181c <setup+0x1f4>
  else if (sysStatus.sensorType == 1) strcpy(sensorTypeConfigStr,"PIR Sensor");
 8081814:	2b01      	cmp	r3, #1
 8081816:	bf0c      	ite	eq
 8081818:	495a      	ldreq	r1, [pc, #360]	; (8081984 <setup+0x35c>)
  else strcpy(sensorTypeConfigStr,"Legacy Sensor");
 808181a:	495b      	ldrne	r1, [pc, #364]	; (8081988 <setup+0x360>)
 808181c:	483e      	ldr	r0, [pc, #248]	; (8081918 <setup+0x2f0>)
 808181e:	f003 fe4c 	bl	80854ba <strcpy>

  Time.setDSTOffset(sysStatus.dstOffset);                              // Set the value from FRAM if in limits
 8081822:	69a0      	ldr	r0, [r4, #24]
 8081824:	f001 ffd6 	bl	80837d4 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                        // Perform the DST calculation here
 8081828:	f7ff f82a 	bl	8080880 <_Z8isDSTusav>
 808182c:	b110      	cbz	r0, 8081834 <setup+0x20c>
 808182e:	f001 ffeb 	bl	8083808 <_ZN9TimeClass8beginDSTEv>
 8081832:	e001      	b.n	8081838 <setup+0x210>
 8081834:	f001 fff2 	bl	808381c <_ZN9TimeClass6endDSTEv>
  Time.zone(sysStatus.timezone);                                       // Set the Time Zone for our device
 8081838:	6960      	ldr	r0, [r4, #20]
 808183a:	f001 ffaf 	bl	808379c <_ZN9TimeClass4zoneEf>

  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 808183e:	f001 ff9f 	bl	8083780 <_ZN9TimeClass5localEv>
 8081842:	4606      	mov	r6, r0
 8081844:	f002 f833 	bl	80838ae <_ZN9TimeClass3nowEv>
 8081848:	1a30      	subs	r0, r6, r0
 808184a:	f002 feb5 	bl	80845b8 <__aeabi_i2d>
 808184e:	a31a      	add	r3, pc, #104	; (adr r3, 80818b8 <setup+0x290>)
 8081850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081854:	f003 f840 	bl	80848d8 <__aeabi_ddiv>
 8081858:	4e1b      	ldr	r6, [pc, #108]	; (80818c8 <setup+0x2a0>)
 808185a:	e9cd 0100 	strd	r0, r1, [sp]
 808185e:	4a4b      	ldr	r2, [pc, #300]	; (808198c <setup+0x364>)
 8081860:	210a      	movs	r1, #10
 8081862:	4829      	ldr	r0, [pc, #164]	; (8081908 <setup+0x2e0>)
 8081864:	f000 fe3a 	bl	80824dc <snprintf>
 8081868:	231c      	movs	r3, #28
 808186a:	4632      	mov	r2, r6
 808186c:	2150      	movs	r1, #80	; 0x50
 808186e:	483e      	ldr	r0, [pc, #248]	; (8081968 <setup+0x340>)
 8081870:	f000 fa0c 	bl	8081c8c <_ZN6MB85RC8readDataEjPhj>

  // Done with the System Stuff - now load the current counts
  fram.get(FRAM::currentCountsAddr, current);
  if (current.hourlyCount) currentHourlyPeriod = Time.hour(current.lastCountTime);
 8081874:	6833      	ldr	r3, [r6, #0]
 8081876:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8081998 <setup+0x370>
 808187a:	b11b      	cbz	r3, 8081884 <setup+0x25c>
 808187c:	68f0      	ldr	r0, [r6, #12]
 808187e:	f001 ff5b 	bl	8083738 <_ZN9TimeClass4hourEl>
 8081882:	e001      	b.n	8081888 <setup+0x260>
  else currentHourlyPeriod = Time.hour();                              // The local time hourly period for reporting purposes
 8081884:	f002 f81a 	bl	80838bc <_ZN9TimeClass4hourEv>
 8081888:	f8c8 0000 	str.w	r0, [r8]
 808188c:	2370      	movs	r3, #112	; 0x70
 808188e:	4a40      	ldr	r2, [pc, #256]	; (8081990 <setup+0x368>)
 8081890:	2180      	movs	r1, #128	; 0x80
 8081892:	4835      	ldr	r0, [pc, #212]	; (8081968 <setup+0x340>)
 8081894:	f000 f9fa 	bl	8081c8c <_ZN6MB85RC8readDataEjPhj>

  // Done with the current counts - now load the start time stamp from hourlies
  fram.get(FRAM::hourlyCountsAddr, hourlies);

  setPowerConfig();                                                    // Executes commands that set up the Power configuration between Solar and DC-Powered
 8081898:	f7fe feec 	bl	8080674 <_Z14setPowerConfigv>

  if (!digitalRead(userSwitch)) {
 808189c:	2005      	movs	r0, #5
 808189e:	f002 fb19 	bl	8083ed4 <digitalRead>
 80818a2:	2800      	cmp	r0, #0
 80818a4:	f040 8084 	bne.w	80819b0 <setup+0x388>
    if (sysStatus.disconnectedLogger) setDisconnectedMode("0");        // If we want to make the device connect for updates / configuration - or switch it back to disconnected
 80818a8:	7863      	ldrb	r3, [r4, #1]
 80818aa:	2b00      	cmp	r3, #0
 80818ac:	d076      	beq.n	808199c <setup+0x374>
 80818ae:	4939      	ldr	r1, [pc, #228]	; (8081994 <setup+0x36c>)
 80818b0:	e075      	b.n	808199e <setup+0x376>
 80818b2:	bf00      	nop
 80818b4:	f3af 8000 	nop.w
 80818b8:	00000000 	.word	0x00000000
 80818bc:	40ac2000 	.word	0x40ac2000
 80818c0:	20000238 	.word	0x20000238
 80818c4:	080800b9 	.word	0x080800b9
 80818c8:	20000290 	.word	0x20000290
 80818cc:	0808612c 	.word	0x0808612c
 80818d0:	20000298 	.word	0x20000298
 80818d4:	08086138 	.word	0x08086138
 80818d8:	20000240 	.word	0x20000240
 80818dc:	08086143 	.word	0x08086143
 80818e0:	20000070 	.word	0x20000070
 80818e4:	0808614a 	.word	0x0808614a
 80818e8:	200002c8 	.word	0x200002c8
 80818ec:	08086152 	.word	0x08086152
 80818f0:	200002dc 	.word	0x200002dc
 80818f4:	080861d4 	.word	0x080861d4
 80818f8:	200002e0 	.word	0x200002e0
 80818fc:	0808615d 	.word	0x0808615d
 8081900:	200002a4 	.word	0x200002a4
 8081904:	08086167 	.word	0x08086167
 8081908:	200001a9 	.word	0x200001a9
 808190c:	0808616e 	.word	0x0808616e
 8081910:	200001e6 	.word	0x200001e6
 8081914:	08086179 	.word	0x08086179
 8081918:	200002b0 	.word	0x200002b0
 808191c:	08086188 	.word	0x08086188
 8081920:	08080101 	.word	0x08080101
 8081924:	08086195 	.word	0x08086195
 8081928:	08080ac5 	.word	0x08080ac5
 808192c:	0808619f 	.word	0x0808619f
 8081930:	08080b61 	.word	0x08080b61
 8081934:	080861ab 	.word	0x080861ab
 8081938:	08080dc1 	.word	0x08080dc1
 808193c:	080861b5 	.word	0x080861b5
 8081940:	08081509 	.word	0x08081509
 8081944:	080861c2 	.word	0x080861c2
 8081948:	08080f35 	.word	0x08080f35
 808194c:	080861d0 	.word	0x080861d0
 8081950:	08080f6d 	.word	0x08080f6d
 8081954:	080861dd 	.word	0x080861dd
 8081958:	08080cc5 	.word	0x08080cc5
 808195c:	080861e7 	.word	0x080861e7
 8081960:	08080bb5 	.word	0x08080bb5
 8081964:	080861f6 	.word	0x080861f6
 8081968:	200001b4 	.word	0x200001b4
 808196c:	200002c0 	.word	0x200002c0
 8081970:	08085e14 	.word	0x08085e14
 8081974:	0808608e 	.word	0x0808608e
 8081978:	080860a5 	.word	0x080860a5
 808197c:	20000289 	.word	0x20000289
 8081980:	08085ec0 	.word	0x08085ec0
 8081984:	08085fc4 	.word	0x08085fc4
 8081988:	08085fe8 	.word	0x08085fe8
 808198c:	08086036 	.word	0x08086036
 8081990:	20000138 	.word	0x20000138
 8081994:	08085f38 	.word	0x08085f38
 8081998:	20000208 	.word	0x20000208
    else setDisconnectedMode("1");
 808199c:	4922      	ldr	r1, [pc, #136]	; (8081a28 <setup+0x400>)
 808199e:	4628      	mov	r0, r5
 80819a0:	f001 fd21 	bl	80833e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80819a4:	4628      	mov	r0, r5
 80819a6:	f7ff f905 	bl	8080bb4 <_Z19setDisconnectedMode6String>
 80819aa:	4628      	mov	r0, r5
 80819ac:	f001 fcd4 	bl	8083358 <_ZN6StringD1Ev>
  }

  // Here is where the code diverges based on why we are running Setup()
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
 80819b0:	f001 ff84 	bl	80838bc <_ZN9TimeClass4hourEv>
 80819b4:	6a23      	ldr	r3, [r4, #32]
 80819b6:	4d1d      	ldr	r5, [pc, #116]	; (8081a2c <setup+0x404>)
 80819b8:	4298      	cmp	r0, r3
 80819ba:	da18      	bge.n	80819ee <setup+0x3c6>
 80819bc:	f001 ff7e 	bl	80838bc <_ZN9TimeClass4hourEv>
 80819c0:	69eb      	ldr	r3, [r5, #28]
 80819c2:	4298      	cmp	r0, r3
 80819c4:	db13      	blt.n	80819ee <setup+0x3c6>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80819c6:	4a1a      	ldr	r2, [pc, #104]	; (8081a30 <setup+0x408>)
 80819c8:	2300      	movs	r3, #0
 80819ca:	6013      	str	r3, [r2, #0]
 80819cc:	4a19      	ldr	r2, [pc, #100]	; (8081a34 <setup+0x40c>)
  else {                                                                         // Park is open let's get ready for the day                                                   
    hourlyAtomic.store(0,std::memory_order_relaxed);
    dailyAtomic.store(0,std::memory_order_relaxed);
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
 80819ce:	491a      	ldr	r1, [pc, #104]	; (8081a38 <setup+0x410>)
 80819d0:	6013      	str	r3, [r2, #0]
 80819d2:	2019      	movs	r0, #25
 80819d4:	9300      	str	r3, [sp, #0]
 80819d6:	2201      	movs	r2, #1
 80819d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80819dc:	f001 fa96 	bl	8082f0c <_Z15attachInterrupttPFvvE13InterruptModeah>
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
 80819e0:	78eb      	ldrb	r3, [r5, #3]
 80819e2:	b113      	cbz	r3, 80819ea <setup+0x3c2>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80819e4:	f000 fcda 	bl	808239c <spark_cloud_flag_connected>
 80819e8:	b1d0      	cbz	r0, 8081a20 <setup+0x3f8>
    takeMeasurements();                                               // Populates values so you can read them before the hour
 80819ea:	f7fe ffb1 	bl	8080950 <_Z16takeMeasurementsv>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80819ee:	683b      	ldr	r3, [r7, #0]
 80819f0:	f8d3 2310 	ldr.w	r2, [r3, #784]	; 0x310
 80819f4:	f8b3 3314 	ldrh.w	r3, [r3, #788]	; 0x314
 80819f8:	8353      	strh	r3, [r2, #26]
  }

  pinResetFast(ledPower);                                             // Turns off the LED on the sensor board

  if (state == INITIALIZATION_STATE) state = IDLE_STATE;              // IDLE unless otherwise from above code
 80819fa:	4b10      	ldr	r3, [pc, #64]	; (8081a3c <setup+0x414>)
 80819fc:	781a      	ldrb	r2, [r3, #0]
 80819fe:	b90a      	cbnz	r2, 8081a04 <setup+0x3dc>
 8081a00:	2202      	movs	r2, #2
 8081a02:	701a      	strb	r2, [r3, #0]

  digitalWrite(blueLED,LOW);
 8081a04:	2100      	movs	r1, #0
 8081a06:	2007      	movs	r0, #7
 8081a08:	f002 fa4b 	bl	8083ea2 <digitalWrite>
}
 8081a0c:	b008      	add	sp, #32
 8081a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // *************************
  sysStatus.sensorType = 1;                                           // This forces the PIR sensor - over-writes the carrier board
  // *************************

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
 8081a12:	6923      	ldr	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
 8081a14:	2201      	movs	r2, #1
  // *************************
  sysStatus.sensorType = 1;                                           // This forces the PIR sensor - over-writes the carrier board
  // *************************

  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
    sysStatus.resetCount++;
 8081a16:	3301      	adds	r3, #1
 8081a18:	6123      	str	r3, [r4, #16]
    systemStatusWriteNeeded = true;                                    // If so, store incremented number - watchdog must have done This
 8081a1a:	4b09      	ldr	r3, [pc, #36]	; (8081a40 <setup+0x418>)
 8081a1c:	701a      	strb	r2, [r3, #0]
 8081a1e:	e6ec      	b.n	80817fa <setup+0x1d2>
  if ((Time.hour() >= sysStatus.closeTime || Time.hour() < sysStatus.openTime)) {} // The park is closed - don't connect
  else {                                                                         // Park is open let's get ready for the day                                                   
    hourlyAtomic.store(0,std::memory_order_relaxed);
    dailyAtomic.store(0,std::memory_order_relaxed);
    attachInterrupt(intPin, sensorISR, RISING);                       // Pressure Sensor interrupt from low to high
    if (sysStatus.connectedStatus && !Particle.connected()) connectToParticle(); // Only going to connect if we are in connectionMode
 8081a20:	f7fe fe76 	bl	8080710 <_Z17connectToParticlev>
 8081a24:	e7e1      	b.n	80819ea <setup+0x3c2>
 8081a26:	bf00      	nop
 8081a28:	0808627e 	.word	0x0808627e
 8081a2c:	200002c0 	.word	0x200002c0
 8081a30:	20000200 	.word	0x20000200
 8081a34:	200001fc 	.word	0x200001fc
 8081a38:	080801a9 	.word	0x080801a9
 8081a3c:	200001f8 	.word	0x200001f8
 8081a40:	200001f7 	.word	0x200001f7

08081a44 <_GLOBAL__sub_I___appProductID>:
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 8081a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8081a48:	4b45      	ldr	r3, [pc, #276]	; (8081b60 <_GLOBAL__sub_I___appProductID+0x11c>)
 8081a4a:	2400      	movs	r4, #0
 8081a4c:	601c      	str	r4, [r3, #0]
 8081a4e:	4b45      	ldr	r3, [pc, #276]	; (8081b64 <_GLOBAL__sub_I___appProductID+0x120>)
 8081a50:	2701      	movs	r7, #1
 8081a52:	701f      	strb	r7, [r3, #0]
 8081a54:	4b44      	ldr	r3, [pc, #272]	; (8081b68 <_GLOBAL__sub_I___appProductID+0x124>)
 8081a56:	b088      	sub	sp, #32
 8081a58:	2208      	movs	r2, #8
 8081a5a:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8081a5c:	f000 fab4 	bl	8081fc8 <HAL_Pin_Map>
 8081a60:	4b42      	ldr	r3, [pc, #264]	; (8081b6c <_GLOBAL__sub_I___appProductID+0x128>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081a62:	4d43      	ldr	r5, [pc, #268]	; (8081b70 <_GLOBAL__sub_I___appProductID+0x12c>)
 8081a64:	6018      	str	r0, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 8081a66:	f002 f9ad 	bl	8083dc4 <spark_protocol_instance>
 8081a6a:	4623      	mov	r3, r4
 8081a6c:	4622      	mov	r2, r4
 8081a6e:	f642 6166 	movw	r1, #11878	; 0x2e66
 8081a72:	f002 f9af 	bl	8083dd4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 8081a76:	f002 f9a5 	bl	8083dc4 <spark_protocol_instance>
 8081a7a:	4622      	mov	r2, r4
 8081a7c:	4623      	mov	r3, r4
 8081a7e:	2102      	movs	r1, #2
 8081a80:	f002 f9b0 	bl	8083de4 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
#include "electrondoc.h"                            // Pinout Documentation File
#include "MB85RC256V-FRAM-RK.h"                     // Rickkas Particle based FRAM Library
#include <atomic>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);                        // This will enable user code to start executing automatically.
 8081a88:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8081ba8 <_GLOBAL__sub_I___appProductID+0x164>
 8081a8c:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8081a8e:	602c      	str	r4, [r5, #0]
 8081a90:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8081a92:	71ac      	strb	r4, [r5, #6]
 8081a94:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081a96:	2002      	movs	r0, #2
 8081a98:	f000 fbf8 	bl	808228c <set_system_mode>
 8081a9c:	4642      	mov	r2, r8
 8081a9e:	4935      	ldr	r1, [pc, #212]	; (8081b74 <_GLOBAL__sub_I___appProductID+0x130>)
 8081aa0:	4628      	mov	r0, r5
 8081aa2:	f002 facb 	bl	808403c <__aeabi_atexit>
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081aa6:	4d34      	ldr	r5, [pc, #208]	; (8081b78 <_GLOBAL__sub_I___appProductID+0x134>)
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
 8081aa8:	4621      	mov	r1, r4
 8081aaa:	4638      	mov	r0, r7
 8081aac:	f000 fc06 	bl	80822bc <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081ab0:	4639      	mov	r1, r7
 8081ab2:	2004      	movs	r0, #4
 8081ab4:	f000 fa40 	bl	8081f38 <HAL_Feature_Set>
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081ab8:	2610      	movs	r6, #16
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081aba:	1d28      	adds	r0, r5, #4
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081abc:	4632      	mov	r2, r6
 8081abe:	4621      	mov	r1, r4
};

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 8081ac0:	6028      	str	r0, [r5, #0]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081ac2:	f003 fcb0 	bl	8085426 <memset>
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
 8081ac6:	2302      	movs	r3, #2
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
SystemSleepConfiguration config;                    // Initialize new Sleep 2.0 Api
 8081ac8:	4642      	mov	r2, r8
 8081aca:	492c      	ldr	r1, [pc, #176]	; (8081b7c <_GLOBAL__sub_I___appProductID+0x138>)
 8081acc:	4628      	mov	r0, r5
 8081ace:	80eb      	strh	r3, [r5, #6]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 8081ad0:	752f      	strb	r7, [r5, #20]
        config_.size = sizeof(hal_sleep_config_t);
 8081ad2:	80ae      	strh	r6, [r5, #4]
 8081ad4:	f002 fab2 	bl	808403c <__aeabi_atexit>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 8081ad8:	f002 fa4c 	bl	8083f74 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 8081adc:	4d28      	ldr	r5, [pc, #160]	; (8081b80 <_GLOBAL__sub_I___appProductID+0x13c>)
 8081ade:	4623      	mov	r3, r4
 8081ae0:	4601      	mov	r1, r0
 8081ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8081ae6:	4628      	mov	r0, r5
 8081ae8:	f000 f884 	bl	8081bf4 <_ZN6MB85RCC1ER7TwoWireji>
 8081aec:	4b25      	ldr	r3, [pc, #148]	; (8081b84 <_GLOBAL__sub_I___appProductID+0x140>)
 8081aee:	4642      	mov	r2, r8
 8081af0:	4925      	ldr	r1, [pc, #148]	; (8081b88 <_GLOBAL__sub_I___appProductID+0x144>)
 8081af2:	4628      	mov	r0, r5
 8081af4:	602b      	str	r3, [r5, #0]
 8081af6:	f002 faa1 	bl	808403c <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 8081afa:	4b24      	ldr	r3, [pc, #144]	; (8081b8c <_GLOBAL__sub_I___appProductID+0x148>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081afc:	aa02      	add	r2, sp, #8
 8081afe:	9304      	str	r3, [sp, #16]
 8081b00:	446e      	add	r6, sp
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 8081b02:	4d23      	ldr	r5, [pc, #140]	; (8081b90 <_GLOBAL__sub_I___appProductID+0x14c>)
 8081b04:	e896 0003 	ldmia.w	r6, {r0, r1}
 8081b08:	4b22      	ldr	r3, [pc, #136]	; (8081b94 <_GLOBAL__sub_I___appProductID+0x150>)
 8081b0a:	e882 0003 	stmia.w	r2, {r0, r1}
 8081b0e:	602b      	str	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081b10:	f105 030c 	add.w	r3, r5, #12
 8081b14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081b18:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8081b20:	e883 0003 	stmia.w	r3, {r0, r1}
 8081b24:	4b1c      	ldr	r3, [pc, #112]	; (8081b98 <_GLOBAL__sub_I___appProductID+0x154>)
 8081b26:	712c      	strb	r4, [r5, #4]
 8081b28:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b2a:	69ab      	ldr	r3, [r5, #24]
 8081b2c:	60ac      	str	r4, [r5, #8]
 8081b2e:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b30:	4b1a      	ldr	r3, [pc, #104]	; (8081b9c <_GLOBAL__sub_I___appProductID+0x158>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 8081b32:	4a1b      	ldr	r2, [pc, #108]	; (8081ba0 <_GLOBAL__sub_I___appProductID+0x15c>)
 8081b34:	61ab      	str	r3, [r5, #24]
 8081b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8081b3a:	462b      	mov	r3, r5
 8081b3c:	9401      	str	r4, [sp, #4]
 8081b3e:	9700      	str	r7, [sp, #0]
 8081b40:	f105 0008 	add.w	r0, r5, #8
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b44:	9406      	str	r4, [sp, #24]
 8081b46:	f000 f9b7 	bl	8081eb8 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081b4a:	4630      	mov	r0, r6
 8081b4c:	f7fe fb91 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
// This section is where we will initialize sensor specific variables, libraries and function prototypes
// Pressure Sensor Variables
volatile bool sensorDetect = false;                 // This is the flag that an interrupt is triggered


Timer countSignalTimer(1000, countSignalTimerISR, true);
 8081b50:	4642      	mov	r2, r8
 8081b52:	4914      	ldr	r1, [pc, #80]	; (8081ba4 <_GLOBAL__sub_I___appProductID+0x160>)
 8081b54:	4628      	mov	r0, r5
 8081b56:	f002 fa71 	bl	808403c <__aeabi_atexit>
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 8081b5a:	b008      	add	sp, #32
 8081b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081b60:	20000228 	.word	0x20000228
 8081b64:	200001c4 	.word	0x200001c4
 8081b68:	200001e5 	.word	0x200001e5
 8081b6c:	20000238 	.word	0x20000238
 8081b70:	2000022c 	.word	0x2000022c
 8081b74:	08080263 	.word	0x08080263
 8081b78:	20000210 	.word	0x20000210
 8081b7c:	080800e9 	.word	0x080800e9
 8081b80:	200001b4 	.word	0x200001b4
 8081b84:	08085dbc 	.word	0x08085dbc
 8081b88:	08080129 	.word	0x08080129
 8081b8c:	080800e1 	.word	0x080800e1
 8081b90:	200001c8 	.word	0x200001c8
 8081b94:	08085da8 	.word	0x08085da8
 8081b98:	080800c9 	.word	0x080800c9
 8081b9c:	080800c5 	.word	0x080800c5
 8081ba0:	08080151 	.word	0x08080151
 8081ba4:	08080285 	.word	0x08080285
 8081ba8:	20000134 	.word	0x20000134

08081bac <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081bac:	4770      	bx	lr

08081bae <_ZN6MB85RCD0Ev>:

MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
 8081bae:	b510      	push	{r4, lr}
 8081bb0:	4604      	mov	r4, r0
}
 8081bb2:	2110      	movs	r1, #16
 8081bb4:	f002 fa47 	bl	8084046 <_ZdlPvj>
 8081bb8:	4620      	mov	r0, r4
 8081bba:	bd10      	pop	{r4, pc}

08081bbc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 8081bbc:	6803      	ldr	r3, [r0, #0]
 8081bbe:	b2c9      	uxtb	r1, r1
 8081bc0:	689b      	ldr	r3, [r3, #8]
 8081bc2:	4718      	bx	r3

08081bc4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081bc4:	b40e      	push	{r1, r2, r3}
 8081bc6:	b500      	push	{lr}
 8081bc8:	b08c      	sub	sp, #48	; 0x30
 8081bca:	aa0d      	add	r2, sp, #52	; 0x34
 8081bcc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081bd0:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081bd2:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8081bd6:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081bd8:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081bda:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081bdc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081bde:	aa04      	add	r2, sp, #16
 8081be0:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081be2:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081be4:	f000 fb38 	bl	8082258 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8081be8:	b00c      	add	sp, #48	; 0x30
 8081bea:	f85d eb04 	ldr.w	lr, [sp], #4
 8081bee:	b003      	add	sp, #12
 8081bf0:	4770      	bx	lr
	...

08081bf4 <_ZN6MB85RCC1ER7TwoWireji>:

#include "Particle.h"
#include "MB85RC256V-FRAM-RK.h"


MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 8081bf4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 8081bf6:	4d03      	ldr	r5, [pc, #12]	; (8081c04 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 8081bf8:	6041      	str	r1, [r0, #4]
 8081bfa:	6005      	str	r5, [r0, #0]
 8081bfc:	6082      	str	r2, [r0, #8]
 8081bfe:	60c3      	str	r3, [r0, #12]
}
 8081c00:	bd30      	pop	{r4, r5, pc}
 8081c02:	bf00      	nop
 8081c04:	08086304 	.word	0x08086304

08081c08 <_ZN6MB85RC5beginEv>:

MB85RC::~MB85RC() {
}

void MB85RC::begin() {
	wire.begin();
 8081c08:	6840      	ldr	r0, [r0, #4]
 8081c0a:	f001 b929 	b.w	8082e60 <_ZN7TwoWire5beginEv>

08081c0e <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8081c0e:	b510      	push	{r4, lr}
 8081c10:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8081c12:	6800      	ldr	r0, [r0, #0]
 8081c14:	f001 f970 	bl	8082ef8 <_ZN7TwoWire6unlockEv>
 8081c18:	4620      	mov	r0, r4
 8081c1a:	bd10      	pop	{r4, pc}

08081c1c <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 8081c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081c20:	4607      	mov	r7, r0

	WITH_LOCK(wire) {
 8081c22:	6840      	ldr	r0, [r0, #4]

void MB85RC::begin() {
	wire.begin();
}

bool MB85RC::erase() {
 8081c24:	b08a      	sub	sp, #40	; 0x28
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081c26:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081c28:	f001 f95d 	bl	8082ee6 <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081c2c:	221e      	movs	r2, #30
 8081c2e:	2100      	movs	r1, #0
 8081c30:	a802      	add	r0, sp, #8

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
		size_t totalLen = memorySize;
 8081c32:	68be      	ldr	r6, [r7, #8]

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081c34:	f003 fbf7 	bl	8085426 <memset>
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
		size_t framAddr = 0;
 8081c38:	2500      	movs	r5, #0
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 8081c3a:	b1de      	cbz	r6, 8081c74 <_ZN6MB85RC5eraseEv+0x58>
 8081c3c:	46b0      	mov	r8, r6
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 8081c3e:	683b      	ldr	r3, [r7, #0]
 8081c40:	2e1e      	cmp	r6, #30
 8081c42:	bf28      	it	cs
 8081c44:	f04f 081e 	movcs.w	r8, #30
 8081c48:	68dc      	ldr	r4, [r3, #12]
 8081c4a:	aa02      	add	r2, sp, #8
 8081c4c:	4643      	mov	r3, r8
 8081c4e:	4629      	mov	r1, r5
 8081c50:	4638      	mov	r0, r7
 8081c52:	47a0      	blx	r4
			if (!result) {
 8081c54:	4604      	mov	r4, r0
 8081c56:	b948      	cbnz	r0, 8081c6c <_ZN6MB85RC5eraseEv+0x50>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 8081c58:	462a      	mov	r2, r5
 8081c5a:	490a      	ldr	r1, [pc, #40]	; (8081c84 <_ZN6MB85RC5eraseEv+0x68>)
 8081c5c:	480a      	ldr	r0, [pc, #40]	; (8081c88 <_ZN6MB85RC5eraseEv+0x6c>)
 8081c5e:	f7ff ffb1 	bl	8081bc4 <_ZNK5spark6Logger4infoEPKcz>
 8081c62:	a801      	add	r0, sp, #4
 8081c64:	f7ff ffd3 	bl	8081c0e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				return false;
 8081c68:	4620      	mov	r0, r4
 8081c6a:	e007      	b.n	8081c7c <_ZN6MB85RC5eraseEv+0x60>
			}

			totalLen -= count;
 8081c6c:	ebc8 0606 	rsb	r6, r8, r6
			framAddr += count;
 8081c70:	4445      	add	r5, r8
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));

		while(totalLen > 0) {
 8081c72:	e7e2      	b.n	8081c3a <_ZN6MB85RC5eraseEv+0x1e>
	wire.begin();
}

bool MB85RC::erase() {

	WITH_LOCK(wire) {
 8081c74:	a801      	add	r0, sp, #4
 8081c76:	f7ff ffca 	bl	8081c0e <_ZNSt10lock_guardIR7TwoWireED1Ev>
			totalLen -= count;
			framAddr += count;
		}
	}

	return true;
 8081c7a:	2001      	movs	r0, #1
}
 8081c7c:	b00a      	add	sp, #40	; 0x28
 8081c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081c82:	bf00      	nop
 8081c84:	08086280 	.word	0x08086280
 8081c88:	200003d8 	.word	0x200003d8

08081c8c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081c8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8081c90:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081c92:	6840      	ldr	r0, [r0, #4]

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081c94:	460e      	mov	r6, r1
 8081c96:	4617      	mov	r7, r2
 8081c98:	4698      	mov	r8, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081c9a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081c9c:	f001 f923 	bl	8082ee6 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {

		while(dataLen > 0) {
 8081ca0:	f1b8 0f00 	cmp.w	r8, #0
 8081ca4:	d101      	bne.n	8081caa <_ZN6MB85RC8readDataEjPhj+0x1e>
 8081ca6:	2401      	movs	r4, #1
 8081ca8:	e03f      	b.n	8081d2a <_ZN6MB85RC8readDataEjPhj+0x9e>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081caa:	68e1      	ldr	r1, [r4, #12]
 8081cac:	6860      	ldr	r0, [r4, #4]
 8081cae:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081cb2:	f001 f90d 	bl	8082ed0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081cb6:	0a31      	lsrs	r1, r6, #8
 8081cb8:	6860      	ldr	r0, [r4, #4]
 8081cba:	f7ff ff7f 	bl	8081bbc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081cbe:	4631      	mov	r1, r6
 8081cc0:	6860      	ldr	r0, [r4, #4]
 8081cc2:	f7ff ff7b 	bl	8081bbc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 8081cc6:	2100      	movs	r1, #0
 8081cc8:	6860      	ldr	r0, [r4, #4]
 8081cca:	f001 f904 	bl	8082ed6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081cce:	b108      	cbz	r0, 8081cd4 <_ZN6MB85RC8readDataEjPhj+0x48>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 8081cd0:	2400      	movs	r4, #0
 8081cd2:	e02a      	b.n	8081d2a <_ZN6MB85RC8readDataEjPhj+0x9e>
 8081cd4:	46c1      	mov	r9, r8
			size_t bytesToRead = dataLen;
			if (bytesToRead > 32) {
				bytesToRead = 32;
			}

			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
 8081cd6:	68e1      	ldr	r1, [r4, #12]
 8081cd8:	f1b8 0f20 	cmp.w	r8, #32
 8081cdc:	bf28      	it	cs
 8081cde:	f04f 0920 	movcs.w	r9, #32
 8081ce2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081ce6:	2301      	movs	r3, #1
 8081ce8:	464a      	mov	r2, r9
 8081cea:	b2c9      	uxtb	r1, r1
 8081cec:	6860      	ldr	r0, [r4, #4]
 8081cee:	f001 f8d9 	bl	8082ea4 <_ZN7TwoWire11requestFromEhjh>

			if (Wire.available() < (int) bytesToRead) {
 8081cf2:	f002 f93f 	bl	8083f74 <_Z19__fetch_global_Wirev>
 8081cf6:	6803      	ldr	r3, [r0, #0]
 8081cf8:	691b      	ldr	r3, [r3, #16]
 8081cfa:	4798      	blx	r3
 8081cfc:	4548      	cmp	r0, r9
 8081cfe:	dbe7      	blt.n	8081cd0 <_ZN6MB85RC8readDataEjPhj+0x44>
 8081d00:	463d      	mov	r5, r7
 8081d02:	ebc7 0a06 	rsb	sl, r7, r6
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
				*data++ = Wire.read();    // receive a byte as character
 8081d06:	f002 f935 	bl	8083f74 <_Z19__fetch_global_Wirev>
 8081d0a:	6803      	ldr	r3, [r0, #0]
 8081d0c:	695b      	ldr	r3, [r3, #20]
 8081d0e:	4798      	blx	r3
 8081d10:	f805 0b01 	strb.w	r0, [r5], #1
			if (Wire.available() < (int) bytesToRead) {
				result = false;
				break;
			}

			for(size_t ii = 0; ii < bytesToRead; ii++) {
 8081d14:	1bea      	subs	r2, r5, r7
 8081d16:	ebc5 0308 	rsb	r3, r5, r8
 8081d1a:	4591      	cmp	r9, r2
 8081d1c:	eb05 060a 	add.w	r6, r5, sl
 8081d20:	443b      	add	r3, r7
 8081d22:	d8f0      	bhi.n	8081d06 <_ZN6MB85RC8readDataEjPhj+0x7a>
 8081d24:	4698      	mov	r8, r3
				*data++ = Wire.read();    // receive a byte as character
 8081d26:	462f      	mov	r7, r5
 8081d28:	e7ba      	b.n	8081ca0 <_ZN6MB85RC8readDataEjPhj+0x14>


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 8081d2a:	a801      	add	r0, sp, #4
 8081d2c:	f7ff ff6f 	bl	8081c0e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 8081d30:	4620      	mov	r0, r4
 8081d32:	b002      	add	sp, #8
 8081d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081d38 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081d38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8081d3c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081d3e:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081d40:	460d      	mov	r5, r1
 8081d42:	4690      	mov	r8, r2
 8081d44:	461f      	mov	r7, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081d46:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081d48:	f001 f8cd 	bl	8082ee6 <_ZN7TwoWire4lockEv>
	bool result = true;

	WITH_LOCK(wire) {
		while(dataLen > 0) {
 8081d4c:	b34f      	cbz	r7, 8081da2 <_ZN6MB85RC9writeDataEjPKhj+0x6a>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081d4e:	68e1      	ldr	r1, [r4, #12]
 8081d50:	6860      	ldr	r0, [r4, #4]
 8081d52:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081d56:	f001 f8bb 	bl	8082ed0 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081d5a:	0a29      	lsrs	r1, r5, #8
 8081d5c:	6860      	ldr	r0, [r4, #4]
 8081d5e:	f7ff ff2d 	bl	8081bbc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081d62:	4629      	mov	r1, r5
 8081d64:	6860      	ldr	r0, [r4, #4]
 8081d66:	f7ff ff29 	bl	8081bbc <_ZN7TwoWire5writeEj>
 8081d6a:	4646      	mov	r6, r8
 8081d6c:	f108 091e 	add.w	r9, r8, #30
 8081d70:	ebc8 0a05 	rsb	sl, r8, r5

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 8081d74:	6860      	ldr	r0, [r4, #4]
 8081d76:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081d7a:	6803      	ldr	r3, [r0, #0]
 8081d7c:	eb06 050a 	add.w	r5, r6, sl
 8081d80:	689b      	ldr	r3, [r3, #8]
 8081d82:	4798      	blx	r3
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081d84:	45b1      	cmp	r9, r6
				wire.write(*data);
				framAddr++;
				data++;
 8081d86:	46b0      	mov	r8, r6
				dataLen--;
 8081d88:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		while(dataLen > 0) {
			wire.beginTransmission(addr | DEVICE_ADDR);
			wire.write(framAddr >> 8);
			wire.write(framAddr);

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081d8c:	d001      	beq.n	8081d92 <_ZN6MB85RC9writeDataEjPKhj+0x5a>
 8081d8e:	2f00      	cmp	r7, #0
 8081d90:	d1f0      	bne.n	8081d74 <_ZN6MB85RC9writeDataEjPKhj+0x3c>
				framAddr++;
				data++;
				dataLen--;
			}

			int stat = wire.endTransmission(true);
 8081d92:	2101      	movs	r1, #1
 8081d94:	6860      	ldr	r0, [r4, #4]
 8081d96:	f001 f89e 	bl	8082ed6 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081d9a:	2800      	cmp	r0, #0
 8081d9c:	d0d6      	beq.n	8081d4c <_ZN6MB85RC9writeDataEjPKhj+0x14>
 8081d9e:	2400      	movs	r4, #0
 8081da0:	e000      	b.n	8081da4 <_ZN6MB85RC9writeDataEjPKhj+0x6c>
 8081da2:	2401      	movs	r4, #1


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
	bool result = true;

	WITH_LOCK(wire) {
 8081da4:	a801      	add	r0, sp, #4
 8081da6:	f7ff ff32 	bl	8081c0e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081daa:	4620      	mov	r0, r4
 8081dac:	b002      	add	sp, #8
 8081dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081db2 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081db6:	460e      	mov	r6, r1
 8081db8:	4615      	mov	r5, r2
 8081dba:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081dbc:	6840      	ldr	r0, [r0, #4]
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081dbe:	b08b      	sub	sp, #44	; 0x2c
 8081dc0:	461c      	mov	r4, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081dc2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081dc4:	f001 f88f 	bl	8082ee6 <_ZN7TwoWire4lockEv>

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
 8081dc8:	42ae      	cmp	r6, r5
 8081dca:	d223      	bcs.n	8081e14 <_ZN6MB85RC8moveDataEjjj+0x62>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 8081dcc:	4426      	add	r6, r4
			framAddrTo += numBytes;
 8081dce:	4425      	add	r5, r4
			while(numBytes > 0) {
 8081dd0:	b90c      	cbnz	r4, 8081dd6 <_ZN6MB85RC8moveDataEjjj+0x24>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081dd2:	2401      	movs	r4, #1
 8081dd4:	e03f      	b.n	8081e56 <_ZN6MB85RC8moveDataEjjj+0xa4>
 8081dd6:	4627      	mov	r7, r4
 8081dd8:	2c1e      	cmp	r4, #30
 8081dda:	bf28      	it	cs
 8081ddc:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081dde:	f8d8 3000 	ldr.w	r3, [r8]
			while(numBytes > 0) {
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
 8081de2:	1bf6      	subs	r6, r6, r7
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081de4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081de8:	aa02      	add	r2, sp, #8
 8081dea:	463b      	mov	r3, r7
 8081dec:	4631      	mov	r1, r6
 8081dee:	4640      	mov	r0, r8
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;
 8081df0:	1bed      	subs	r5, r5, r7

				result = readData(framAddrFrom, buf, count);
 8081df2:	47c8      	blx	r9
				if (!result) {
 8081df4:	b908      	cbnz	r0, 8081dfa <_ZN6MB85RC8moveDataEjjj+0x48>
	}
	return result;
}


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081df6:	2400      	movs	r4, #0
 8081df8:	e02d      	b.n	8081e56 <_ZN6MB85RC8moveDataEjjj+0xa4>

				result = readData(framAddrFrom, buf, count);
				if (!result) {
					break;
				}
				result = writeData(framAddrTo, buf, count);
 8081dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8081dfe:	aa02      	add	r2, sp, #8
 8081e00:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081e04:	4629      	mov	r1, r5
 8081e06:	463b      	mov	r3, r7
 8081e08:	4640      	mov	r0, r8
 8081e0a:	47c8      	blx	r9
				if (!result) {
 8081e0c:	2800      	cmp	r0, #0
 8081e0e:	d0f2      	beq.n	8081df6 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}

				numBytes -= count;
 8081e10:	1be4      	subs	r4, r4, r7
	WITH_LOCK(wire) {
		if (framAddrFrom < framAddrTo) {
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
			framAddrTo += numBytes;
			while(numBytes > 0) {
 8081e12:	e7dd      	b.n	8081dd0 <_ZN6MB85RC8moveDataEjjj+0x1e>
				numBytes -= count;
			}

		}
		else
		if (framAddrFrom > framAddrTo) {
 8081e14:	d9dd      	bls.n	8081dd2 <_ZN6MB85RC8moveDataEjjj+0x20>
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 8081e16:	2c00      	cmp	r4, #0
 8081e18:	d0db      	beq.n	8081dd2 <_ZN6MB85RC8moveDataEjjj+0x20>
 8081e1a:	4627      	mov	r7, r4
 8081e1c:	2c1e      	cmp	r4, #30
				size_t count = numBytes;
				if (count > sizeof(buf)) {
					count = sizeof(buf);
				}
				result = readData(framAddrFrom, buf, count);
 8081e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8081e22:	bf28      	it	cs
 8081e24:	271e      	movcs	r7, #30
 8081e26:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081e2a:	aa02      	add	r2, sp, #8
 8081e2c:	463b      	mov	r3, r7
 8081e2e:	4631      	mov	r1, r6
 8081e30:	4640      	mov	r0, r8
 8081e32:	47c8      	blx	r9
				if (!result) {
 8081e34:	2800      	cmp	r0, #0
 8081e36:	d0de      	beq.n	8081df6 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				result = writeData(framAddrTo, buf, count);
 8081e38:	f8d8 3000 	ldr.w	r3, [r8]
 8081e3c:	aa02      	add	r2, sp, #8
 8081e3e:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081e42:	4629      	mov	r1, r5
 8081e44:	463b      	mov	r3, r7
 8081e46:	4640      	mov	r0, r8
 8081e48:	47c8      	blx	r9
				if (!result) {
 8081e4a:	2800      	cmp	r0, #0
 8081e4c:	d0d3      	beq.n	8081df6 <_ZN6MB85RC8moveDataEjjj+0x44>
					break;
				}
				framAddrFrom += count;
 8081e4e:	443e      	add	r6, r7
				framAddrTo += count;
 8081e50:	443d      	add	r5, r7
				numBytes -= count;
 8081e52:	1be4      	subs	r4, r4, r7

		}
		else
		if (framAddrFrom > framAddrTo) {
			// Moving to a lower address - copy from beginning of the from buffer
			while(numBytes > 0) {
 8081e54:	e7df      	b.n	8081e16 <_ZN6MB85RC8moveDataEjjj+0x64>
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081e56:	a801      	add	r0, sp, #4
 8081e58:	f7ff fed9 	bl	8081c0e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 8081e5c:	4620      	mov	r0, r4
 8081e5e:	b00b      	add	sp, #44	; 0x2c
 8081e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08081e64 <_GLOBAL__sub_I__ZN6MB85RCC2ER7TwoWireji>:
 8081e64:	f000 b8b0 	b.w	8081fc8 <HAL_Pin_Map>

08081e68 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081e68:	b508      	push	{r3, lr}
 8081e6a:	4b02      	ldr	r3, [pc, #8]	; (8081e74 <inet_gethostbyname+0xc>)
 8081e6c:	681b      	ldr	r3, [r3, #0]
 8081e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081e70:	9301      	str	r3, [sp, #4]
 8081e72:	bd08      	pop	{r3, pc}
 8081e74:	08060020 	.word	0x08060020

08081e78 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081e78:	b508      	push	{r3, lr}
 8081e7a:	4b02      	ldr	r3, [pc, #8]	; (8081e84 <cellular_signal+0xc>)
 8081e7c:	681b      	ldr	r3, [r3, #0]
 8081e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081e80:	9301      	str	r3, [sp, #4]
 8081e82:	bd08      	pop	{r3, pc}
 8081e84:	08060020 	.word	0x08060020

08081e88 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081e88:	b508      	push	{r3, lr}
 8081e8a:	4b02      	ldr	r3, [pc, #8]	; (8081e94 <cellular_command+0xc>)
 8081e8c:	681b      	ldr	r3, [r3, #0]
 8081e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081e90:	9301      	str	r3, [sp, #4]
 8081e92:	bd08      	pop	{r3, pc}
 8081e94:	08060020 	.word	0x08060020

08081e98 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8081e98:	b508      	push	{r3, lr}
 8081e9a:	4b02      	ldr	r3, [pc, #8]	; (8081ea4 <os_thread_yield+0xc>)
 8081e9c:	681b      	ldr	r3, [r3, #0]
 8081e9e:	68db      	ldr	r3, [r3, #12]
 8081ea0:	9301      	str	r3, [sp, #4]
 8081ea2:	bd08      	pop	{r3, pc}
 8081ea4:	080401d0 	.word	0x080401d0

08081ea8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8081ea8:	b508      	push	{r3, lr}
 8081eaa:	4b02      	ldr	r3, [pc, #8]	; (8081eb4 <os_thread_scheduling+0xc>)
 8081eac:	681b      	ldr	r3, [r3, #0]
 8081eae:	69db      	ldr	r3, [r3, #28]
 8081eb0:	9301      	str	r3, [sp, #4]
 8081eb2:	bd08      	pop	{r3, pc}
 8081eb4:	080401d0 	.word	0x080401d0

08081eb8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8081eb8:	b508      	push	{r3, lr}
 8081eba:	4b02      	ldr	r3, [pc, #8]	; (8081ec4 <os_timer_create+0xc>)
 8081ebc:	681b      	ldr	r3, [r3, #0]
 8081ebe:	6a1b      	ldr	r3, [r3, #32]
 8081ec0:	9301      	str	r3, [sp, #4]
 8081ec2:	bd08      	pop	{r3, pc}
 8081ec4:	080401d0 	.word	0x080401d0

08081ec8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8081ec8:	b508      	push	{r3, lr}
 8081eca:	4b02      	ldr	r3, [pc, #8]	; (8081ed4 <os_timer_destroy+0xc>)
 8081ecc:	681b      	ldr	r3, [r3, #0]
 8081ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081ed0:	9301      	str	r3, [sp, #4]
 8081ed2:	bd08      	pop	{r3, pc}
 8081ed4:	080401d0 	.word	0x080401d0

08081ed8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8081ed8:	b508      	push	{r3, lr}
 8081eda:	4b02      	ldr	r3, [pc, #8]	; (8081ee4 <os_timer_get_id+0xc>)
 8081edc:	681b      	ldr	r3, [r3, #0]
 8081ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081ee0:	9301      	str	r3, [sp, #4]
 8081ee2:	bd08      	pop	{r3, pc}
 8081ee4:	080401d0 	.word	0x080401d0

08081ee8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8081ee8:	b508      	push	{r3, lr}
 8081eea:	4b02      	ldr	r3, [pc, #8]	; (8081ef4 <os_timer_change+0xc>)
 8081eec:	681b      	ldr	r3, [r3, #0]
 8081eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ef0:	9301      	str	r3, [sp, #4]
 8081ef2:	bd08      	pop	{r3, pc}
 8081ef4:	080401d0 	.word	0x080401d0

08081ef8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081ef8:	b508      	push	{r3, lr}
 8081efa:	4b02      	ldr	r3, [pc, #8]	; (8081f04 <os_mutex_recursive_create+0xc>)
 8081efc:	681b      	ldr	r3, [r3, #0]
 8081efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f00:	9301      	str	r3, [sp, #4]
 8081f02:	bd08      	pop	{r3, pc}
 8081f04:	080401d0 	.word	0x080401d0

08081f08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081f08:	b508      	push	{r3, lr}
 8081f0a:	4b02      	ldr	r3, [pc, #8]	; (8081f14 <os_mutex_recursive_destroy+0xc>)
 8081f0c:	681b      	ldr	r3, [r3, #0]
 8081f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081f10:	9301      	str	r3, [sp, #4]
 8081f12:	bd08      	pop	{r3, pc}
 8081f14:	080401d0 	.word	0x080401d0

08081f18 <os_timer_is_active>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))
 8081f18:	b508      	push	{r3, lr}
 8081f1a:	4b02      	ldr	r3, [pc, #8]	; (8081f24 <os_timer_is_active+0xc>)
 8081f1c:	681b      	ldr	r3, [r3, #0]
 8081f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081f20:	9301      	str	r3, [sp, #4]
 8081f22:	bd08      	pop	{r3, pc}
 8081f24:	080401d0 	.word	0x080401d0

08081f28 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 8081f28:	b508      	push	{r3, lr}
 8081f2a:	4b02      	ldr	r3, [pc, #8]	; (8081f34 <os_timer_set_id+0xc>)
 8081f2c:	681b      	ldr	r3, [r3, #0]
 8081f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8081f30:	9301      	str	r3, [sp, #4]
 8081f32:	bd08      	pop	{r3, pc}
 8081f34:	080401d0 	.word	0x080401d0

08081f38 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081f38:	b508      	push	{r3, lr}
 8081f3a:	4b02      	ldr	r3, [pc, #8]	; (8081f44 <HAL_Feature_Set+0xc>)
 8081f3c:	681b      	ldr	r3, [r3, #0]
 8081f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081f40:	9301      	str	r3, [sp, #4]
 8081f42:	bd08      	pop	{r3, pc}
 8081f44:	080401b8 	.word	0x080401b8

08081f48 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081f48:	b508      	push	{r3, lr}
 8081f4a:	4b02      	ldr	r3, [pc, #8]	; (8081f54 <HAL_Core_System_Reset_Ex+0xc>)
 8081f4c:	681b      	ldr	r3, [r3, #0]
 8081f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8081f50:	9301      	str	r3, [sp, #4]
 8081f52:	bd08      	pop	{r3, pc}
 8081f54:	080401b8 	.word	0x080401b8

08081f58 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081f58:	b508      	push	{r3, lr}
 8081f5a:	4b02      	ldr	r3, [pc, #8]	; (8081f64 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081f5c:	681b      	ldr	r3, [r3, #0]
 8081f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081f60:	9301      	str	r3, [sp, #4]
 8081f62:	bd08      	pop	{r3, pc}
 8081f64:	080401b8 	.word	0x080401b8

08081f68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081f68:	b508      	push	{r3, lr}
 8081f6a:	4b02      	ldr	r3, [pc, #8]	; (8081f74 <HAL_RNG_GetRandomNumber+0xc>)
 8081f6c:	681b      	ldr	r3, [r3, #0]
 8081f6e:	685b      	ldr	r3, [r3, #4]
 8081f70:	9301      	str	r3, [sp, #4]
 8081f72:	bd08      	pop	{r3, pc}
 8081f74:	0804019c 	.word	0x0804019c

08081f78 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081f78:	b508      	push	{r3, lr}
 8081f7a:	4b02      	ldr	r3, [pc, #8]	; (8081f84 <HAL_Delay_Microseconds+0xc>)
 8081f7c:	681b      	ldr	r3, [r3, #0]
 8081f7e:	68db      	ldr	r3, [r3, #12]
 8081f80:	9301      	str	r3, [sp, #4]
 8081f82:	bd08      	pop	{r3, pc}
 8081f84:	0804019c 	.word	0x0804019c

08081f88 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081f88:	b508      	push	{r3, lr}
 8081f8a:	4b02      	ldr	r3, [pc, #8]	; (8081f94 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081f8c:	681b      	ldr	r3, [r3, #0]
 8081f8e:	695b      	ldr	r3, [r3, #20]
 8081f90:	9301      	str	r3, [sp, #4]
 8081f92:	bd08      	pop	{r3, pc}
 8081f94:	0804019c 	.word	0x0804019c

08081f98 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081f98:	b508      	push	{r3, lr}
 8081f9a:	4b02      	ldr	r3, [pc, #8]	; (8081fa4 <HAL_RTC_Get_UnixTime+0xc>)
 8081f9c:	681b      	ldr	r3, [r3, #0]
 8081f9e:	69db      	ldr	r3, [r3, #28]
 8081fa0:	9301      	str	r3, [sp, #4]
 8081fa2:	bd08      	pop	{r3, pc}
 8081fa4:	0804019c 	.word	0x0804019c

08081fa8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081fa8:	b508      	push	{r3, lr}
 8081faa:	4b02      	ldr	r3, [pc, #8]	; (8081fb4 <HAL_RTC_Time_Is_Valid+0xc>)
 8081fac:	681b      	ldr	r3, [r3, #0]
 8081fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081fb0:	9301      	str	r3, [sp, #4]
 8081fb2:	bd08      	pop	{r3, pc}
 8081fb4:	0804019c 	.word	0x0804019c

08081fb8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081fb8:	b508      	push	{r3, lr}
 8081fba:	4b02      	ldr	r3, [pc, #8]	; (8081fc4 <hal_timer_millis+0xc>)
 8081fbc:	681b      	ldr	r3, [r3, #0]
 8081fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081fc0:	9301      	str	r3, [sp, #4]
 8081fc2:	bd08      	pop	{r3, pc}
 8081fc4:	0804019c 	.word	0x0804019c

08081fc8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8081fc8:	b508      	push	{r3, lr}
 8081fca:	4b02      	ldr	r3, [pc, #8]	; (8081fd4 <HAL_Pin_Map+0xc>)
 8081fcc:	681b      	ldr	r3, [r3, #0]
 8081fce:	681b      	ldr	r3, [r3, #0]
 8081fd0:	9301      	str	r3, [sp, #4]
 8081fd2:	bd08      	pop	{r3, pc}
 8081fd4:	080401b0 	.word	0x080401b0

08081fd8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081fd8:	b508      	push	{r3, lr}
 8081fda:	4b02      	ldr	r3, [pc, #8]	; (8081fe4 <HAL_Validate_Pin_Function+0xc>)
 8081fdc:	681b      	ldr	r3, [r3, #0]
 8081fde:	685b      	ldr	r3, [r3, #4]
 8081fe0:	9301      	str	r3, [sp, #4]
 8081fe2:	bd08      	pop	{r3, pc}
 8081fe4:	080401b0 	.word	0x080401b0

08081fe8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081fe8:	b508      	push	{r3, lr}
 8081fea:	4b02      	ldr	r3, [pc, #8]	; (8081ff4 <HAL_Pin_Mode+0xc>)
 8081fec:	681b      	ldr	r3, [r3, #0]
 8081fee:	689b      	ldr	r3, [r3, #8]
 8081ff0:	9301      	str	r3, [sp, #4]
 8081ff2:	bd08      	pop	{r3, pc}
 8081ff4:	080401b0 	.word	0x080401b0

08081ff8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081ff8:	b508      	push	{r3, lr}
 8081ffa:	4b02      	ldr	r3, [pc, #8]	; (8082004 <HAL_Get_Pin_Mode+0xc>)
 8081ffc:	681b      	ldr	r3, [r3, #0]
 8081ffe:	68db      	ldr	r3, [r3, #12]
 8082000:	9301      	str	r3, [sp, #4]
 8082002:	bd08      	pop	{r3, pc}
 8082004:	080401b0 	.word	0x080401b0

08082008 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8082008:	b508      	push	{r3, lr}
 808200a:	4b02      	ldr	r3, [pc, #8]	; (8082014 <HAL_GPIO_Write+0xc>)
 808200c:	681b      	ldr	r3, [r3, #0]
 808200e:	691b      	ldr	r3, [r3, #16]
 8082010:	9301      	str	r3, [sp, #4]
 8082012:	bd08      	pop	{r3, pc}
 8082014:	080401b0 	.word	0x080401b0

08082018 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8082018:	b508      	push	{r3, lr}
 808201a:	4b02      	ldr	r3, [pc, #8]	; (8082024 <HAL_GPIO_Read+0xc>)
 808201c:	681b      	ldr	r3, [r3, #0]
 808201e:	695b      	ldr	r3, [r3, #20]
 8082020:	9301      	str	r3, [sp, #4]
 8082022:	bd08      	pop	{r3, pc}
 8082024:	080401b0 	.word	0x080401b0

08082028 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8082028:	b508      	push	{r3, lr}
 808202a:	4b02      	ldr	r3, [pc, #8]	; (8082034 <HAL_Interrupts_Attach+0xc>)
 808202c:	681b      	ldr	r3, [r3, #0]
 808202e:	699b      	ldr	r3, [r3, #24]
 8082030:	9301      	str	r3, [sp, #4]
 8082032:	bd08      	pop	{r3, pc}
 8082034:	080401b0 	.word	0x080401b0

08082038 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8082038:	b508      	push	{r3, lr}
 808203a:	4b02      	ldr	r3, [pc, #8]	; (8082044 <HAL_Interrupts_Detach+0xc>)
 808203c:	681b      	ldr	r3, [r3, #0]
 808203e:	69db      	ldr	r3, [r3, #28]
 8082040:	9301      	str	r3, [sp, #4]
 8082042:	bd08      	pop	{r3, pc}
 8082044:	080401b0 	.word	0x080401b0

08082048 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8082048:	b508      	push	{r3, lr}
 808204a:	4b02      	ldr	r3, [pc, #8]	; (8082054 <HAL_ADC_Read+0xc>)
 808204c:	681b      	ldr	r3, [r3, #0]
 808204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082050:	9301      	str	r3, [sp, #4]
 8082052:	bd08      	pop	{r3, pc}
 8082054:	080401b0 	.word	0x080401b0

08082058 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8082058:	b508      	push	{r3, lr}
 808205a:	4b02      	ldr	r3, [pc, #8]	; (8082064 <HAL_I2C_Begin+0xc>)
 808205c:	681b      	ldr	r3, [r3, #0]
 808205e:	68db      	ldr	r3, [r3, #12]
 8082060:	9301      	str	r3, [sp, #4]
 8082062:	bd08      	pop	{r3, pc}
 8082064:	080401ac 	.word	0x080401ac

08082068 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 8082068:	b508      	push	{r3, lr}
 808206a:	4b02      	ldr	r3, [pc, #8]	; (8082074 <HAL_I2C_Begin_Transmission+0xc>)
 808206c:	681b      	ldr	r3, [r3, #0]
 808206e:	699b      	ldr	r3, [r3, #24]
 8082070:	9301      	str	r3, [sp, #4]
 8082072:	bd08      	pop	{r3, pc}
 8082074:	080401ac 	.word	0x080401ac

08082078 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8082078:	b508      	push	{r3, lr}
 808207a:	4b02      	ldr	r3, [pc, #8]	; (8082084 <HAL_I2C_End_Transmission+0xc>)
 808207c:	681b      	ldr	r3, [r3, #0]
 808207e:	69db      	ldr	r3, [r3, #28]
 8082080:	9301      	str	r3, [sp, #4]
 8082082:	bd08      	pop	{r3, pc}
 8082084:	080401ac 	.word	0x080401ac

08082088 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8082088:	b508      	push	{r3, lr}
 808208a:	4b02      	ldr	r3, [pc, #8]	; (8082094 <HAL_I2C_Write_Data+0xc>)
 808208c:	681b      	ldr	r3, [r3, #0]
 808208e:	6a1b      	ldr	r3, [r3, #32]
 8082090:	9301      	str	r3, [sp, #4]
 8082092:	bd08      	pop	{r3, pc}
 8082094:	080401ac 	.word	0x080401ac

08082098 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8082098:	b508      	push	{r3, lr}
 808209a:	4b02      	ldr	r3, [pc, #8]	; (80820a4 <HAL_I2C_Available_Data+0xc>)
 808209c:	681b      	ldr	r3, [r3, #0]
 808209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80820a0:	9301      	str	r3, [sp, #4]
 80820a2:	bd08      	pop	{r3, pc}
 80820a4:	080401ac 	.word	0x080401ac

080820a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80820a8:	b508      	push	{r3, lr}
 80820aa:	4b02      	ldr	r3, [pc, #8]	; (80820b4 <HAL_I2C_Read_Data+0xc>)
 80820ac:	681b      	ldr	r3, [r3, #0]
 80820ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80820b0:	9301      	str	r3, [sp, #4]
 80820b2:	bd08      	pop	{r3, pc}
 80820b4:	080401ac 	.word	0x080401ac

080820b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80820b8:	b508      	push	{r3, lr}
 80820ba:	4b02      	ldr	r3, [pc, #8]	; (80820c4 <HAL_I2C_Peek_Data+0xc>)
 80820bc:	681b      	ldr	r3, [r3, #0]
 80820be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80820c0:	9301      	str	r3, [sp, #4]
 80820c2:	bd08      	pop	{r3, pc}
 80820c4:	080401ac 	.word	0x080401ac

080820c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80820c8:	b508      	push	{r3, lr}
 80820ca:	4b02      	ldr	r3, [pc, #8]	; (80820d4 <HAL_I2C_Flush_Data+0xc>)
 80820cc:	681b      	ldr	r3, [r3, #0]
 80820ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80820d0:	9301      	str	r3, [sp, #4]
 80820d2:	bd08      	pop	{r3, pc}
 80820d4:	080401ac 	.word	0x080401ac

080820d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80820d8:	b508      	push	{r3, lr}
 80820da:	4b02      	ldr	r3, [pc, #8]	; (80820e4 <HAL_I2C_Is_Enabled+0xc>)
 80820dc:	681b      	ldr	r3, [r3, #0]
 80820de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80820e0:	9301      	str	r3, [sp, #4]
 80820e2:	bd08      	pop	{r3, pc}
 80820e4:	080401ac 	.word	0x080401ac

080820e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80820e8:	b508      	push	{r3, lr}
 80820ea:	4b02      	ldr	r3, [pc, #8]	; (80820f4 <HAL_I2C_Init+0xc>)
 80820ec:	681b      	ldr	r3, [r3, #0]
 80820ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80820f0:	9301      	str	r3, [sp, #4]
 80820f2:	bd08      	pop	{r3, pc}
 80820f4:	080401ac 	.word	0x080401ac

080820f8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80820f8:	b508      	push	{r3, lr}
 80820fa:	4b02      	ldr	r3, [pc, #8]	; (8082104 <HAL_I2C_Acquire+0xc>)
 80820fc:	681b      	ldr	r3, [r3, #0]
 80820fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082100:	9301      	str	r3, [sp, #4]
 8082102:	bd08      	pop	{r3, pc}
 8082104:	080401ac 	.word	0x080401ac

08082108 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8082108:	b508      	push	{r3, lr}
 808210a:	4b02      	ldr	r3, [pc, #8]	; (8082114 <HAL_I2C_Release+0xc>)
 808210c:	681b      	ldr	r3, [r3, #0]
 808210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082110:	9301      	str	r3, [sp, #4]
 8082112:	bd08      	pop	{r3, pc}
 8082114:	080401ac 	.word	0x080401ac

08082118 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 8082118:	b508      	push	{r3, lr}
 808211a:	4b02      	ldr	r3, [pc, #8]	; (8082124 <HAL_I2C_Request_Data_Ex+0xc>)
 808211c:	681b      	ldr	r3, [r3, #0]
 808211e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082120:	9301      	str	r3, [sp, #4]
 8082122:	bd08      	pop	{r3, pc}
 8082124:	080401ac 	.word	0x080401ac

08082128 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8082128:	b508      	push	{r3, lr}
 808212a:	4b02      	ldr	r3, [pc, #8]	; (8082134 <HAL_SPI_Init+0xc>)
 808212c:	681b      	ldr	r3, [r3, #0]
 808212e:	69db      	ldr	r3, [r3, #28]
 8082130:	9301      	str	r3, [sp, #4]
 8082132:	bd08      	pop	{r3, pc}
 8082134:	080401b4 	.word	0x080401b4

08082138 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8082138:	b508      	push	{r3, lr}
 808213a:	4b02      	ldr	r3, [pc, #8]	; (8082144 <HAL_SPI_Is_Enabled+0xc>)
 808213c:	681b      	ldr	r3, [r3, #0]
 808213e:	6a1b      	ldr	r3, [r3, #32]
 8082140:	9301      	str	r3, [sp, #4]
 8082142:	bd08      	pop	{r3, pc}
 8082144:	080401b4 	.word	0x080401b4

08082148 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8082148:	b508      	push	{r3, lr}
 808214a:	4b02      	ldr	r3, [pc, #8]	; (8082154 <HAL_USART_Init+0xc>)
 808214c:	681b      	ldr	r3, [r3, #0]
 808214e:	699b      	ldr	r3, [r3, #24]
 8082150:	9301      	str	r3, [sp, #4]
 8082152:	bd08      	pop	{r3, pc}
 8082154:	080401c4 	.word	0x080401c4

08082158 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8082158:	b508      	push	{r3, lr}
 808215a:	4b02      	ldr	r3, [pc, #8]	; (8082164 <HAL_USART_Write_Data+0xc>)
 808215c:	681b      	ldr	r3, [r3, #0]
 808215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082160:	9301      	str	r3, [sp, #4]
 8082162:	bd08      	pop	{r3, pc}
 8082164:	080401c4 	.word	0x080401c4

08082168 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8082168:	b508      	push	{r3, lr}
 808216a:	4b02      	ldr	r3, [pc, #8]	; (8082174 <HAL_USART_Available_Data+0xc>)
 808216c:	681b      	ldr	r3, [r3, #0]
 808216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082170:	9301      	str	r3, [sp, #4]
 8082172:	bd08      	pop	{r3, pc}
 8082174:	080401c4 	.word	0x080401c4

08082178 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8082178:	b508      	push	{r3, lr}
 808217a:	4b02      	ldr	r3, [pc, #8]	; (8082184 <HAL_USART_Read_Data+0xc>)
 808217c:	681b      	ldr	r3, [r3, #0]
 808217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082180:	9301      	str	r3, [sp, #4]
 8082182:	bd08      	pop	{r3, pc}
 8082184:	080401c4 	.word	0x080401c4

08082188 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8082188:	b508      	push	{r3, lr}
 808218a:	4b02      	ldr	r3, [pc, #8]	; (8082194 <HAL_USART_Peek_Data+0xc>)
 808218c:	681b      	ldr	r3, [r3, #0]
 808218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082190:	9301      	str	r3, [sp, #4]
 8082192:	bd08      	pop	{r3, pc}
 8082194:	080401c4 	.word	0x080401c4

08082198 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8082198:	b508      	push	{r3, lr}
 808219a:	4b02      	ldr	r3, [pc, #8]	; (80821a4 <HAL_USART_Flush_Data+0xc>)
 808219c:	681b      	ldr	r3, [r3, #0]
 808219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80821a0:	9301      	str	r3, [sp, #4]
 80821a2:	bd08      	pop	{r3, pc}
 80821a4:	080401c4 	.word	0x080401c4

080821a8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80821a8:	b508      	push	{r3, lr}
 80821aa:	4b02      	ldr	r3, [pc, #8]	; (80821b4 <HAL_USART_Is_Enabled+0xc>)
 80821ac:	681b      	ldr	r3, [r3, #0]
 80821ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80821b0:	9301      	str	r3, [sp, #4]
 80821b2:	bd08      	pop	{r3, pc}
 80821b4:	080401c4 	.word	0x080401c4

080821b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80821b8:	b508      	push	{r3, lr}
 80821ba:	4b02      	ldr	r3, [pc, #8]	; (80821c4 <HAL_USART_Available_Data_For_Write+0xc>)
 80821bc:	681b      	ldr	r3, [r3, #0]
 80821be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80821c0:	9301      	str	r3, [sp, #4]
 80821c2:	bd08      	pop	{r3, pc}
 80821c4:	080401c4 	.word	0x080401c4

080821c8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80821c8:	b508      	push	{r3, lr}
 80821ca:	4b02      	ldr	r3, [pc, #8]	; (80821d4 <HAL_USART_BeginConfig+0xc>)
 80821cc:	681b      	ldr	r3, [r3, #0]
 80821ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80821d0:	9301      	str	r3, [sp, #4]
 80821d2:	bd08      	pop	{r3, pc}
 80821d4:	080401c4 	.word	0x080401c4

080821d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80821d8:	b508      	push	{r3, lr}
 80821da:	4b02      	ldr	r3, [pc, #8]	; (80821e4 <HAL_USB_USART_Init+0xc>)
 80821dc:	681b      	ldr	r3, [r3, #0]
 80821de:	681b      	ldr	r3, [r3, #0]
 80821e0:	9301      	str	r3, [sp, #4]
 80821e2:	bd08      	pop	{r3, pc}
 80821e4:	0806001c 	.word	0x0806001c

080821e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80821e8:	b508      	push	{r3, lr}
 80821ea:	4b02      	ldr	r3, [pc, #8]	; (80821f4 <HAL_USB_USART_Available_Data+0xc>)
 80821ec:	681b      	ldr	r3, [r3, #0]
 80821ee:	691b      	ldr	r3, [r3, #16]
 80821f0:	9301      	str	r3, [sp, #4]
 80821f2:	bd08      	pop	{r3, pc}
 80821f4:	0806001c 	.word	0x0806001c

080821f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80821f8:	b508      	push	{r3, lr}
 80821fa:	4b02      	ldr	r3, [pc, #8]	; (8082204 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80821fc:	681b      	ldr	r3, [r3, #0]
 80821fe:	695b      	ldr	r3, [r3, #20]
 8082200:	9301      	str	r3, [sp, #4]
 8082202:	bd08      	pop	{r3, pc}
 8082204:	0806001c 	.word	0x0806001c

08082208 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082208:	b508      	push	{r3, lr}
 808220a:	4b02      	ldr	r3, [pc, #8]	; (8082214 <HAL_USB_USART_Receive_Data+0xc>)
 808220c:	681b      	ldr	r3, [r3, #0]
 808220e:	699b      	ldr	r3, [r3, #24]
 8082210:	9301      	str	r3, [sp, #4]
 8082212:	bd08      	pop	{r3, pc}
 8082214:	0806001c 	.word	0x0806001c

08082218 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8082218:	b508      	push	{r3, lr}
 808221a:	4b02      	ldr	r3, [pc, #8]	; (8082224 <HAL_USB_USART_Send_Data+0xc>)
 808221c:	681b      	ldr	r3, [r3, #0]
 808221e:	69db      	ldr	r3, [r3, #28]
 8082220:	9301      	str	r3, [sp, #4]
 8082222:	bd08      	pop	{r3, pc}
 8082224:	0806001c 	.word	0x0806001c

08082228 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8082228:	b508      	push	{r3, lr}
 808222a:	4b02      	ldr	r3, [pc, #8]	; (8082234 <HAL_USB_USART_Flush_Data+0xc>)
 808222c:	681b      	ldr	r3, [r3, #0]
 808222e:	6a1b      	ldr	r3, [r3, #32]
 8082230:	9301      	str	r3, [sp, #4]
 8082232:	bd08      	pop	{r3, pc}
 8082234:	0806001c 	.word	0x0806001c

08082238 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8082238:	b508      	push	{r3, lr}
 808223a:	4b02      	ldr	r3, [pc, #8]	; (8082244 <panic_+0xc>)
 808223c:	681b      	ldr	r3, [r3, #0]
 808223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082240:	9301      	str	r3, [sp, #4]
 8082242:	bd08      	pop	{r3, pc}
 8082244:	080201a0 	.word	0x080201a0

08082248 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 8082248:	b508      	push	{r3, lr}
 808224a:	4b02      	ldr	r3, [pc, #8]	; (8082254 <log_message+0xc>)
 808224c:	681b      	ldr	r3, [r3, #0]
 808224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082250:	9301      	str	r3, [sp, #4]
 8082252:	bd08      	pop	{r3, pc}
 8082254:	080201a0 	.word	0x080201a0

08082258 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8082258:	b508      	push	{r3, lr}
 808225a:	4b02      	ldr	r3, [pc, #8]	; (8082264 <log_message_v+0xc>)
 808225c:	681b      	ldr	r3, [r3, #0]
 808225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082260:	9301      	str	r3, [sp, #4]
 8082262:	bd08      	pop	{r3, pc}
 8082264:	080201a0 	.word	0x080201a0

08082268 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 8082268:	b508      	push	{r3, lr}
 808226a:	4b03      	ldr	r3, [pc, #12]	; (8082278 <diag_get_source+0x10>)
 808226c:	681b      	ldr	r3, [r3, #0]
 808226e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8082272:	9301      	str	r3, [sp, #4]
 8082274:	bd08      	pop	{r3, pc}
 8082276:	0000      	.short	0x0000
 8082278:	080201a0 	.word	0x080201a0

0808227c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808227c:	b508      	push	{r3, lr}
 808227e:	4b02      	ldr	r3, [pc, #8]	; (8082288 <system_mode+0xc>)
 8082280:	681b      	ldr	r3, [r3, #0]
 8082282:	681b      	ldr	r3, [r3, #0]
 8082284:	9301      	str	r3, [sp, #4]
 8082286:	bd08      	pop	{r3, pc}
 8082288:	080401a4 	.word	0x080401a4

0808228c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808228c:	b508      	push	{r3, lr}
 808228e:	4b02      	ldr	r3, [pc, #8]	; (8082298 <set_system_mode+0xc>)
 8082290:	681b      	ldr	r3, [r3, #0]
 8082292:	685b      	ldr	r3, [r3, #4]
 8082294:	9301      	str	r3, [sp, #4]
 8082296:	bd08      	pop	{r3, pc}
 8082298:	080401a4 	.word	0x080401a4

0808229c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808229c:	b508      	push	{r3, lr}
 808229e:	4b02      	ldr	r3, [pc, #8]	; (80822a8 <system_delay_ms+0xc>)
 80822a0:	681b      	ldr	r3, [r3, #0]
 80822a2:	695b      	ldr	r3, [r3, #20]
 80822a4:	9301      	str	r3, [sp, #4]
 80822a6:	bd08      	pop	{r3, pc}
 80822a8:	080401a4 	.word	0x080401a4

080822ac <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80822ac:	b508      	push	{r3, lr}
 80822ae:	4b02      	ldr	r3, [pc, #8]	; (80822b8 <system_sleep+0xc>)
 80822b0:	681b      	ldr	r3, [r3, #0]
 80822b2:	699b      	ldr	r3, [r3, #24]
 80822b4:	9301      	str	r3, [sp, #4]
 80822b6:	bd08      	pop	{r3, pc}
 80822b8:	080401a4 	.word	0x080401a4

080822bc <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80822bc:	b508      	push	{r3, lr}
 80822be:	4b02      	ldr	r3, [pc, #8]	; (80822c8 <system_thread_set_state+0xc>)
 80822c0:	681b      	ldr	r3, [r3, #0]
 80822c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80822c4:	9301      	str	r3, [sp, #4]
 80822c6:	bd08      	pop	{r3, pc}
 80822c8:	080401a4 	.word	0x080401a4

080822cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80822cc:	b508      	push	{r3, lr}
 80822ce:	4b02      	ldr	r3, [pc, #8]	; (80822d8 <application_thread_current+0xc>)
 80822d0:	681b      	ldr	r3, [r3, #0]
 80822d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80822d4:	9301      	str	r3, [sp, #4]
 80822d6:	bd08      	pop	{r3, pc}
 80822d8:	080401a4 	.word	0x080401a4

080822dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80822dc:	b508      	push	{r3, lr}
 80822de:	4b02      	ldr	r3, [pc, #8]	; (80822e8 <application_thread_invoke+0xc>)
 80822e0:	681b      	ldr	r3, [r3, #0]
 80822e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80822e4:	9301      	str	r3, [sp, #4]
 80822e6:	bd08      	pop	{r3, pc}
 80822e8:	080401a4 	.word	0x080401a4

080822ec <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80822ec:	b508      	push	{r3, lr}
 80822ee:	4b02      	ldr	r3, [pc, #8]	; (80822f8 <system_thread_get_state+0xc>)
 80822f0:	681b      	ldr	r3, [r3, #0]
 80822f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80822f4:	9301      	str	r3, [sp, #4]
 80822f6:	bd08      	pop	{r3, pc}
 80822f8:	080401a4 	.word	0x080401a4

080822fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80822fc:	b508      	push	{r3, lr}
 80822fe:	4b03      	ldr	r3, [pc, #12]	; (808230c <system_ctrl_set_app_request_handler+0x10>)
 8082300:	681b      	ldr	r3, [r3, #0]
 8082302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8082306:	9301      	str	r3, [sp, #4]
 8082308:	bd08      	pop	{r3, pc}
 808230a:	0000      	.short	0x0000
 808230c:	080401a4 	.word	0x080401a4

08082310 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8082310:	b508      	push	{r3, lr}
 8082312:	4b03      	ldr	r3, [pc, #12]	; (8082320 <system_ctrl_set_result+0x10>)
 8082314:	681b      	ldr	r3, [r3, #0]
 8082316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808231a:	9301      	str	r3, [sp, #4]
 808231c:	bd08      	pop	{r3, pc}
 808231e:	0000      	.short	0x0000
 8082320:	080401a4 	.word	0x080401a4

08082324 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 8082324:	b508      	push	{r3, lr}
 8082326:	4b03      	ldr	r3, [pc, #12]	; (8082334 <system_power_management_set_config+0x10>)
 8082328:	681b      	ldr	r3, [r3, #0]
 808232a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 808232e:	9301      	str	r3, [sp, #4]
 8082330:	bd08      	pop	{r3, pc}
 8082332:	0000      	.short	0x0000
 8082334:	080401a4 	.word	0x080401a4

08082338 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 8082338:	b508      	push	{r3, lr}
 808233a:	4b03      	ldr	r3, [pc, #12]	; (8082348 <system_sleep_ext+0x10>)
 808233c:	681b      	ldr	r3, [r3, #0]
 808233e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8082342:	9301      	str	r3, [sp, #4]
 8082344:	bd08      	pop	{r3, pc}
 8082346:	0000      	.short	0x0000
 8082348:	080401a4 	.word	0x080401a4

0808234c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808234c:	b508      	push	{r3, lr}
 808234e:	4b02      	ldr	r3, [pc, #8]	; (8082358 <spark_variable+0xc>)
 8082350:	681b      	ldr	r3, [r3, #0]
 8082352:	681b      	ldr	r3, [r3, #0]
 8082354:	9301      	str	r3, [sp, #4]
 8082356:	bd08      	pop	{r3, pc}
 8082358:	080401cc 	.word	0x080401cc

0808235c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808235c:	b508      	push	{r3, lr}
 808235e:	4b02      	ldr	r3, [pc, #8]	; (8082368 <spark_function+0xc>)
 8082360:	681b      	ldr	r3, [r3, #0]
 8082362:	685b      	ldr	r3, [r3, #4]
 8082364:	9301      	str	r3, [sp, #4]
 8082366:	bd08      	pop	{r3, pc}
 8082368:	080401cc 	.word	0x080401cc

0808236c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808236c:	b508      	push	{r3, lr}
 808236e:	4b02      	ldr	r3, [pc, #8]	; (8082378 <spark_process+0xc>)
 8082370:	681b      	ldr	r3, [r3, #0]
 8082372:	689b      	ldr	r3, [r3, #8]
 8082374:	9301      	str	r3, [sp, #4]
 8082376:	bd08      	pop	{r3, pc}
 8082378:	080401cc 	.word	0x080401cc

0808237c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808237c:	b508      	push	{r3, lr}
 808237e:	4b02      	ldr	r3, [pc, #8]	; (8082388 <spark_cloud_flag_connect+0xc>)
 8082380:	681b      	ldr	r3, [r3, #0]
 8082382:	68db      	ldr	r3, [r3, #12]
 8082384:	9301      	str	r3, [sp, #4]
 8082386:	bd08      	pop	{r3, pc}
 8082388:	080401cc 	.word	0x080401cc

0808238c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 808238c:	b508      	push	{r3, lr}
 808238e:	4b02      	ldr	r3, [pc, #8]	; (8082398 <spark_cloud_flag_disconnect+0xc>)
 8082390:	681b      	ldr	r3, [r3, #0]
 8082392:	691b      	ldr	r3, [r3, #16]
 8082394:	9301      	str	r3, [sp, #4]
 8082396:	bd08      	pop	{r3, pc}
 8082398:	080401cc 	.word	0x080401cc

0808239c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808239c:	b508      	push	{r3, lr}
 808239e:	4b02      	ldr	r3, [pc, #8]	; (80823a8 <spark_cloud_flag_connected+0xc>)
 80823a0:	681b      	ldr	r3, [r3, #0]
 80823a2:	695b      	ldr	r3, [r3, #20]
 80823a4:	9301      	str	r3, [sp, #4]
 80823a6:	bd08      	pop	{r3, pc}
 80823a8:	080401cc 	.word	0x080401cc

080823ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80823ac:	b508      	push	{r3, lr}
 80823ae:	4b02      	ldr	r3, [pc, #8]	; (80823b8 <spark_send_event+0xc>)
 80823b0:	681b      	ldr	r3, [r3, #0]
 80823b2:	6a1b      	ldr	r3, [r3, #32]
 80823b4:	9301      	str	r3, [sp, #4]
 80823b6:	bd08      	pop	{r3, pc}
 80823b8:	080401cc 	.word	0x080401cc

080823bc <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80823bc:	b508      	push	{r3, lr}
 80823be:	4b02      	ldr	r3, [pc, #8]	; (80823c8 <spark_sync_time+0xc>)
 80823c0:	681b      	ldr	r3, [r3, #0]
 80823c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80823c4:	9301      	str	r3, [sp, #4]
 80823c6:	bd08      	pop	{r3, pc}
 80823c8:	080401cc 	.word	0x080401cc

080823cc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80823cc:	b508      	push	{r3, lr}
 80823ce:	4b02      	ldr	r3, [pc, #8]	; (80823d8 <spark_sync_time_pending+0xc>)
 80823d0:	681b      	ldr	r3, [r3, #0]
 80823d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80823d4:	9301      	str	r3, [sp, #4]
 80823d6:	bd08      	pop	{r3, pc}
 80823d8:	080401cc 	.word	0x080401cc

080823dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80823dc:	b508      	push	{r3, lr}
 80823de:	4b02      	ldr	r3, [pc, #8]	; (80823e8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80823e0:	681b      	ldr	r3, [r3, #0]
 80823e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80823e4:	9301      	str	r3, [sp, #4]
 80823e6:	bd08      	pop	{r3, pc}
 80823e8:	080401cc 	.word	0x080401cc

080823ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80823ec:	b508      	push	{r3, lr}
 80823ee:	4b02      	ldr	r3, [pc, #8]	; (80823f8 <network_connect+0xc>)
 80823f0:	681b      	ldr	r3, [r3, #0]
 80823f2:	685b      	ldr	r3, [r3, #4]
 80823f4:	9301      	str	r3, [sp, #4]
 80823f6:	bd08      	pop	{r3, pc}
 80823f8:	080401c8 	.word	0x080401c8

080823fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80823fc:	b508      	push	{r3, lr}
 80823fe:	4b02      	ldr	r3, [pc, #8]	; (8082408 <network_connecting+0xc>)
 8082400:	681b      	ldr	r3, [r3, #0]
 8082402:	689b      	ldr	r3, [r3, #8]
 8082404:	9301      	str	r3, [sp, #4]
 8082406:	bd08      	pop	{r3, pc}
 8082408:	080401c8 	.word	0x080401c8

0808240c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808240c:	b508      	push	{r3, lr}
 808240e:	4b02      	ldr	r3, [pc, #8]	; (8082418 <network_disconnect+0xc>)
 8082410:	681b      	ldr	r3, [r3, #0]
 8082412:	68db      	ldr	r3, [r3, #12]
 8082414:	9301      	str	r3, [sp, #4]
 8082416:	bd08      	pop	{r3, pc}
 8082418:	080401c8 	.word	0x080401c8

0808241c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808241c:	b508      	push	{r3, lr}
 808241e:	4b02      	ldr	r3, [pc, #8]	; (8082428 <network_ready+0xc>)
 8082420:	681b      	ldr	r3, [r3, #0]
 8082422:	691b      	ldr	r3, [r3, #16]
 8082424:	9301      	str	r3, [sp, #4]
 8082426:	bd08      	pop	{r3, pc}
 8082428:	080401c8 	.word	0x080401c8

0808242c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808242c:	b508      	push	{r3, lr}
 808242e:	4b02      	ldr	r3, [pc, #8]	; (8082438 <network_on+0xc>)
 8082430:	681b      	ldr	r3, [r3, #0]
 8082432:	695b      	ldr	r3, [r3, #20]
 8082434:	9301      	str	r3, [sp, #4]
 8082436:	bd08      	pop	{r3, pc}
 8082438:	080401c8 	.word	0x080401c8

0808243c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808243c:	b508      	push	{r3, lr}
 808243e:	4b02      	ldr	r3, [pc, #8]	; (8082448 <network_off+0xc>)
 8082440:	681b      	ldr	r3, [r3, #0]
 8082442:	699b      	ldr	r3, [r3, #24]
 8082444:	9301      	str	r3, [sp, #4]
 8082446:	bd08      	pop	{r3, pc}
 8082448:	080401c8 	.word	0x080401c8

0808244c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808244c:	b508      	push	{r3, lr}
 808244e:	4b02      	ldr	r3, [pc, #8]	; (8082458 <network_listen+0xc>)
 8082450:	681b      	ldr	r3, [r3, #0]
 8082452:	69db      	ldr	r3, [r3, #28]
 8082454:	9301      	str	r3, [sp, #4]
 8082456:	bd08      	pop	{r3, pc}
 8082458:	080401c8 	.word	0x080401c8

0808245c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808245c:	b508      	push	{r3, lr}
 808245e:	4b02      	ldr	r3, [pc, #8]	; (8082468 <network_listening+0xc>)
 8082460:	681b      	ldr	r3, [r3, #0]
 8082462:	6a1b      	ldr	r3, [r3, #32]
 8082464:	9301      	str	r3, [sp, #4]
 8082466:	bd08      	pop	{r3, pc}
 8082468:	080401c8 	.word	0x080401c8

0808246c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808246c:	b508      	push	{r3, lr}
 808246e:	4b02      	ldr	r3, [pc, #8]	; (8082478 <network_set_listen_timeout+0xc>)
 8082470:	681b      	ldr	r3, [r3, #0]
 8082472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082474:	9301      	str	r3, [sp, #4]
 8082476:	bd08      	pop	{r3, pc}
 8082478:	080401c8 	.word	0x080401c8

0808247c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808247c:	b508      	push	{r3, lr}
 808247e:	4b02      	ldr	r3, [pc, #8]	; (8082488 <network_get_listen_timeout+0xc>)
 8082480:	681b      	ldr	r3, [r3, #0]
 8082482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8082484:	9301      	str	r3, [sp, #4]
 8082486:	bd08      	pop	{r3, pc}
 8082488:	080401c8 	.word	0x080401c8

0808248c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808248c:	b508      	push	{r3, lr}
 808248e:	4b02      	ldr	r3, [pc, #8]	; (8082498 <malloc+0xc>)
 8082490:	681b      	ldr	r3, [r3, #0]
 8082492:	681b      	ldr	r3, [r3, #0]
 8082494:	9301      	str	r3, [sp, #4]
 8082496:	bd08      	pop	{r3, pc}
 8082498:	080401a0 	.word	0x080401a0

0808249c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808249c:	b508      	push	{r3, lr}
 808249e:	4b02      	ldr	r3, [pc, #8]	; (80824a8 <free+0xc>)
 80824a0:	681b      	ldr	r3, [r3, #0]
 80824a2:	685b      	ldr	r3, [r3, #4]
 80824a4:	9301      	str	r3, [sp, #4]
 80824a6:	bd08      	pop	{r3, pc}
 80824a8:	080401a0 	.word	0x080401a0

080824ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80824ac:	b508      	push	{r3, lr}
 80824ae:	4b02      	ldr	r3, [pc, #8]	; (80824b8 <realloc+0xc>)
 80824b0:	681b      	ldr	r3, [r3, #0]
 80824b2:	689b      	ldr	r3, [r3, #8]
 80824b4:	9301      	str	r3, [sp, #4]
 80824b6:	bd08      	pop	{r3, pc}
 80824b8:	080401a0 	.word	0x080401a0

080824bc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80824bc:	b508      	push	{r3, lr}
 80824be:	4b02      	ldr	r3, [pc, #8]	; (80824c8 <siprintf+0xc>)
 80824c0:	681b      	ldr	r3, [r3, #0]
 80824c2:	691b      	ldr	r3, [r3, #16]
 80824c4:	9301      	str	r3, [sp, #4]
 80824c6:	bd08      	pop	{r3, pc}
 80824c8:	080401a0 	.word	0x080401a0

080824cc <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80824cc:	b508      	push	{r3, lr}
 80824ce:	4b02      	ldr	r3, [pc, #8]	; (80824d8 <siscanf+0xc>)
 80824d0:	681b      	ldr	r3, [r3, #0]
 80824d2:	699b      	ldr	r3, [r3, #24]
 80824d4:	9301      	str	r3, [sp, #4]
 80824d6:	bd08      	pop	{r3, pc}
 80824d8:	080401a0 	.word	0x080401a0

080824dc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80824dc:	b508      	push	{r3, lr}
 80824de:	4b02      	ldr	r3, [pc, #8]	; (80824e8 <snprintf+0xc>)
 80824e0:	681b      	ldr	r3, [r3, #0]
 80824e2:	69db      	ldr	r3, [r3, #28]
 80824e4:	9301      	str	r3, [sp, #4]
 80824e6:	bd08      	pop	{r3, pc}
 80824e8:	080401a0 	.word	0x080401a0

080824ec <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80824ec:	b508      	push	{r3, lr}
 80824ee:	4b02      	ldr	r3, [pc, #8]	; (80824f8 <abort+0xc>)
 80824f0:	681b      	ldr	r3, [r3, #0]
 80824f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80824f4:	9301      	str	r3, [sp, #4]
 80824f6:	bd08      	pop	{r3, pc}
 80824f8:	080401a0 	.word	0x080401a0

080824fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80824fc:	b508      	push	{r3, lr}
 80824fe:	4b02      	ldr	r3, [pc, #8]	; (8082508 <_malloc_r+0xc>)
 8082500:	681b      	ldr	r3, [r3, #0]
 8082502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082504:	9301      	str	r3, [sp, #4]
 8082506:	bd08      	pop	{r3, pc}
 8082508:	080401a0 	.word	0x080401a0

0808250c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808250c:	2100      	movs	r1, #0
 808250e:	f7ff bec5 	b.w	808229c <system_delay_ms>

08082512 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082512:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082514:	6883      	ldr	r3, [r0, #8]
 8082516:	4604      	mov	r4, r0
 8082518:	b90b      	cbnz	r3, 808251e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808251a:	f001 fdb0 	bl	808407e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808251e:	68c3      	ldr	r3, [r0, #12]
 8082520:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8082522:	68a3      	ldr	r3, [r4, #8]
 8082524:	b11b      	cbz	r3, 808252e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082526:	2203      	movs	r2, #3
 8082528:	4621      	mov	r1, r4
 808252a:	4620      	mov	r0, r4
 808252c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808252e:	4620      	mov	r0, r4
}
 8082530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082534:	2110      	movs	r1, #16
 8082536:	f001 bd86 	b.w	8084046 <_ZdlPvj>

0808253a <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808253a:	2200      	movs	r2, #0
 808253c:	4611      	mov	r1, r2
 808253e:	6840      	ldr	r0, [r0, #4]
 8082540:	f7ff bf6c 	b.w	808241c <network_ready>

08082544 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082544:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082548:	2600      	movs	r6, #0
 808254a:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808254c:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808254e:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082550:	4688      	mov	r8, r1
 8082552:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8082554:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082558:	f002 ffd3 	bl	8085502 <strlen>
 808255c:	9600      	str	r6, [sp, #0]
 808255e:	b281      	uxth	r1, r0
 8082560:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082564:	4622      	mov	r2, r4
 8082566:	4638      	mov	r0, r7
 8082568:	f7ff fc7e 	bl	8081e68 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808256c:	b120      	cbz	r0, 8082578 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808256e:	4631      	mov	r1, r6
 8082570:	4628      	mov	r0, r5
 8082572:	f000 fd3f 	bl	8082ff4 <_ZN9IPAddressC1Em>
 8082576:	e003      	b.n	8082580 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082578:	4621      	mov	r1, r4
 808257a:	4628      	mov	r0, r5
 808257c:	f000 fd32 	bl	8082fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082580:	4628      	mov	r0, r5
 8082582:	b004      	add	sp, #16
 8082584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082588 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8082588:	2200      	movs	r2, #0
 808258a:	4611      	mov	r1, r2
 808258c:	6840      	ldr	r0, [r0, #4]
 808258e:	f7ff bf65 	b.w	808245c <network_listening>

08082592 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8082592:	2200      	movs	r2, #0
 8082594:	4611      	mov	r1, r2
 8082596:	6840      	ldr	r0, [r0, #4]
 8082598:	f7ff bf70 	b.w	808247c <network_get_listen_timeout>

0808259c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808259c:	2200      	movs	r2, #0
 808259e:	6840      	ldr	r0, [r0, #4]
 80825a0:	f7ff bf64 	b.w	808246c <network_set_listen_timeout>

080825a4 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80825a4:	2200      	movs	r2, #0
 80825a6:	f081 0101 	eor.w	r1, r1, #1
 80825aa:	6840      	ldr	r0, [r0, #4]
 80825ac:	f7ff bf4e 	b.w	808244c <network_listen>

080825b0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80825b0:	2300      	movs	r3, #0
 80825b2:	461a      	mov	r2, r3
 80825b4:	4619      	mov	r1, r3
 80825b6:	6840      	ldr	r0, [r0, #4]
 80825b8:	f7ff bf40 	b.w	808243c <network_off>

080825bc <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80825bc:	2300      	movs	r3, #0
 80825be:	461a      	mov	r2, r3
 80825c0:	4619      	mov	r1, r3
 80825c2:	6840      	ldr	r0, [r0, #4]
 80825c4:	f7ff bf32 	b.w	808242c <network_on>

080825c8 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80825c8:	2200      	movs	r2, #0
 80825ca:	4611      	mov	r1, r2
 80825cc:	6840      	ldr	r0, [r0, #4]
 80825ce:	f7ff bf15 	b.w	80823fc <network_connecting>

080825d2 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80825d2:	2200      	movs	r2, #0
 80825d4:	2102      	movs	r1, #2
 80825d6:	6840      	ldr	r0, [r0, #4]
 80825d8:	f7ff bf18 	b.w	808240c <network_disconnect>

080825dc <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80825dc:	2300      	movs	r3, #0
 80825de:	461a      	mov	r2, r3
 80825e0:	6840      	ldr	r0, [r0, #4]
 80825e2:	f7ff bf03 	b.w	80823ec <network_connect>
	...

080825e8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 80825e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80825ea:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 80825ec:	4b1a      	ldr	r3, [pc, #104]	; (8082658 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 80825ee:	2500      	movs	r5, #0
 80825f0:	6003      	str	r3, [r0, #0]
 80825f2:	2618      	movs	r6, #24
 80825f4:	3328      	adds	r3, #40	; 0x28
 80825f6:	b089      	sub	sp, #36	; 0x24
 80825f8:	6043      	str	r3, [r0, #4]
 80825fa:	6085      	str	r5, [r0, #8]
 80825fc:	60c5      	str	r5, [r0, #12]
 80825fe:	4632      	mov	r2, r6
 8082600:	4629      	mov	r1, r5
 8082602:	4604      	mov	r4, r0
 8082604:	3010      	adds	r0, #16
 8082606:	f002 ff0e 	bl	8085426 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 808260a:	462a      	mov	r2, r5
 808260c:	4629      	mov	r1, r5
 808260e:	6878      	ldr	r0, [r7, #4]
 8082610:	f7ff ff04 	bl	808241c <network_ready>
 8082614:	b908      	cbnz	r0, 808261a <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8082616:	60a0      	str	r0, [r4, #8]
            return sig;
 8082618:	e01b      	b.n	8082652 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 808261a:	4629      	mov	r1, r5
 808261c:	4632      	mov	r2, r6
 808261e:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8082620:	9500      	str	r5, [sp, #0]
 8082622:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8082624:	f002 feff 	bl	8085426 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082628:	a902      	add	r1, sp, #8
 808262a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 808262c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082630:	f7ff fc22 	bl	8081e78 <cellular_signal>
 8082634:	b110      	cbz	r0, 808263c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8082636:	2301      	movs	r3, #1
 8082638:	60a3      	str	r3, [r4, #8]
            return sig;
 808263a:	e00a      	b.n	8082652 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 808263c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 808263e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8082640:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8082642:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8082644:	b90b      	cbnz	r3, 808264a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8082646:	2302      	movs	r3, #2
 8082648:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 808264a:	a902      	add	r1, sp, #8
 808264c:	4620      	mov	r0, r4
 808264e:	f000 f87d 	bl	808274c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8082652:	4620      	mov	r0, r4
 8082654:	b009      	add	sp, #36	; 0x24
 8082656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082658:	08086354 	.word	0x08086354

0808265c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808265c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808265e:	4c08      	ldr	r4, [pc, #32]	; (8082680 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082660:	2528      	movs	r5, #40	; 0x28
 8082662:	462a      	mov	r2, r5
 8082664:	2100      	movs	r1, #0
 8082666:	4620      	mov	r0, r4
 8082668:	f002 fedd 	bl	8085426 <memset>
        cid = -1;
 808266c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8082670:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082672:	4b04      	ldr	r3, [pc, #16]	; (8082684 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8082674:	2204      	movs	r2, #4
 8082676:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082678:	4a03      	ldr	r2, [pc, #12]	; (8082688 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808267a:	8025      	strh	r5, [r4, #0]
 808267c:	601a      	str	r2, [r3, #0]
 808267e:	bd38      	pop	{r3, r4, r5, pc}
 8082680:	200002f4 	.word	0x200002f4
 8082684:	200002ec 	.word	0x200002ec
 8082688:	08086320 	.word	0x08086320

0808268c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 808268c:	4770      	bx	lr

0808268e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 808268e:	7d00      	ldrb	r0, [r0, #20]
 8082690:	4770      	bx	lr
	...

08082694 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8082694:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8082696:	7d03      	ldrb	r3, [r0, #20]
 8082698:	b11b      	cbz	r3, 80826a2 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 808269a:	6980      	ldr	r0, [r0, #24]
 808269c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80826a0:	d101      	bne.n	80826a6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 80826a2:	2000      	movs	r0, #0
 80826a4:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 80826a6:	f002 fb31 	bl	8084d0c <__aeabi_i2f>
 80826aa:	4902      	ldr	r1, [pc, #8]	; (80826b4 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 80826ac:	f002 fc36 	bl	8084f1c <__aeabi_fdiv>
    }

    return 0.0f;
}
 80826b0:	bd08      	pop	{r3, pc}
 80826b2:	bf00      	nop
 80826b4:	42c80000 	.word	0x42c80000

080826b8 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 80826b8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 80826ba:	7d03      	ldrb	r3, [r0, #20]
 80826bc:	b11b      	cbz	r3, 80826c6 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 80826be:	6a00      	ldr	r0, [r0, #32]
 80826c0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80826c4:	d101      	bne.n	80826ca <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 80826c6:	2000      	movs	r0, #0
 80826c8:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 80826ca:	f002 fb1f 	bl	8084d0c <__aeabi_i2f>
 80826ce:	4902      	ldr	r1, [pc, #8]	; (80826d8 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 80826d0:	f002 fc24 	bl	8084f1c <__aeabi_fdiv>
    }

    return 0.0f;
}
 80826d4:	bd08      	pop	{r3, pc}
 80826d6:	bf00      	nop
 80826d8:	42c80000 	.word	0x42c80000

080826dc <_ZN14CellularSignalD0Ev>:
 80826dc:	b510      	push	{r4, lr}
 80826de:	4604      	mov	r4, r0
 80826e0:	2128      	movs	r1, #40	; 0x28
 80826e2:	f001 fcb0 	bl	8084046 <_ZdlPvj>
 80826e6:	4620      	mov	r0, r4
 80826e8:	bd10      	pop	{r4, pc}
	...

080826ec <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 80826ec:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80826ee:	7d03      	ldrb	r3, [r0, #20]
 80826f0:	b15b      	cbz	r3, 808270a <_ZNK14CellularSignal10getQualityEv+0x1e>
 80826f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80826f4:	2800      	cmp	r0, #0
 80826f6:	db08      	blt.n	808270a <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 80826f8:	f002 fb08 	bl	8084d0c <__aeabi_i2f>
 80826fc:	4904      	ldr	r1, [pc, #16]	; (8082710 <_ZNK14CellularSignal10getQualityEv+0x24>)
 80826fe:	f002 fc0d 	bl	8084f1c <__aeabi_fdiv>
 8082702:	4904      	ldr	r1, [pc, #16]	; (8082714 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8082704:	f002 fb56 	bl	8084db4 <__aeabi_fmul>
 8082708:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 808270a:	4803      	ldr	r0, [pc, #12]	; (8082718 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 808270c:	bd08      	pop	{r3, pc}
 808270e:	bf00      	nop
 8082710:	477fff00 	.word	0x477fff00
 8082714:	42c80000 	.word	0x42c80000
 8082718:	bf800000 	.word	0xbf800000

0808271c <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 808271c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 808271e:	7d03      	ldrb	r3, [r0, #20]
 8082720:	b15b      	cbz	r3, 808273a <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8082722:	69c0      	ldr	r0, [r0, #28]
 8082724:	2800      	cmp	r0, #0
 8082726:	db08      	blt.n	808273a <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082728:	f002 faf0 	bl	8084d0c <__aeabi_i2f>
 808272c:	4904      	ldr	r1, [pc, #16]	; (8082740 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 808272e:	f002 fbf5 	bl	8084f1c <__aeabi_fdiv>
 8082732:	4904      	ldr	r1, [pc, #16]	; (8082744 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082734:	f002 fb3e 	bl	8084db4 <__aeabi_fmul>
 8082738:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 808273a:	4803      	ldr	r0, [pc, #12]	; (8082748 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 808273c:	bd08      	pop	{r3, pc}
 808273e:	bf00      	nop
 8082740:	477fff00 	.word	0x477fff00
 8082744:	42c80000 	.word	0x42c80000
 8082748:	bf800000 	.word	0xbf800000

0808274c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 808274c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 808274e:	460d      	mov	r5, r1
 8082750:	f100 0410 	add.w	r4, r0, #16
 8082754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082758:	e895 0003 	ldmia.w	r5, {r0, r1}
 808275c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8082760:	2001      	movs	r0, #1
 8082762:	bd30      	pop	{r4, r5, pc}

08082764 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 8082764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082768:	4607      	mov	r7, r0
 808276a:	460c      	mov	r4, r1
{
    if (base == 0) {
 808276c:	4615      	mov	r5, r2
 808276e:	b92a      	cbnz	r2, 808277c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 8082770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 8082774:	6803      	ldr	r3, [r0, #0]
 8082776:	b2c9      	uxtb	r1, r1
 8082778:	689b      	ldr	r3, [r3, #8]
 808277a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 808277c:	2900      	cmp	r1, #0
 808277e:	da07      	bge.n	8082790 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 8082780:	2a0a      	cmp	r2, #10
 8082782:	d105      	bne.n	8082790 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 8082784:	212d      	movs	r1, #45	; 0x2d
 8082786:	f000 fd89 	bl	808329c <_ZN5Print5printEc>
            val = -n;
 808278a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 808278c:	4606      	mov	r6, r0
            val = -n;
 808278e:	e001      	b.n	8082794 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 8082790:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 8082792:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8082794:	b2ea      	uxtb	r2, r5
 8082796:	4638      	mov	r0, r7
 8082798:	f000 fd99 	bl	80832ce <_ZN5Print11printNumberEmh>
    }
}
 808279c:	4430      	add	r0, r6
 808279e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080827a2 <_ZNK14CellularSignal7printToER5Print>:

    return 0.0f;
}

size_t CellularSignal::printTo(Print& p) const
{
 80827a2:	b570      	push	{r4, r5, r6, lr}
 80827a4:	460d      	mov	r5, r1
 80827a6:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 80827a8:	220a      	movs	r2, #10
 80827aa:	6881      	ldr	r1, [r0, #8]
 80827ac:	4628      	mov	r0, r5
 80827ae:	f7ff ffd9 	bl	8082764 <_ZN5Print5printIiLi0EEEjT_i>
    n += p.print(',');
 80827b2:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 80827b4:	4604      	mov	r4, r0
    n += p.print(',');
 80827b6:	4628      	mov	r0, r5
 80827b8:	f000 fd70 	bl	808329c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 80827bc:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 80827be:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 80827c0:	68f1      	ldr	r1, [r6, #12]
 80827c2:	4628      	mov	r0, r5
 80827c4:	f7ff ffce 	bl	8082764 <_ZN5Print5printIiLi0EEEjT_i>
    return n;
}
 80827c8:	4420      	add	r0, r4
 80827ca:	bd70      	pop	{r4, r5, r6, pc}

080827cc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 80827cc:	f1a0 0004 	sub.w	r0, r0, #4
 80827d0:	f7ff bfe7 	b.w	80827a2 <_ZNK14CellularSignal7printToER5Print>

080827d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80827d4:	4770      	bx	lr

080827d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80827d6:	2000      	movs	r0, #0
 80827d8:	4770      	bx	lr

080827da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80827da:	b510      	push	{r4, lr}
 80827dc:	4604      	mov	r4, r0
 80827de:	2110      	movs	r1, #16
 80827e0:	f001 fc31 	bl	8084046 <_ZdlPvj>
 80827e4:	4620      	mov	r0, r4
 80827e6:	bd10      	pop	{r4, pc}

080827e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80827e8:	b508      	push	{r3, lr}
      { delete this; }
 80827ea:	b108      	cbz	r0, 80827f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80827ec:	f7ff fff5 	bl	80827da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80827f0:	bd08      	pop	{r3, pc}

080827f2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80827f2:	2200      	movs	r2, #0
 80827f4:	6002      	str	r2, [r0, #0]
 80827f6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80827fa:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80827fc:	b510      	push	{r4, lr}
 80827fe:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8082802:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082804:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082806:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8082808:	680c      	ldr	r4, [r1, #0]
 808280a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808280c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808280e:	bd10      	pop	{r4, pc}

08082810 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082810:	b510      	push	{r4, lr}
 8082812:	4604      	mov	r4, r0
    free((void*)msg_);
 8082814:	6800      	ldr	r0, [r0, #0]
 8082816:	f7ff fe41 	bl	808249c <free>
}
 808281a:	4620      	mov	r0, r4
 808281c:	bd10      	pop	{r4, pc}

0808281e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808281e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082820:	68c4      	ldr	r4, [r0, #12]
 8082822:	b1f4      	cbz	r4, 8082862 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082824:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082826:	2b02      	cmp	r3, #2
 8082828:	d103      	bne.n	8082832 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808282a:	f104 000c 	add.w	r0, r4, #12
 808282e:	f7ff ffef 	bl	8082810 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082832:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082834:	b135      	cbz	r5, 8082844 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082836:	4628      	mov	r0, r5
 8082838:	f7fd fd1b 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
 808283c:	2110      	movs	r1, #16
 808283e:	4628      	mov	r0, r5
 8082840:	f001 fc01 	bl	8084046 <_ZdlPvj>
 8082844:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082846:	b135      	cbz	r5, 8082856 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082848:	4628      	mov	r0, r5
 808284a:	f7fd fd12 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
 808284e:	2110      	movs	r1, #16
 8082850:	4628      	mov	r0, r5
 8082852:	f001 fbf8 	bl	8084046 <_ZdlPvj>
 8082856:	4620      	mov	r0, r4
 8082858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808285c:	2114      	movs	r1, #20
 808285e:	f001 bbf2 	b.w	8084046 <_ZdlPvj>
 8082862:	bd38      	pop	{r3, r4, r5, pc}

08082864 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082864:	b510      	push	{r4, lr}
 8082866:	b088      	sub	sp, #32
 8082868:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808286a:	4668      	mov	r0, sp
 808286c:	f000 fdbb 	bl	80833e6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8082870:	4669      	mov	r1, sp
 8082872:	a804      	add	r0, sp, #16
 8082874:	f000 fdd9 	bl	808342a <_ZN6StringC1ERKS_>
 8082878:	a804      	add	r0, sp, #16
 808287a:	47a0      	blx	r4
 808287c:	4604      	mov	r4, r0
 808287e:	a804      	add	r0, sp, #16
 8082880:	f000 fd6a 	bl	8083358 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082884:	4668      	mov	r0, sp
 8082886:	f000 fd67 	bl	8083358 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808288a:	4620      	mov	r0, r4
 808288c:	b008      	add	sp, #32
 808288e:	bd10      	pop	{r4, pc}

08082890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082892:	4607      	mov	r7, r0
 8082894:	460e      	mov	r6, r1
 8082896:	4615      	mov	r5, r2
 8082898:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808289a:	2410      	movs	r4, #16
 808289c:	4622      	mov	r2, r4
 808289e:	2100      	movs	r1, #0
 80828a0:	4668      	mov	r0, sp
 80828a2:	f002 fdc0 	bl	8085426 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80828a6:	2200      	movs	r2, #0
 80828a8:	4669      	mov	r1, sp
 80828aa:	4610      	mov	r0, r2
         size = sizeof(*this);
 80828ac:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80828b0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80828b2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80828b4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80828b6:	f7ff fd51 	bl	808235c <spark_function>
}
 80828ba:	b005      	add	sp, #20
 80828bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080828be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80828be:	b513      	push	{r0, r1, r4, lr}
 80828c0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80828c2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80828c6:	2300      	movs	r3, #0
 80828c8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80828ca:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80828cc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80828ce:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80828d0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80828d2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80828d4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80828d6:	f7fe f8df 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80828da:	4620      	mov	r0, r4
 80828dc:	b002      	add	sp, #8
 80828de:	bd10      	pop	{r4, pc}

080828e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80828e0:	680b      	ldr	r3, [r1, #0]
 80828e2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80828e4:	b113      	cbz	r3, 80828ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80828e6:	685a      	ldr	r2, [r3, #4]
 80828e8:	3201      	adds	r2, #1
 80828ea:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80828ec:	4770      	bx	lr

080828ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80828ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80828f0:	460c      	mov	r4, r1
 80828f2:	4606      	mov	r6, r0
 80828f4:	460f      	mov	r7, r1
 80828f6:	f854 3b04 	ldr.w	r3, [r4], #4
 80828fa:	ad02      	add	r5, sp, #8
 80828fc:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082900:	4621      	mov	r1, r4
 8082902:	a801      	add	r0, sp, #4
 8082904:	f7ff ffec 	bl	80828e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082908:	4629      	mov	r1, r5
 808290a:	4630      	mov	r0, r6
 808290c:	f7ff ffd7 	bl	80828be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082910:	a801      	add	r0, sp, #4
 8082912:	f7fe f8c1 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082916:	4620      	mov	r0, r4
 8082918:	f7fe f8be 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808291c:	4638      	mov	r0, r7
 808291e:	2108      	movs	r1, #8
 8082920:	f001 fb91 	bl	8084046 <_ZdlPvj>
        return p;
    }
 8082924:	4630      	mov	r0, r6
 8082926:	b003      	add	sp, #12
 8082928:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808292a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808292a:	b513      	push	{r0, r1, r4, lr}
 808292c:	460b      	mov	r3, r1
 808292e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082930:	c803      	ldmia	r0, {r0, r1}
 8082932:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082936:	e893 0003 	ldmia.w	r3, {r0, r1}
 808293a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808293e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8082942:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082946:	b002      	add	sp, #8
 8082948:	bd10      	pop	{r4, pc}
	...

0808294c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808294c:	b538      	push	{r3, r4, r5, lr}
 808294e:	2300      	movs	r3, #0
 8082950:	4604      	mov	r4, r0
 8082952:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082954:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082956:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082958:	f7fd fba1 	bl	808009e <_Znwj>
 808295c:	b128      	cbz	r0, 808296a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808295e:	2301      	movs	r3, #1
 8082960:	6043      	str	r3, [r0, #4]
 8082962:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082964:	4b02      	ldr	r3, [pc, #8]	; (8082970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082966:	60c5      	str	r5, [r0, #12]
 8082968:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808296a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808296c:	4620      	mov	r0, r4
 808296e:	bd38      	pop	{r3, r4, r5, pc}
 8082970:	08086388 	.word	0x08086388

08082974 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082974:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082976:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082978:	b90a      	cbnz	r2, 808297e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808297a:	f001 fb80 	bl	808407e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808297e:	68c3      	ldr	r3, [r0, #12]
    }
 8082980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082984:	4718      	bx	r3

08082986 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082986:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082988:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808298a:	f100 0110 	add.w	r1, r0, #16
 808298e:	f7ff fff1 	bl	8082974 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082992:	bd08      	pop	{r3, pc}

08082994 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082994:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082996:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082998:	b90a      	cbnz	r2, 808299e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808299a:	f001 fb70 	bl	808407e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808299e:	68c3      	ldr	r3, [r0, #12]
    }
 80829a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80829a4:	4718      	bx	r3

080829a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80829a6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80829a8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80829aa:	f100 0110 	add.w	r1, r0, #16
 80829ae:	f7ff fff1 	bl	8082994 <_ZNKSt8functionIFvRKbEEclES1_>
 80829b2:	bd08      	pop	{r3, pc}

080829b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80829b4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80829b6:	2300      	movs	r3, #0
 80829b8:	6083      	str	r3, [r0, #8]
 80829ba:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80829bc:	4604      	mov	r4, r0
 80829be:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80829c0:	b12b      	cbz	r3, 80829ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80829c2:	2202      	movs	r2, #2
 80829c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80829c6:	68eb      	ldr	r3, [r5, #12]
 80829c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80829ca:	68ab      	ldr	r3, [r5, #8]
 80829cc:	60a3      	str	r3, [r4, #8]
	}
    }
 80829ce:	4620      	mov	r0, r4
 80829d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080829d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80829d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80829d6:	b089      	sub	sp, #36	; 0x24
 80829d8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80829da:	4668      	mov	r0, sp
 80829dc:	f7ff ff09 	bl	80827f2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80829e0:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80829e4:	2300      	movs	r3, #0
 80829e6:	f88d 3008 	strb.w	r3, [sp, #8]
 80829ea:	e8d4 3f4f 	ldrexb	r3, [r4]
 80829ee:	2b00      	cmp	r3, #0
 80829f0:	d103      	bne.n	80829fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80829f2:	e8c4 2f41 	strexb	r1, r2, [r4]
 80829f6:	2900      	cmp	r1, #0
 80829f8:	d1f7      	bne.n	80829ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80829fa:	d002      	beq.n	8082a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80829fc:	f88d 3008 	strb.w	r3, [sp, #8]
 8082a00:	e063      	b.n	8082aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082a02:	f114 050c 	adds.w	r5, r4, #12
 8082a06:	d003      	beq.n	8082a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8082a08:	4669      	mov	r1, sp
 8082a0a:	4628      	mov	r0, r5
 8082a0c:	f7ff fef1 	bl	80827f2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082a10:	f3bf 8f5f 	dmb	sy
 8082a14:	2301      	movs	r3, #1
 8082a16:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082a18:	f3bf 8f5f 	dmb	sy
 8082a1c:	f104 0308 	add.w	r3, r4, #8
 8082a20:	2000      	movs	r0, #0
 8082a22:	e853 6f00 	ldrex	r6, [r3]
 8082a26:	e843 0200 	strex	r2, r0, [r3]
 8082a2a:	2a00      	cmp	r2, #0
 8082a2c:	d1f9      	bne.n	8082a22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8082a2e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082a32:	2e00      	cmp	r6, #0
 8082a34:	d049      	beq.n	8082aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082a36:	f7ff fc49 	bl	80822cc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082a3a:	b120      	cbz	r0, 8082a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082a3c:	4629      	mov	r1, r5
 8082a3e:	4630      	mov	r0, r6
 8082a40:	f7ff ff98 	bl	8082974 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082a44:	e03a      	b.n	8082abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082a46:	4631      	mov	r1, r6
 8082a48:	a802      	add	r0, sp, #8
 8082a4a:	f7ff ffb3 	bl	80829b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082a4e:	68e0      	ldr	r0, [r4, #12]
 8082a50:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082a54:	b108      	cbz	r0, 8082a5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8082a56:	f002 fd39 	bl	80854cc <strdup>
 8082a5a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082a5c:	2010      	movs	r0, #16
 8082a5e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082a62:	f7fd fb1c 	bl	808009e <_Znwj>
 8082a66:	4605      	mov	r5, r0
 8082a68:	b1e8      	cbz	r0, 8082aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a6a:	2700      	movs	r7, #0
 8082a6c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082a6e:	2018      	movs	r0, #24
 8082a70:	f7fd fb15 	bl	808009e <_Znwj>
 8082a74:	4604      	mov	r4, r0
 8082a76:	b188      	cbz	r0, 8082a9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082a78:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a7a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082a7c:	a802      	add	r0, sp, #8
 8082a7e:	f7ff ff54 	bl	808292a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082a82:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082a84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082a86:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082a88:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082a8a:	9204      	str	r2, [sp, #16]
 8082a8c:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082a8e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082a90:	60e3      	str	r3, [r4, #12]
 8082a92:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082a96:	9205      	str	r2, [sp, #20]
 8082a98:	f7ff feab 	bl	80827f2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082a9c:	4b0d      	ldr	r3, [pc, #52]	; (8082ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082a9e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082aa0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082aa2:	4b0d      	ldr	r3, [pc, #52]	; (8082ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8082aa4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8082aa6:	a806      	add	r0, sp, #24
 8082aa8:	f7ff feb2 	bl	8082810 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082aac:	a802      	add	r0, sp, #8
 8082aae:	f7fd fbe0 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082ab2:	2200      	movs	r2, #0
 8082ab4:	4629      	mov	r1, r5
 8082ab6:	4809      	ldr	r0, [pc, #36]	; (8082adc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8082ab8:	f7ff fc10 	bl	80822dc <application_thread_invoke>
 8082abc:	4630      	mov	r0, r6
 8082abe:	f7fd fbd8 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082ac2:	2110      	movs	r1, #16
 8082ac4:	4630      	mov	r0, r6
 8082ac6:	f001 fabe 	bl	8084046 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8082aca:	4668      	mov	r0, sp
 8082acc:	f7ff fea0 	bl	8082810 <_ZN8particle5ErrorD1Ev>
    }
 8082ad0:	b009      	add	sp, #36	; 0x24
 8082ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ad4:	08082987 	.word	0x08082987
 8082ad8:	08082bfd 	.word	0x08082bfd
 8082adc:	08082513 	.word	0x08082513

08082ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082ae4:	b08b      	sub	sp, #44	; 0x2c
 8082ae6:	4606      	mov	r6, r0
 8082ae8:	460f      	mov	r7, r1
 8082aea:	4690      	mov	r8, r2
 8082aec:	4699      	mov	r9, r3
 8082aee:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082af2:	f7ff fc53 	bl	808239c <spark_cloud_flag_connected>
 8082af6:	ad07      	add	r5, sp, #28
    if (!connected()) {
 8082af8:	4683      	mov	fp, r0
 8082afa:	bb30      	cbnz	r0, 8082b4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082afc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082b00:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082b02:	a905      	add	r1, sp, #20
 8082b04:	4628      	mov	r0, r5
 8082b06:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082b0a:	f7ff fe72 	bl	80827f2 <_ZN8particle5ErrorC1EOS0_>
 8082b0e:	2014      	movs	r0, #20
 8082b10:	f7fd fac5 	bl	808009e <_Znwj>
 8082b14:	4604      	mov	r4, r0
 8082b16:	b158      	cbz	r0, 8082b30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082b18:	2302      	movs	r3, #2
 8082b1a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082b1c:	2301      	movs	r3, #1
 8082b1e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082b20:	f8c0 b004 	str.w	fp, [r0, #4]
 8082b24:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8082b28:	4629      	mov	r1, r5
 8082b2a:	300c      	adds	r0, #12
 8082b2c:	f7ff fe61 	bl	80827f2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8082b30:	4630      	mov	r0, r6
 8082b32:	4621      	mov	r1, r4
 8082b34:	f840 4b04 	str.w	r4, [r0], #4
 8082b38:	f7ff ff08 	bl	808294c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082b3c:	4628      	mov	r0, r5
 8082b3e:	f7ff fe67 	bl	8082810 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8082b42:	a805      	add	r0, sp, #20
 8082b44:	f7ff fe64 	bl	8082810 <_ZN8particle5ErrorD1Ev>
 8082b48:	e052      	b.n	8082bf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082b4a:	2400      	movs	r4, #0
 8082b4c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082b4e:	2014      	movs	r0, #20
 8082b50:	606c      	str	r4, [r5, #4]
 8082b52:	60ac      	str	r4, [r5, #8]
 8082b54:	9307      	str	r3, [sp, #28]
 8082b56:	f7fd faa2 	bl	808009e <_Znwj>
 8082b5a:	4601      	mov	r1, r0
 8082b5c:	b118      	cbz	r0, 8082b66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8082b5e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082b60:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082b62:	6044      	str	r4, [r0, #4]
 8082b64:	6084      	str	r4, [r0, #8]
 8082b66:	a804      	add	r0, sp, #16
 8082b68:	9103      	str	r1, [sp, #12]
 8082b6a:	f7ff feef 	bl	808294c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8082b6e:	4b22      	ldr	r3, [pc, #136]	; (8082bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082b70:	2008      	movs	r0, #8
 8082b72:	9308      	str	r3, [sp, #32]
 8082b74:	f7fd fa93 	bl	808009e <_Znwj>
 8082b78:	4604      	mov	r4, r0
 8082b7a:	b128      	cbz	r0, 8082b88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082b7c:	9b03      	ldr	r3, [sp, #12]
 8082b7e:	a904      	add	r1, sp, #16
 8082b80:	f840 3b04 	str.w	r3, [r0], #4
 8082b84:	f7ff feac 	bl	80828e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082b88:	9500      	str	r5, [sp, #0]
 8082b8a:	fa5f f38a 	uxtb.w	r3, sl
 8082b8e:	464a      	mov	r2, r9
 8082b90:	4641      	mov	r1, r8
 8082b92:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082b94:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082b96:	f7ff fc09 	bl	80823ac <spark_send_event>
 8082b9a:	b920      	cbnz	r0, 8082ba6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082b9c:	9b03      	ldr	r3, [sp, #12]
 8082b9e:	785b      	ldrb	r3, [r3, #1]
 8082ba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082ba4:	b183      	cbz	r3, 8082bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8082ba6:	9b03      	ldr	r3, [sp, #12]
 8082ba8:	a904      	add	r1, sp, #16
 8082baa:	a806      	add	r0, sp, #24
 8082bac:	9305      	str	r3, [sp, #20]
 8082bae:	f7ff fe97 	bl	80828e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8082bb2:	a905      	add	r1, sp, #20
 8082bb4:	4630      	mov	r0, r6
 8082bb6:	f7ff fe82 	bl	80828be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082bba:	a806      	add	r0, sp, #24
 8082bbc:	f7fd ff6c 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082bc0:	a804      	add	r0, sp, #16
 8082bc2:	f7fd ff69 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082bc6:	e013      	b.n	8082bf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8082bc8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8082bcc:	a905      	add	r1, sp, #20
 8082bce:	a803      	add	r0, sp, #12
 8082bd0:	9205      	str	r2, [sp, #20]
 8082bd2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082bd6:	f7ff fefd 	bl	80829d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082bda:	a805      	add	r0, sp, #20
 8082bdc:	f7ff fe18 	bl	8082810 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082be0:	a805      	add	r0, sp, #20
 8082be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082be4:	f7ff fe83 	bl	80828ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8082be8:	a806      	add	r0, sp, #24
 8082bea:	f7fd ff55 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082bee:	e7da      	b.n	8082ba6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 8082bf0:	4630      	mov	r0, r6
 8082bf2:	b00b      	add	sp, #44	; 0x2c
 8082bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082bf8:	08082d6d 	.word	0x08082d6d

08082bfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082bfc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082c00:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082c02:	d006      	beq.n	8082c12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082c04:	2a03      	cmp	r2, #3
 8082c06:	d017      	beq.n	8082c38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082c08:	2a01      	cmp	r2, #1
 8082c0a:	d122      	bne.n	8082c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082c0c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082c0e:	6003      	str	r3, [r0, #0]
	      break;
 8082c10:	e01f      	b.n	8082c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082c12:	2018      	movs	r0, #24
 8082c14:	680e      	ldr	r6, [r1, #0]
 8082c16:	f7fd fa42 	bl	808009e <_Znwj>
 8082c1a:	4605      	mov	r5, r0
 8082c1c:	b150      	cbz	r0, 8082c34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082c1e:	4631      	mov	r1, r6
 8082c20:	f7ff fec8 	bl	80829b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082c24:	6930      	ldr	r0, [r6, #16]
 8082c26:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082c2a:	b108      	cbz	r0, 8082c30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8082c2c:	f002 fc4e 	bl	80854cc <strdup>
 8082c30:	6128      	str	r0, [r5, #16]
 8082c32:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082c34:	6025      	str	r5, [r4, #0]
 8082c36:	e00c      	b.n	8082c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082c38:	6804      	ldr	r4, [r0, #0]
 8082c3a:	b154      	cbz	r4, 8082c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8082c3c:	f104 0010 	add.w	r0, r4, #16
 8082c40:	f7ff fde6 	bl	8082810 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082c44:	4620      	mov	r0, r4
 8082c46:	f7fd fb14 	bl	8080272 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082c4a:	2118      	movs	r1, #24
 8082c4c:	4620      	mov	r0, r4
 8082c4e:	f001 f9fa 	bl	8084046 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082c52:	2000      	movs	r0, #0
 8082c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082c56 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082c56:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082c58:	2300      	movs	r3, #0
 8082c5a:	6083      	str	r3, [r0, #8]
 8082c5c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082c5e:	4604      	mov	r4, r0
 8082c60:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082c62:	b12b      	cbz	r3, 8082c70 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082c64:	2202      	movs	r2, #2
 8082c66:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082c68:	68eb      	ldr	r3, [r5, #12]
 8082c6a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082c6c:	68ab      	ldr	r3, [r5, #8]
 8082c6e:	60a3      	str	r3, [r4, #8]
	}
    }
 8082c70:	4620      	mov	r0, r4
 8082c72:	bd38      	pop	{r3, r4, r5, pc}

08082c74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082c74:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082c76:	b570      	push	{r4, r5, r6, lr}
 8082c78:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082c7a:	d006      	beq.n	8082c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082c7c:	2a03      	cmp	r2, #3
 8082c7e:	d011      	beq.n	8082ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082c80:	2a01      	cmp	r2, #1
 8082c82:	d118      	bne.n	8082cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082c84:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082c86:	6003      	str	r3, [r0, #0]
	      break;
 8082c88:	e015      	b.n	8082cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082c8a:	2014      	movs	r0, #20
 8082c8c:	680e      	ldr	r6, [r1, #0]
 8082c8e:	f7fd fa06 	bl	808009e <_Znwj>
 8082c92:	4605      	mov	r5, r0
 8082c94:	b120      	cbz	r0, 8082ca0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082c96:	4631      	mov	r1, r6
 8082c98:	f7ff ffdd 	bl	8082c56 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082c9c:	7c33      	ldrb	r3, [r6, #16]
 8082c9e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082ca0:	6025      	str	r5, [r4, #0]
 8082ca2:	e008      	b.n	8082cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082ca4:	6804      	ldr	r4, [r0, #0]
 8082ca6:	b134      	cbz	r4, 8082cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082ca8:	4620      	mov	r0, r4
 8082caa:	f7fd fae2 	bl	8080272 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082cae:	2114      	movs	r1, #20
 8082cb0:	4620      	mov	r0, r4
 8082cb2:	f001 f9c8 	bl	8084046 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082cb6:	2000      	movs	r0, #0
 8082cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08082cbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082cbe:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082cc0:	f3bf 8f5f 	dmb	sy
 8082cc4:	b087      	sub	sp, #28
 8082cc6:	2300      	movs	r3, #0
 8082cc8:	e850 6f00 	ldrex	r6, [r0]
 8082ccc:	e840 3200 	strex	r2, r3, [r0]
 8082cd0:	2a00      	cmp	r2, #0
 8082cd2:	d1f9      	bne.n	8082cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082cd4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082cd8:	2e00      	cmp	r6, #0
 8082cda:	d03f      	beq.n	8082d5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082cdc:	4618      	mov	r0, r3
 8082cde:	f7ff faf5 	bl	80822cc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082ce2:	4607      	mov	r7, r0
 8082ce4:	b120      	cbz	r0, 8082cf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082ce6:	4621      	mov	r1, r4
 8082ce8:	4630      	mov	r0, r6
 8082cea:	f7ff fe53 	bl	8082994 <_ZNKSt8functionIFvRKbEEclES1_>
 8082cee:	e02e      	b.n	8082d4e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082cf0:	4631      	mov	r1, r6
 8082cf2:	a801      	add	r0, sp, #4
 8082cf4:	f7ff ffaf 	bl	8082c56 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082cf8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082cfa:	2010      	movs	r0, #16
 8082cfc:	f88d 3014 	strb.w	r3, [sp, #20]
 8082d00:	f7fd f9cd 	bl	808009e <_Znwj>
 8082d04:	4605      	mov	r5, r0
 8082d06:	b1d0      	cbz	r0, 8082d3e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082d08:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082d0a:	2014      	movs	r0, #20
 8082d0c:	f7fd f9c7 	bl	808009e <_Znwj>
 8082d10:	4604      	mov	r4, r0
 8082d12:	b178      	cbz	r0, 8082d34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082d14:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082d16:	4601      	mov	r1, r0
 8082d18:	a801      	add	r0, sp, #4
 8082d1a:	f7ff fe06 	bl	808292a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082d1e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082d20:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082d22:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082d24:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082d26:	9203      	str	r2, [sp, #12]
 8082d28:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082d2a:	60e3      	str	r3, [r4, #12]
 8082d2c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082d30:	9204      	str	r2, [sp, #16]
 8082d32:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082d34:	4b0a      	ldr	r3, [pc, #40]	; (8082d60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082d36:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082d38:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082d3a:	4b0a      	ldr	r3, [pc, #40]	; (8082d64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082d3c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082d3e:	a801      	add	r0, sp, #4
 8082d40:	f7fd fa97 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082d44:	2200      	movs	r2, #0
 8082d46:	4629      	mov	r1, r5
 8082d48:	4807      	ldr	r0, [pc, #28]	; (8082d68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082d4a:	f7ff fac7 	bl	80822dc <application_thread_invoke>
 8082d4e:	4630      	mov	r0, r6
 8082d50:	f7fd fa8f 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082d54:	2110      	movs	r1, #16
 8082d56:	4630      	mov	r0, r6
 8082d58:	f001 f975 	bl	8084046 <_ZdlPvj>
        }
    }
 8082d5c:	b007      	add	sp, #28
 8082d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082d60:	080829a7 	.word	0x080829a7
 8082d64:	08082c75 	.word	0x08082c75
 8082d68:	08082513 	.word	0x08082513

08082d6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082d6c:	b530      	push	{r4, r5, lr}
 8082d6e:	4604      	mov	r4, r0
 8082d70:	b085      	sub	sp, #20
 8082d72:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082d74:	4668      	mov	r0, sp
 8082d76:	4611      	mov	r1, r2
 8082d78:	f7ff fdb9 	bl	80828ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082d7c:	b17c      	cbz	r4, 8082d9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082d7e:	b224      	sxth	r4, r4
 8082d80:	4628      	mov	r0, r5
 8082d82:	b10d      	cbz	r5, 8082d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082d84:	f002 fba2 	bl	80854cc <strdup>
 8082d88:	9002      	str	r0, [sp, #8]
 8082d8a:	a902      	add	r1, sp, #8
 8082d8c:	4668      	mov	r0, sp
 8082d8e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8082d92:	f7ff fe1f 	bl	80829d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082d96:	a802      	add	r0, sp, #8
 8082d98:	f7ff fd3a 	bl	8082810 <_ZN8particle5ErrorD1Ev>
 8082d9c:	e01d      	b.n	8082dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082d9e:	f04f 0201 	mov.w	r2, #1
 8082da2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082da4:	f88d 4008 	strb.w	r4, [sp, #8]
 8082da8:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082dac:	42a3      	cmp	r3, r4
 8082dae:	d103      	bne.n	8082db8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8082db0:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082db4:	2900      	cmp	r1, #0
 8082db6:	d1f7      	bne.n	8082da8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082db8:	d002      	beq.n	8082dc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082dba:	f88d 3008 	strb.w	r3, [sp, #8]
 8082dbe:	e00c      	b.n	8082dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082dc0:	f110 010c 	adds.w	r1, r0, #12
 8082dc4:	f04f 0301 	mov.w	r3, #1
 8082dc8:	bf18      	it	ne
 8082dca:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082dcc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082dd0:	3004      	adds	r0, #4
 8082dd2:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082dd6:	f7ff ff71 	bl	8082cbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082dda:	a801      	add	r0, sp, #4
 8082ddc:	f7fd fe5c 	bl	8080a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082de0:	b005      	add	sp, #20
 8082de2:	bd30      	pop	{r4, r5, pc}

08082de4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 8082de4:	4770      	bx	lr

08082de6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082de8:	4606      	mov	r6, r0
 8082dea:	4615      	mov	r5, r2
 8082dec:	460c      	mov	r4, r1
 8082dee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082df0:	42bc      	cmp	r4, r7
 8082df2:	d006      	beq.n	8082e02 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082df4:	6833      	ldr	r3, [r6, #0]
 8082df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082dfa:	689b      	ldr	r3, [r3, #8]
 8082dfc:	4630      	mov	r0, r6
 8082dfe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082e00:	e7f6      	b.n	8082df0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8082e02:	4628      	mov	r0, r5
 8082e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082e06 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082e06:	2200      	movs	r2, #0
 8082e08:	7c00      	ldrb	r0, [r0, #16]
 8082e0a:	f7ff b93d 	b.w	8082088 <HAL_I2C_Write_Data>

08082e0e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082e0e:	2100      	movs	r1, #0
 8082e10:	7c00      	ldrb	r0, [r0, #16]
 8082e12:	f7ff b941 	b.w	8082098 <HAL_I2C_Available_Data>

08082e16 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8082e16:	2100      	movs	r1, #0
 8082e18:	7c00      	ldrb	r0, [r0, #16]
 8082e1a:	f7ff b945 	b.w	80820a8 <HAL_I2C_Read_Data>

08082e1e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082e1e:	2100      	movs	r1, #0
 8082e20:	7c00      	ldrb	r0, [r0, #16]
 8082e22:	f7ff b949 	b.w	80820b8 <HAL_I2C_Peek_Data>

08082e26 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082e26:	2100      	movs	r1, #0
 8082e28:	7c00      	ldrb	r0, [r0, #16]
 8082e2a:	f7ff b94d 	b.w	80820c8 <HAL_I2C_Flush_Data>

08082e2e <_ZN7TwoWireD0Ev>:
 8082e2e:	b510      	push	{r4, lr}
 8082e30:	4604      	mov	r4, r0
 8082e32:	2114      	movs	r1, #20
 8082e34:	f001 f907 	bl	8084046 <_ZdlPvj>
 8082e38:	4620      	mov	r0, r4
 8082e3a:	bd10      	pop	{r4, pc}

08082e3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8082e3c:	b510      	push	{r4, lr}
 8082e3e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082e40:	2300      	movs	r3, #0
 8082e42:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082e48:	60a3      	str	r3, [r4, #8]
 8082e4a:	4b04      	ldr	r3, [pc, #16]	; (8082e5c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 8082e4c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 8082e4e:	4608      	mov	r0, r1
 8082e50:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 8082e52:	4611      	mov	r1, r2
 8082e54:	f7ff f948 	bl	80820e8 <HAL_I2C_Init>
}
 8082e58:	4620      	mov	r0, r4
 8082e5a:	bd10      	pop	{r4, pc}
 8082e5c:	080863a4 	.word	0x080863a4

08082e60 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082e60:	2300      	movs	r3, #0
 8082e62:	461a      	mov	r2, r3
 8082e64:	4619      	mov	r1, r3
 8082e66:	7c00      	ldrb	r0, [r0, #16]
 8082e68:	f7ff b8f6 	b.w	8082058 <HAL_I2C_Begin>

08082e6c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8082e6c:	b570      	push	{r4, r5, r6, lr}
 8082e6e:	460c      	mov	r4, r1
 8082e70:	4606      	mov	r6, r0
 8082e72:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 8082e74:	2514      	movs	r5, #20
 8082e76:	462a      	mov	r2, r5
 8082e78:	2100      	movs	r1, #0
 8082e7a:	a801      	add	r0, sp, #4
 8082e7c:	f002 fad3 	bl	8085426 <memset>
 8082e80:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 8082e82:	2200      	movs	r2, #0
 8082e84:	f88d 3008 	strb.w	r3, [sp, #8]
 8082e88:	6863      	ldr	r3, [r4, #4]
 8082e8a:	a901      	add	r1, sp, #4
 8082e8c:	9303      	str	r3, [sp, #12]
 8082e8e:	68e3      	ldr	r3, [r4, #12]
 8082e90:	7c30      	ldrb	r0, [r6, #16]
 8082e92:	9304      	str	r3, [sp, #16]
 8082e94:	7a23      	ldrb	r3, [r4, #8]
 8082e96:	f8ad 5004 	strh.w	r5, [sp, #4]
 8082e9a:	9305      	str	r3, [sp, #20]
 8082e9c:	f7ff f93c 	bl	8082118 <HAL_I2C_Request_Data_Ex>
}
 8082ea0:	b006      	add	sp, #24
 8082ea2:	bd70      	pop	{r4, r5, r6, pc}

08082ea4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 8082ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082ea6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082ea8:	f88d 1000 	strb.w	r1, [sp]
 8082eac:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082eb0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082eb2:	bf18      	it	ne
 8082eb4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082eb6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 8082eb8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 8082eba:	f88d 3008 	strb.w	r3, [sp, #8]
 8082ebe:	f7ff ffd5 	bl	8082e6c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082ec2:	b005      	add	sp, #20
 8082ec4:	f85d fb04 	ldr.w	pc, [sp], #4

08082ec8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8082ec8:	2200      	movs	r2, #0
 8082eca:	7c00      	ldrb	r0, [r0, #16]
 8082ecc:	f7ff b8cc 	b.w	8082068 <HAL_I2C_Begin_Transmission>

08082ed0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8082ed0:	b2c9      	uxtb	r1, r1
 8082ed2:	f7ff bff9 	b.w	8082ec8 <_ZN7TwoWire17beginTransmissionEh>

08082ed6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082ed6:	2200      	movs	r2, #0
 8082ed8:	7c00      	ldrb	r0, [r0, #16]
 8082eda:	f7ff b8cd 	b.w	8082078 <HAL_I2C_End_Transmission>

08082ede <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082ede:	2100      	movs	r1, #0
 8082ee0:	7c00      	ldrb	r0, [r0, #16]
 8082ee2:	f7ff b8f9 	b.w	80820d8 <HAL_I2C_Is_Enabled>

08082ee6 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082ee6:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8082ee8:	2100      	movs	r1, #0
 8082eea:	7c00      	ldrb	r0, [r0, #16]
 8082eec:	f7ff f904 	bl	80820f8 <HAL_I2C_Acquire>
}
 8082ef0:	fab0 f080 	clz	r0, r0
 8082ef4:	0940      	lsrs	r0, r0, #5
 8082ef6:	bd08      	pop	{r3, pc}

08082ef8 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082ef8:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8082efa:	2100      	movs	r1, #0
 8082efc:	7c00      	ldrb	r0, [r0, #16]
 8082efe:	f7ff f903 	bl	8082108 <HAL_I2C_Release>
}
 8082f02:	fab0 f080 	clz	r0, r0
 8082f06:	0940      	lsrs	r0, r0, #5
 8082f08:	bd08      	pop	{r3, pc}

08082f0a <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8082f0a:	4700      	bx	r0

08082f0c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082f0e:	461c      	mov	r4, r3
 8082f10:	b085      	sub	sp, #20
 8082f12:	460e      	mov	r6, r1
 8082f14:	4617      	mov	r7, r2
 8082f16:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 8082f18:	f7ff f88e 	bl	8082038 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 8082f1c:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8082f1e:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082f20:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082f24:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082f26:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 8082f2a:	bfb4      	ite	lt
 8082f2c:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082f2e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082f32:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082f34:	bfa4      	itt	ge
 8082f36:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 8082f3a:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082f3c:	9300      	str	r3, [sp, #0]
 8082f3e:	4906      	ldr	r1, [pc, #24]	; (8082f58 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8082f40:	463b      	mov	r3, r7
 8082f42:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082f44:	bfa8      	it	ge
 8082f46:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082f4a:	f7ff f86d 	bl	8082028 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082f4e:	fab0 f080 	clz	r0, r0
 8082f52:	0940      	lsrs	r0, r0, #5
 8082f54:	b005      	add	sp, #20
 8082f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082f58:	08082f0b 	.word	0x08082f0b

08082f5c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8082f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082f5e:	4606      	mov	r6, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8082f60:	f7ff f86a 	bl	8082038 <HAL_Interrupts_Detach>
 8082f64:	4607      	mov	r7, r0
 8082f66:	b968      	cbnz	r0, 8082f84 <_Z15detachInterruptt+0x28>
        return false;
    }
    if (handlers[pin]) {
 8082f68:	4d08      	ldr	r5, [pc, #32]	; (8082f8c <_Z15detachInterruptt+0x30>)
 8082f6a:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8082f6e:	b15c      	cbz	r4, 8082f88 <_Z15detachInterruptt+0x2c>
 8082f70:	4620      	mov	r0, r4
 8082f72:	f7fd f97e 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8082f76:	2110      	movs	r1, #16
 8082f78:	4620      	mov	r0, r4
 8082f7a:	f001 f864 	bl	8084046 <_ZdlPvj>
        handlers[pin] = nullptr;
 8082f7e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
 8082f82:	e001      	b.n	8082f88 <_Z15detachInterruptt+0x2c>
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
        return false;
 8082f84:	2000      	movs	r0, #0
 8082f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (handlers[pin]) {
        delete handlers[pin];
        handlers[pin] = nullptr;
    }
    return true;
 8082f88:	2001      	movs	r0, #1
}
 8082f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082f8c:	2000031c 	.word	0x2000031c

08082f90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082f90:	4770      	bx	lr

08082f92 <_ZN9IPAddressD0Ev>:
 8082f92:	b510      	push	{r4, lr}
 8082f94:	4604      	mov	r4, r0
 8082f96:	2108      	movs	r1, #8
 8082f98:	f001 f855 	bl	8084046 <_ZdlPvj>
 8082f9c:	4620      	mov	r0, r4
 8082f9e:	bd10      	pop	{r4, pc}

08082fa0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082fa2:	460f      	mov	r7, r1
 8082fa4:	f100 0608 	add.w	r6, r0, #8
 8082fa8:	1d05      	adds	r5, r0, #4
 8082faa:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 8082fac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082fb0:	220a      	movs	r2, #10
 8082fb2:	4638      	mov	r0, r7
 8082fb4:	f000 f98b 	bl	80832ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082fb8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082fba:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082fbc:	d007      	beq.n	8082fce <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082fbe:	2c00      	cmp	r4, #0
 8082fc0:	d0f4      	beq.n	8082fac <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082fc2:	212e      	movs	r1, #46	; 0x2e
 8082fc4:	4638      	mov	r0, r7
 8082fc6:	f000 f969 	bl	808329c <_ZN5Print5printEc>
 8082fca:	4404      	add	r4, r0
 8082fcc:	e7ee      	b.n	8082fac <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082fce:	4620      	mov	r0, r4
 8082fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08082fd4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082fd4:	4a02      	ldr	r2, [pc, #8]	; (8082fe0 <_ZN9IPAddressC1Ev+0xc>)
 8082fd6:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082fd8:	2200      	movs	r2, #0
 8082fda:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082fdc:	4770      	bx	lr
 8082fde:	bf00      	nop
 8082fe0:	080863cc 	.word	0x080863cc

08082fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082fe4:	4a02      	ldr	r2, [pc, #8]	; (8082ff0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082fe6:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082fe8:	680a      	ldr	r2, [r1, #0]
 8082fea:	6042      	str	r2, [r0, #4]
}
 8082fec:	4770      	bx	lr
 8082fee:	bf00      	nop
 8082ff0:	080863cc 	.word	0x080863cc

08082ff4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082ff4:	4a01      	ldr	r2, [pc, #4]	; (8082ffc <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082ff6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082ff8:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082ffa:	4770      	bx	lr
 8082ffc:	080863cc 	.word	0x080863cc

08083000 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8083000:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8083002:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8083006:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808300a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808300e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8083012:	6041      	str	r1, [r0, #4]
 8083014:	bd10      	pop	{r4, pc}
	...

08083018 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8083018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808301a:	4d04      	ldr	r5, [pc, #16]	; (808302c <_ZN9IPAddressC1Ehhhh+0x14>)
 808301c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808301e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8083022:	9500      	str	r5, [sp, #0]
 8083024:	f7ff ffec 	bl	8083000 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8083028:	b003      	add	sp, #12
 808302a:	bd30      	pop	{r4, r5, pc}
 808302c:	080863cc 	.word	0x080863cc

08083030 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8083030:	4a01      	ldr	r2, [pc, #4]	; (8083038 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8083032:	4b02      	ldr	r3, [pc, #8]	; (808303c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8083034:	601a      	str	r2, [r3, #0]
 8083036:	4770      	bx	lr
 8083038:	0808644e 	.word	0x0808644e
 808303c:	200003d8 	.word	0x200003d8

08083040 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8083040:	2300      	movs	r3, #0
 8083042:	461a      	mov	r2, r3
 8083044:	6840      	ldr	r0, [r0, #4]
 8083046:	f7ff b9d1 	b.w	80823ec <network_connect>

0808304a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808304a:	2200      	movs	r2, #0
 808304c:	2102      	movs	r1, #2
 808304e:	6840      	ldr	r0, [r0, #4]
 8083050:	f7ff b9dc 	b.w	808240c <network_disconnect>

08083054 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8083054:	2200      	movs	r2, #0
 8083056:	4611      	mov	r1, r2
 8083058:	6840      	ldr	r0, [r0, #4]
 808305a:	f7ff b9cf 	b.w	80823fc <network_connecting>

0808305e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808305e:	2200      	movs	r2, #0
 8083060:	4611      	mov	r1, r2
 8083062:	6840      	ldr	r0, [r0, #4]
 8083064:	f7ff b9da 	b.w	808241c <network_ready>

08083068 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8083068:	2300      	movs	r3, #0
 808306a:	461a      	mov	r2, r3
 808306c:	4619      	mov	r1, r3
 808306e:	6840      	ldr	r0, [r0, #4]
 8083070:	f7ff b9dc 	b.w	808242c <network_on>

08083074 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8083074:	2300      	movs	r3, #0
 8083076:	461a      	mov	r2, r3
 8083078:	4619      	mov	r1, r3
 808307a:	6840      	ldr	r0, [r0, #4]
 808307c:	f7ff b9de 	b.w	808243c <network_off>

08083080 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8083080:	2200      	movs	r2, #0
 8083082:	f081 0101 	eor.w	r1, r1, #1
 8083086:	6840      	ldr	r0, [r0, #4]
 8083088:	f7ff b9e0 	b.w	808244c <network_listen>

0808308c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808308c:	2200      	movs	r2, #0
 808308e:	6840      	ldr	r0, [r0, #4]
 8083090:	f7ff b9ec 	b.w	808246c <network_set_listen_timeout>

08083094 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8083094:	2200      	movs	r2, #0
 8083096:	4611      	mov	r1, r2
 8083098:	6840      	ldr	r0, [r0, #4]
 808309a:	f7ff b9ef 	b.w	808247c <network_get_listen_timeout>

0808309e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808309e:	2200      	movs	r2, #0
 80830a0:	4611      	mov	r1, r2
 80830a2:	6840      	ldr	r0, [r0, #4]
 80830a4:	f7ff b9da 	b.w	808245c <network_listening>

080830a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80830a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80830aa:	4617      	mov	r7, r2
 80830ac:	b087      	sub	sp, #28
 80830ae:	4605      	mov	r5, r0
    IPAddress addr;
 80830b0:	a804      	add	r0, sp, #16
 80830b2:	f7ff ff8f 	bl	8082fd4 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80830b6:	2600      	movs	r6, #0
 80830b8:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80830ba:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80830bc:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80830c0:	f002 fa1f 	bl	8085502 <strlen>
 80830c4:	4b0a      	ldr	r3, [pc, #40]	; (80830f0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80830c6:	9600      	str	r6, [sp, #0]
 80830c8:	b281      	uxth	r1, r0
 80830ca:	685b      	ldr	r3, [r3, #4]
 80830cc:	4622      	mov	r2, r4
 80830ce:	4638      	mov	r0, r7
 80830d0:	f7fe feca 	bl	8081e68 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80830d4:	b120      	cbz	r0, 80830e0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80830d6:	4631      	mov	r1, r6
 80830d8:	4628      	mov	r0, r5
 80830da:	f7ff ff8b 	bl	8082ff4 <_ZN9IPAddressC1Em>
 80830de:	e003      	b.n	80830e8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80830e0:	4621      	mov	r1, r4
 80830e2:	4628      	mov	r0, r5
 80830e4:	f7ff ff7e 	bl	8082fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80830e8:	4628      	mov	r0, r5
 80830ea:	b007      	add	sp, #28
 80830ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80830ee:	bf00      	nop
 80830f0:	200002ec 	.word	0x200002ec

080830f4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80830f4:	4b02      	ldr	r3, [pc, #8]	; (8083100 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80830f6:	4a03      	ldr	r2, [pc, #12]	; (8083104 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80830f8:	601a      	str	r2, [r3, #0]
 80830fa:	2200      	movs	r2, #0
 80830fc:	605a      	str	r2, [r3, #4]
 80830fe:	4770      	bx	lr
 8083100:	200003dc 	.word	0x200003dc
 8083104:	080864b8 	.word	0x080864b8

08083108 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8083108:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808310a:	f000 ff59 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808310e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8083112:	f7ff bee8 	b.w	8082ee6 <_ZN7TwoWire4lockEv>

08083116 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8083116:	b510      	push	{r4, lr}
 8083118:	4604      	mov	r4, r0
    lock_(_lock)
 808311a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808311c:	b109      	cbz	r1, 8083122 <_ZN4PMICC1Eb+0xc>
        lock();
 808311e:	f7ff fff3 	bl	8083108 <_ZN4PMIC4lockEv>
    }
}
 8083122:	4620      	mov	r0, r4
 8083124:	bd10      	pop	{r4, pc}

08083126 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8083126:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083128:	f000 ff4a 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808312c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8083130:	f7ff bee2 	b.w	8082ef8 <_ZN7TwoWire6unlockEv>

08083134 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083134:	b510      	push	{r4, lr}
{
    if (lock_) {
 8083136:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8083138:	4604      	mov	r4, r0
{
    if (lock_) {
 808313a:	b10b      	cbz	r3, 8083140 <_ZN4PMICD1Ev+0xc>
        unlock();
 808313c:	f7ff fff3 	bl	8083126 <_ZN4PMIC6unlockEv>
    }
}
 8083140:	4620      	mov	r0, r4
 8083142:	bd10      	pop	{r4, pc}

08083144 <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8083144:	b510      	push	{r4, lr}
 8083146:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8083148:	6800      	ldr	r0, [r0, #0]
 808314a:	f7ff ffec 	bl	8083126 <_ZN4PMIC6unlockEv>
 808314e:	4620      	mov	r0, r4
 8083150:	bd10      	pop	{r4, pc}

08083152 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8083152:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8083154:	ac02      	add	r4, sp, #8
 8083156:	460d      	mov	r5, r1
 8083158:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808315c:	f7ff ffd4 	bl	8083108 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083160:	f000 ff2e 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8083164:	216b      	movs	r1, #107	; 0x6b
 8083166:	f7ff feb3 	bl	8082ed0 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808316a:	f000 ff29 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808316e:	6803      	ldr	r3, [r0, #0]
 8083170:	4629      	mov	r1, r5
 8083172:	689b      	ldr	r3, [r3, #8]
 8083174:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083176:	f000 ff23 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808317a:	2101      	movs	r1, #1
 808317c:	f7ff feab 	bl	8082ed6 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8083180:	f000 ff1e 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8083184:	2301      	movs	r3, #1
 8083186:	461a      	mov	r2, r3
 8083188:	216b      	movs	r1, #107	; 0x6b
 808318a:	f7ff fe8b 	bl	8082ea4 <_ZN7TwoWire11requestFromEhjh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808318e:	f000 ff17 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8083192:	6803      	ldr	r3, [r0, #0]
 8083194:	695b      	ldr	r3, [r3, #20]
 8083196:	4798      	blx	r3
 8083198:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808319a:	4620      	mov	r0, r4
 808319c:	f7ff ffd2 	bl	8083144 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80831a0:	b2e8      	uxtb	r0, r5
 80831a2:	b003      	add	sp, #12
 80831a4:	bd30      	pop	{r4, r5, pc}

080831a6 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 80831a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80831a8:	ac02      	add	r4, sp, #8
 80831aa:	4615      	mov	r5, r2
 80831ac:	460e      	mov	r6, r1
 80831ae:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80831b2:	f7ff ffa9 	bl	8083108 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80831b6:	f000 ff03 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80831ba:	216b      	movs	r1, #107	; 0x6b
 80831bc:	f7ff fe88 	bl	8082ed0 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80831c0:	f000 fefe 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80831c4:	6803      	ldr	r3, [r0, #0]
 80831c6:	4631      	mov	r1, r6
 80831c8:	689b      	ldr	r3, [r3, #8]
 80831ca:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80831cc:	f000 fef8 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80831d0:	6803      	ldr	r3, [r0, #0]
 80831d2:	4629      	mov	r1, r5
 80831d4:	689b      	ldr	r3, [r3, #8]
 80831d6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80831d8:	f000 fef2 	bl	8083fc0 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80831dc:	2101      	movs	r1, #1
 80831de:	f7ff fe7a 	bl	8082ed6 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80831e2:	4620      	mov	r0, r4
 80831e4:	f7ff ffae 	bl	8083144 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80831e8:	b002      	add	sp, #8
 80831ea:	bd70      	pop	{r4, r5, r6, pc}

080831ec <_ZN4PMIC15disableChargingEv>:
 * Function Name  : disableCharging
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
 80831ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80831ee:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80831f0:	ac02      	add	r4, sp, #8
 80831f2:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80831f6:	f7ff ff87 	bl	8083108 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 80831fa:	2101      	movs	r1, #1
 80831fc:	4628      	mov	r0, r5
 80831fe:	f7ff ffa8 	bl	8083152 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
 8083202:	2101      	movs	r1, #1
 8083204:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
 8083208:	4628      	mov	r0, r5
 808320a:	f7ff ffcc 	bl	80831a6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableCharging() {
    std::lock_guard<PMIC> l(*this);
 808320e:	4620      	mov	r0, r4
 8083210:	f7ff ff98 	bl	8083144 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
    return 1;
}
 8083214:	2001      	movs	r0, #1
 8083216:	b003      	add	sp, #12
 8083218:	bd30      	pop	{r4, r5, pc}

0808321a <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 808321a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808321c:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808321e:	ac02      	add	r4, sp, #8
 8083220:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8083224:	f7ff ff70 	bl	8083108 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8083228:	2101      	movs	r1, #1
 808322a:	4628      	mov	r0, r5
 808322c:	f7ff ff91 	bl	8083152 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8083230:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8083234:	f042 0210 	orr.w	r2, r2, #16
 8083238:	2101      	movs	r1, #1
 808323a:	4628      	mov	r0, r5
 808323c:	f7ff ffb3 	bl	80831a6 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8083240:	4620      	mov	r0, r4
 8083242:	f7ff ff7f 	bl	8083144 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8083246:	2001      	movs	r0, #1
 8083248:	b003      	add	sp, #12
 808324a:	bd30      	pop	{r4, r5, pc}

0808324c <_ZN4PMIC14enableChargingEv>:
 808324c:	f7ff bfe5 	b.w	808321a <_ZN4PMIC10disableOTGEv>

08083250 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8083250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083252:	4606      	mov	r6, r0
 8083254:	460d      	mov	r5, r1
 8083256:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8083258:	2400      	movs	r4, #0
  while (size--) {
 808325a:	42bd      	cmp	r5, r7
 808325c:	d00c      	beq.n	8083278 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808325e:	6833      	ldr	r3, [r6, #0]
 8083260:	f815 1b01 	ldrb.w	r1, [r5], #1
 8083264:	689b      	ldr	r3, [r3, #8]
 8083266:	4630      	mov	r0, r6
 8083268:	4798      	blx	r3
     if (chunk>=0)
 808326a:	2800      	cmp	r0, #0
 808326c:	db01      	blt.n	8083272 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808326e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8083270:	e7f3      	b.n	808325a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8083272:	2c00      	cmp	r4, #0
 8083274:	bf08      	it	eq
 8083276:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8083278:	4620      	mov	r0, r4
 808327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808327c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 808327c:	b570      	push	{r4, r5, r6, lr}
 808327e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8083280:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8083282:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8083284:	b149      	cbz	r1, 808329a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8083286:	f002 f93c 	bl	8085502 <strlen>
 808328a:	682b      	ldr	r3, [r5, #0]
 808328c:	4602      	mov	r2, r0
 808328e:	4621      	mov	r1, r4
 8083290:	4628      	mov	r0, r5
    }
 8083292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8083296:	68db      	ldr	r3, [r3, #12]
 8083298:	4718      	bx	r3
    }
 808329a:	bd70      	pop	{r4, r5, r6, pc}

0808329c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808329c:	6803      	ldr	r3, [r0, #0]
 808329e:	689b      	ldr	r3, [r3, #8]
 80832a0:	4718      	bx	r3

080832a2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80832a2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80832a4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80832a6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80832a8:	f7ff fff8 	bl	808329c <_ZN5Print5printEc>
  n += print('\n');
 80832ac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80832ae:	4604      	mov	r4, r0
  n += print('\n');
 80832b0:	4628      	mov	r0, r5
 80832b2:	f7ff fff3 	bl	808329c <_ZN5Print5printEc>
  return n;
}
 80832b6:	4420      	add	r0, r4
 80832b8:	bd38      	pop	{r3, r4, r5, pc}

080832ba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80832ba:	b538      	push	{r3, r4, r5, lr}
 80832bc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80832be:	f7ff ffdd 	bl	808327c <_ZN5Print5writeEPKc>
 80832c2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80832c4:	4628      	mov	r0, r5
 80832c6:	f7ff ffec 	bl	80832a2 <_ZN5Print7printlnEv>
  return n;
}
 80832ca:	4420      	add	r0, r4
 80832cc:	bd38      	pop	{r3, r4, r5, pc}

080832ce <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80832ce:	2a01      	cmp	r2, #1
 80832d0:	bf98      	it	ls
 80832d2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80832d4:	b530      	push	{r4, r5, lr}
 80832d6:	460b      	mov	r3, r1
 80832d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80832da:	2100      	movs	r1, #0
 80832dc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80832e0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80832e4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80832e8:	fb05 3312 	mls	r3, r5, r2, r3
 80832ec:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80832ee:	2b09      	cmp	r3, #9
 80832f0:	bf94      	ite	ls
 80832f2:	3330      	addls	r3, #48	; 0x30
 80832f4:	3337      	addhi	r3, #55	; 0x37
 80832f6:	b2db      	uxtb	r3, r3
 80832f8:	4621      	mov	r1, r4
 80832fa:	f804 3901 	strb.w	r3, [r4], #-1
 80832fe:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8083300:	2d00      	cmp	r5, #0
 8083302:	d1ef      	bne.n	80832e4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8083304:	f7ff ffba 	bl	808327c <_ZN5Print5writeEPKc>
}
 8083308:	b00b      	add	sp, #44	; 0x2c
 808330a:	bd30      	pop	{r4, r5, pc}

0808330c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808330c:	b510      	push	{r4, lr}
 808330e:	4604      	mov	r4, r0
 8083310:	f7fc ffaf 	bl	8080272 <_ZNSt14_Function_baseD1Ev>
 8083314:	4620      	mov	r0, r4
 8083316:	bd10      	pop	{r4, pc}

08083318 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083318:	4803      	ldr	r0, [pc, #12]	; (8083328 <_GLOBAL__sub_I_RGB+0x10>)
 808331a:	2300      	movs	r3, #0
 808331c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808331e:	4a03      	ldr	r2, [pc, #12]	; (808332c <_GLOBAL__sub_I_RGB+0x14>)
 8083320:	4903      	ldr	r1, [pc, #12]	; (8083330 <_GLOBAL__sub_I_RGB+0x18>)
 8083322:	f000 be8b 	b.w	808403c <__aeabi_atexit>
 8083326:	bf00      	nop
 8083328:	200003e4 	.word	0x200003e4
 808332c:	20000134 	.word	0x20000134
 8083330:	0808330d 	.word	0x0808330d

08083334 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8083334:	b570      	push	{r4, r5, r6, lr}
 8083336:	4604      	mov	r4, r0
 8083338:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 808333a:	2500      	movs	r5, #0
 808333c:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8083340:	f7fe fdda 	bl	8081ef8 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 8083344:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 8083346:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 8083348:	f7fe feee 	bl	8082128 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808334c:	6065      	str	r5, [r4, #4]
}
 808334e:	4620      	mov	r0, r4
 8083350:	bd70      	pop	{r4, r5, r6, pc}

08083352 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 8083352:	7800      	ldrb	r0, [r0, #0]
 8083354:	f7fe bef0 	b.w	8082138 <HAL_SPI_Is_Enabled>

08083358 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8083358:	b510      	push	{r4, lr}
 808335a:	4604      	mov	r4, r0
{
	free(buffer);
 808335c:	6800      	ldr	r0, [r0, #0]
 808335e:	f7ff f89d 	bl	808249c <free>
}
 8083362:	4620      	mov	r0, r4
 8083364:	bd10      	pop	{r4, pc}

08083366 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8083366:	b510      	push	{r4, lr}
 8083368:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808336a:	6800      	ldr	r0, [r0, #0]
 808336c:	b108      	cbz	r0, 8083372 <_ZN6String10invalidateEv+0xc>
 808336e:	f7ff f895 	bl	808249c <free>
	buffer = NULL;
 8083372:	2300      	movs	r3, #0
 8083374:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8083376:	60a3      	str	r3, [r4, #8]
 8083378:	6063      	str	r3, [r4, #4]
 808337a:	bd10      	pop	{r4, pc}

0808337c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808337c:	b538      	push	{r3, r4, r5, lr}
 808337e:	4604      	mov	r4, r0
 8083380:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8083382:	6800      	ldr	r0, [r0, #0]
 8083384:	3101      	adds	r1, #1
 8083386:	f7ff f891 	bl	80824ac <realloc>
	if (newbuffer) {
 808338a:	b110      	cbz	r0, 8083392 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808338c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8083390:	2001      	movs	r0, #1
	}
	return 0;
}
 8083392:	bd38      	pop	{r3, r4, r5, pc}

08083394 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083394:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8083396:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8083398:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808339a:	b113      	cbz	r3, 80833a2 <_ZN6String7reserveEj+0xe>
 808339c:	6843      	ldr	r3, [r0, #4]
 808339e:	428b      	cmp	r3, r1
 80833a0:	d207      	bcs.n	80833b2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80833a2:	4620      	mov	r0, r4
 80833a4:	f7ff ffea 	bl	808337c <_ZN6String12changeBufferEj>
 80833a8:	b120      	cbz	r0, 80833b4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80833aa:	68a3      	ldr	r3, [r4, #8]
 80833ac:	b90b      	cbnz	r3, 80833b2 <_ZN6String7reserveEj+0x1e>
 80833ae:	6822      	ldr	r2, [r4, #0]
 80833b0:	7013      	strb	r3, [r2, #0]
 80833b2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80833b4:	bd10      	pop	{r4, pc}

080833b6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80833b6:	b570      	push	{r4, r5, r6, lr}
 80833b8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80833ba:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80833bc:	4604      	mov	r4, r0
 80833be:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80833c0:	f7ff ffe8 	bl	8083394 <_ZN6String7reserveEj>
 80833c4:	b918      	cbnz	r0, 80833ce <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80833c6:	4620      	mov	r0, r4
 80833c8:	f7ff ffcd 	bl	8083366 <_ZN6String10invalidateEv>
		return *this;
 80833cc:	e009      	b.n	80833e2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80833ce:	462a      	mov	r2, r5
 80833d0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80833d2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80833d4:	6820      	ldr	r0, [r4, #0]
 80833d6:	f002 f81b 	bl	8085410 <memcpy>
	buffer[len] = 0;
 80833da:	6822      	ldr	r2, [r4, #0]
 80833dc:	68a3      	ldr	r3, [r4, #8]
 80833de:	2100      	movs	r1, #0
 80833e0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80833e2:	4620      	mov	r0, r4
 80833e4:	bd70      	pop	{r4, r5, r6, pc}

080833e6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80833e6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80833e8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80833ea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80833ec:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80833ee:	6043      	str	r3, [r0, #4]
	len = 0;
 80833f0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80833f2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80833f4:	460d      	mov	r5, r1
 80833f6:	b139      	cbz	r1, 8083408 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80833f8:	4608      	mov	r0, r1
 80833fa:	f002 f882 	bl	8085502 <strlen>
 80833fe:	4629      	mov	r1, r5
 8083400:	4602      	mov	r2, r0
 8083402:	4620      	mov	r0, r4
 8083404:	f7ff ffd7 	bl	80833b6 <_ZN6String4copyEPKcj>
}
 8083408:	4620      	mov	r0, r4
 808340a:	bd38      	pop	{r3, r4, r5, pc}

0808340c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808340c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808340e:	b510      	push	{r4, lr}
 8083410:	460b      	mov	r3, r1
 8083412:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8083414:	d007      	beq.n	8083426 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8083416:	6809      	ldr	r1, [r1, #0]
 8083418:	b119      	cbz	r1, 8083422 <_ZN6StringaSERKS_+0x16>
 808341a:	689a      	ldr	r2, [r3, #8]
 808341c:	f7ff ffcb 	bl	80833b6 <_ZN6String4copyEPKcj>
 8083420:	e001      	b.n	8083426 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8083422:	f7ff ffa0 	bl	8083366 <_ZN6String10invalidateEv>

	return *this;
}
 8083426:	4620      	mov	r0, r4
 8083428:	bd10      	pop	{r4, pc}

0808342a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808342a:	b510      	push	{r4, lr}
 808342c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808342e:	2300      	movs	r3, #0
 8083430:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083432:	6043      	str	r3, [r0, #4]
	len = 0;
 8083434:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083436:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8083438:	f7ff ffe8 	bl	808340c <_ZN6StringaSERKS_>
}
 808343c:	4620      	mov	r0, r4
 808343e:	bd10      	pop	{r4, pc}

08083440 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8083440:	b538      	push	{r3, r4, r5, lr}
 8083442:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8083444:	460c      	mov	r4, r1
 8083446:	b141      	cbz	r1, 808345a <_ZN6StringaSEPKc+0x1a>
 8083448:	4608      	mov	r0, r1
 808344a:	f002 f85a 	bl	8085502 <strlen>
 808344e:	4621      	mov	r1, r4
 8083450:	4602      	mov	r2, r0
 8083452:	4628      	mov	r0, r5
 8083454:	f7ff ffaf 	bl	80833b6 <_ZN6String4copyEPKcj>
 8083458:	e001      	b.n	808345e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808345a:	f7ff ff84 	bl	8083366 <_ZN6String10invalidateEv>

	return *this;
}
 808345e:	4628      	mov	r0, r5
 8083460:	bd38      	pop	{r3, r4, r5, pc}

08083462 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8083462:	b510      	push	{r4, lr}
 8083464:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083466:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8083468:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808346a:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808346c:	6063      	str	r3, [r4, #4]
	len = 0;
 808346e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8083470:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8083472:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8083474:	a901      	add	r1, sp, #4
 8083476:	f000 fbe6 	bl	8083c46 <itoa>
	*this = buf;
 808347a:	a901      	add	r1, sp, #4
 808347c:	4620      	mov	r0, r4
 808347e:	f7ff ffdf 	bl	8083440 <_ZN6StringaSEPKc>
}
 8083482:	4620      	mov	r0, r4
 8083484:	b00a      	add	sp, #40	; 0x28
 8083486:	bd10      	pop	{r4, pc}

08083488 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8083488:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808348a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808348c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808348e:	b912      	cbnz	r2, 8083496 <_ZNK6String6equalsEPKc+0xe>
 8083490:	b919      	cbnz	r1, 808349a <_ZNK6String6equalsEPKc+0x12>
 8083492:	2001      	movs	r0, #1
 8083494:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8083496:	b911      	cbnz	r1, 808349e <_ZNK6String6equalsEPKc+0x16>
 8083498:	6803      	ldr	r3, [r0, #0]
 808349a:	7818      	ldrb	r0, [r3, #0]
 808349c:	e002      	b.n	80834a4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808349e:	6800      	ldr	r0, [r0, #0]
 80834a0:	f002 f801 	bl	80854a6 <strcmp>
 80834a4:	fab0 f080 	clz	r0, r0
 80834a8:	0940      	lsrs	r0, r0, #5
}
 80834aa:	bd08      	pop	{r3, pc}

080834ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80834ac:	b510      	push	{r4, lr}
 80834ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80834b0:	6800      	ldr	r0, [r0, #0]
 80834b2:	b118      	cbz	r0, 80834bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80834b4:	f7fe fff2 	bl	808249c <free>
            wakeupSource_ = nullptr;
 80834b8:	2300      	movs	r3, #0
 80834ba:	6023      	str	r3, [r4, #0]
 80834bc:	bd10      	pop	{r4, pc}

080834be <_ZN17SystemSleepResultaSEOS_>:
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80834be:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 80834c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80834c4:	460d      	mov	r5, r1
        error_ = result.error_;
 80834c6:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 80834c8:	460b      	mov	r3, r1
 80834ca:	f853 2f06 	ldr.w	r2, [r3, #6]!
            wakeupSource_ = result.wakeupSource_;
            result.wakeupSource_ = nullptr;
        }
    }

    SystemSleepResult& operator=(SystemSleepResult&& result) {
 80834ce:	4604      	mov	r4, r0
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 80834d0:	f8c0 2006 	str.w	r2, [r0, #6]
 80834d4:	889b      	ldrh	r3, [r3, #4]
 80834d6:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 80834d8:	f7ff ffe8 	bl	80834ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (result.wakeupSource_) {
 80834dc:	682b      	ldr	r3, [r5, #0]
 80834de:	b113      	cbz	r3, 80834e6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 80834e0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 80834e2:	2300      	movs	r3, #0
 80834e4:	602b      	str	r3, [r5, #0]
        }
        return *this;
    }
 80834e6:	4620      	mov	r0, r4
 80834e8:	bd38      	pop	{r3, r4, r5, pc}

080834ea <_ZN17SystemSleepResult13toSleepResultEv>:
    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
 80834ea:	f9b1 3004 	ldrsh.w	r3, [r1, #4]

    system_error_t error() const {
        return error_;
    }

    SleepResult toSleepResult() {
 80834ee:	b510      	push	{r4, lr}
        if (error_ || wakeupSource_) {
 80834f0:	b90b      	cbnz	r3, 80834f6 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
 80834f2:	680a      	ldr	r2, [r1, #0]
 80834f4:	b19a      	cbz	r2, 808351e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
 80834f6:	680c      	ldr	r4, [r1, #0]
    hal_wakeup_source_base_t** halWakeupSource() {
        return &wakeupSource_;
    }

    SystemSleepWakeupReason wakeupReason() const {
        if (wakeupSource_) {
 80834f8:	b15c      	cbz	r4, 8083512 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
        return error_;
    }

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
 80834fa:	88a2      	ldrh	r2, [r4, #4]
 80834fc:	2a01      	cmp	r2, #1
 80834fe:	d003      	beq.n	8083508 <_ZN17SystemSleepResult13toSleepResultEv+0x1e>
 8083500:	2a04      	cmp	r2, #4
 8083502:	d106      	bne.n	8083512 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
                    break;
                }
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8083504:	2202      	movs	r2, #2
 8083506:	e005      	b.n	8083514 <_ZN17SystemSleepResult13toSleepResultEv+0x2a>
        }
    }

    pin_t wakeupPin() const {
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8083508:	89a4      	ldrh	r4, [r4, #12]

    SleepResult toSleepResult() {
        if (error_ || wakeupSource_) {
            switch (wakeupReason()) {
                case SystemSleepWakeupReason::BY_GPIO: {
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808350a:	718a      	strb	r2, [r1, #6]
 808350c:	810b      	strh	r3, [r1, #8]
 808350e:	814c      	strh	r4, [r1, #10]
                    break;
 8083510:	e005      	b.n	808351e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
                case SystemSleepWakeupReason::BY_RTC: {
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
                    break;
                }
                default: {
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8083512:	2204      	movs	r2, #4
 8083514:	810b      	strh	r3, [r1, #8]
 8083516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808351a:	718a      	strb	r2, [r1, #6]
 808351c:	814b      	strh	r3, [r1, #10]
                    break;
                }
            }
        }
        return compatResult_;
 808351e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8083522:	6003      	str	r3, [r0, #0]
 8083524:	888b      	ldrh	r3, [r1, #4]
 8083526:	8083      	strh	r3, [r0, #4]
    }
 8083528:	bd10      	pop	{r4, pc}
	...

0808352c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 808352c:	b538      	push	{r3, r4, r5, lr}
 808352e:	460c      	mov	r4, r1
 8083530:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 8083532:	f7ff ffbb 	bl	80834ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        if (source) {
 8083536:	b144      	cbz	r4, 808354a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 8083538:	8820      	ldrh	r0, [r4, #0]
 808353a:	f7fe ffa7 	bl	808248c <malloc>
 808353e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 8083540:	b128      	cbz	r0, 808354e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
 8083542:	8822      	ldrh	r2, [r4, #0]
 8083544:	4621      	mov	r1, r4
 8083546:	f001 ff63 	bl	8085410 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
 808354a:	2000      	movs	r0, #0
 808354c:	bd38      	pop	{r3, r4, r5, pc}
        if (source) {
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
            if (wakeupSource_) {
                memcpy(wakeupSource_, source, source->size);
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
 808354e:	4801      	ldr	r0, [pc, #4]	; (8083554 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
            }
        }
        return SYSTEM_ERROR_NONE;
    }
 8083550:	bd38      	pop	{r3, r4, r5, pc}
 8083552:	bf00      	nop
 8083554:	fffffefc 	.word	0xfffffefc

08083558 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8083558:	4601      	mov	r1, r0
 808355a:	2200      	movs	r2, #0
 808355c:	208c      	movs	r0, #140	; 0x8c
 808355e:	f7fe bcf3 	b.w	8081f48 <HAL_Core_System_Reset_Ex>

08083562 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8083562:	2000      	movs	r0, #0
 8083564:	f7ff bff8 	b.w	8083558 <_ZN11SystemClass5resetEm>

08083568 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration>:
void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
 8083568:	b5f0      	push	{r4, r5, r6, r7, lr}
 808356a:	4d30      	ldr	r5, [pc, #192]	; (808362c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 808356c:	7d0b      	ldrb	r3, [r1, #20]
 808356e:	4604      	mov	r4, r0
 8083570:	b08b      	sub	sp, #44	; 0x2c
 8083572:	4608      	mov	r0, r1
 8083574:	1daf      	adds	r7, r5, #6
 8083576:	b313      	cbz	r3, 80835be <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    particle::EnumFlags<SystemSleepFlag> sleepFlags() const {
        return particle::EnumFlags<SystemSleepFlag>::fromUnderlying(config_->flags);
    }

    SystemSleepMode sleepMode() const {
        return static_cast<SystemSleepMode>(config_->mode);
 8083578:	680b      	ldr	r3, [r1, #0]
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 808357a:	791b      	ldrb	r3, [r3, #4]
 808357c:	b1fb      	cbz	r3, 80835be <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x56>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808357e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8083582:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 8083584:	a902      	add	r1, sp, #8
 8083586:	3004      	adds	r0, #4
 8083588:	9202      	str	r2, [sp, #8]
 808358a:	f8ad 200c 	strh.w	r2, [sp, #12]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 808358e:	f88d 200e 	strb.w	r2, [sp, #14]
 8083592:	f8ad 2010 	strh.w	r2, [sp, #16]
 8083596:	f8ad 3012 	strh.w	r3, [sp, #18]
 808359a:	f7fe fecd 	bl	8082338 <system_sleep_ext>
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 808359e:	ab0a      	add	r3, sp, #40	; 0x28
 80835a0:	f853 2d1a 	ldr.w	r2, [r3, #-26]!
        result.setError(static_cast<system_error_t>(ret));
 80835a4:	b200      	sxth	r0, r0
 80835a6:	889b      	ldrh	r3, [r3, #4]
    ~SystemSleepResult() {
        freeWakeupSourceMemory();
    }

    void setError(system_error_t error, bool clear = false) {
        error_ = error;
 80835a8:	f8ad 000c 	strh.w	r0, [sp, #12]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
 80835ac:	80a8      	strh	r0, [r5, #4]
        compatResult_ = result.compatResult_;
 80835ae:	f8c5 2006 	str.w	r2, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
 80835b2:	9902      	ldr	r1, [sp, #8]
        copyWakeupSource(result.wakeupSource_);
    }

    SystemSleepResult& operator=(const SystemSleepResult& result) {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 80835b4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 80835b6:	4628      	mov	r0, r5
 80835b8:	f7ff ffb8 	bl	808352c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
 80835bc:	e01c      	b.n	80835f8 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0x90>
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SystemSleepResult SystemClass::sleep(const SystemSleepConfiguration& config) {
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
 80835be:	2320      	movs	r3, #32
 80835c0:	9302      	str	r3, [sp, #8]
 80835c2:	4b1b      	ldr	r3, [pc, #108]	; (8083630 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc8>)
 80835c4:	2600      	movs	r6, #0
 80835c6:	9300      	str	r3, [sp, #0]
 80835c8:	491a      	ldr	r1, [pc, #104]	; (8083634 <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xcc>)
 80835ca:	4633      	mov	r3, r6
 80835cc:	2032      	movs	r0, #50	; 0x32
 80835ce:	aa02      	add	r2, sp, #8
 80835d0:	9603      	str	r6, [sp, #12]
 80835d2:	f7fe fe39 	bl	8082248 <log_message>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80835d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80835da:	f8ad 3012 	strh.w	r3, [sp, #18]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
 80835de:	f64f 63f2 	movw	r3, #65266	; 0xfef2
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 80835e2:	a902      	add	r1, sp, #8
 80835e4:	4811      	ldr	r0, [pc, #68]	; (808362c <_ZN11SystemClass5sleepERK24SystemSleepConfiguration+0xc4>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80835e6:	9602      	str	r6, [sp, #8]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80835e8:	f88d 600e 	strb.w	r6, [sp, #14]
 80835ec:	f8ad 6010 	strh.w	r6, [sp, #16]
        error_ = error;
    }

    SystemSleepResult(system_error_t error)
            : SystemSleepResult() {
        error_ = error;
 80835f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80835f4:	f7ff ff63 	bl	80834be <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80835f8:	a802      	add	r0, sp, #8
 80835fa:	f7ff ff57 	bl	80834ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80835fe:	2300      	movs	r3, #0
 8083600:	6023      	str	r3, [r4, #0]
 8083602:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083604:	71a3      	strb	r3, [r4, #6]
 8083606:	8123      	strh	r3, [r4, #8]
 8083608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808360c:	8163      	strh	r3, [r4, #10]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
 808360e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        compatResult_ = result.compatResult_;
        copyWakeupSource(result.wakeupSource_);
 8083612:	6829      	ldr	r1, [r5, #0]
    }

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
 8083614:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 8083616:	683b      	ldr	r3, [r7, #0]
        copyWakeupSource(result.wakeupSource_);
 8083618:	4620      	mov	r0, r4

    // Copy constructor
    SystemSleepResult(const SystemSleepResult& result)
            : SystemSleepResult() {
        error_ = result.error_;
        compatResult_ = result.compatResult_;
 808361a:	f8c4 3006 	str.w	r3, [r4, #6]
 808361e:	88bb      	ldrh	r3, [r7, #4]
 8083620:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 8083622:	f7ff ff83 	bl	808352c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
        result.setError(static_cast<system_error_t>(ret));
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 8083626:	4620      	mov	r0, r4
 8083628:	b00b      	add	sp, #44	; 0x2c
 808362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808362c:	200003f4 	.word	0x200003f4
 8083630:	080864eb 	.word	0x080864eb
 8083634:	080864e4 	.word	0x080864e4

08083638 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083638:	b530      	push	{r4, r5, lr}
 808363a:	4604      	mov	r4, r0
 808363c:	b085      	sub	sp, #20
 808363e:	4608      	mov	r0, r1
 8083640:	4611      	mov	r1, r2
 8083642:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083644:	2300      	movs	r3, #0
 8083646:	f7fe fe31 	bl	80822ac <system_sleep>
    }

    SystemSleepResult(SleepResult r)
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE),
              compatResult_(r) {
 808364a:	2300      	movs	r3, #0
 808364c:	9301      	str	r3, [sp, #4]
 808364e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8083652:	f88d 300a 	strb.w	r3, [sp, #10]
 8083656:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 808365a:	4d09      	ldr	r5, [pc, #36]	; (8083680 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 808365c:	a901      	add	r1, sp, #4
 808365e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8083662:	4628      	mov	r0, r5
 8083664:	f8ad 300e 	strh.w	r3, [sp, #14]
 8083668:	f7ff ff29 	bl	80834be <_ZN17SystemSleepResultaSEOS_>
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 808366c:	a801      	add	r0, sp, #4
 808366e:	f7ff ff1d 	bl	80834ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
        }
        return compatResult_;
    }

    operator SleepResult() {
        return toSleepResult();
 8083672:	4620      	mov	r0, r4
 8083674:	4629      	mov	r1, r5
 8083676:	f7ff ff38 	bl	80834ea <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 808367a:	4620      	mov	r0, r4
 808367c:	b005      	add	sp, #20
 808367e:	bd30      	pop	{r4, r5, pc}
 8083680:	200003f4 	.word	0x200003f4

08083684 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083684:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8083688:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 808368a:	4c08      	ldr	r4, [pc, #32]	; (80836ac <_GLOBAL__sub_I_System+0x28>)
 808368c:	2000      	movs	r0, #0
 808368e:	6020      	str	r0, [r4, #0]
 8083690:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 8083692:	71a0      	strb	r0, [r4, #6]
 8083694:	8120      	strh	r0, [r4, #8]
 8083696:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8083698:	f7fe fdf8 	bl	808228c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 808369c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808369e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80836a2:	4a03      	ldr	r2, [pc, #12]	; (80836b0 <_GLOBAL__sub_I_System+0x2c>)
 80836a4:	4903      	ldr	r1, [pc, #12]	; (80836b4 <_GLOBAL__sub_I_System+0x30>)
 80836a6:	f000 bcc9 	b.w	808403c <__aeabi_atexit>
 80836aa:	bf00      	nop
 80836ac:	200003f4 	.word	0x200003f4
 80836b0:	20000134 	.word	0x20000134
 80836b4:	08080263 	.word	0x08080263

080836b8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80836b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80836ba:	4b14      	ldr	r3, [pc, #80]	; (808370c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80836bc:	4f14      	ldr	r7, [pc, #80]	; (8083710 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80836be:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80836c0:	4b14      	ldr	r3, [pc, #80]	; (8083714 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80836c2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80836c4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80836c6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80836c8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80836ca:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80836cc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80836ce:	d01b      	beq.n	8083708 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80836d0:	a80a      	add	r0, sp, #40	; 0x28
 80836d2:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80836d6:	f001 fda3 	bl	8085220 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80836da:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80836dc:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80836de:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80836e0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80836e4:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80836e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80836e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80836ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80836ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80836ee:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80836f2:	4c09      	ldr	r4, [pc, #36]	; (8083718 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80836f4:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80836f8:	ad01      	add	r5, sp, #4
 80836fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80836fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80836fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8083702:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083704:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8083708:	b00b      	add	sp, #44	; 0x2c
 808370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808370c:	20000430 	.word	0x20000430
 8083710:	2000042c 	.word	0x2000042c
 8083714:	20000428 	.word	0x20000428
 8083718:	20000400 	.word	0x20000400

0808371c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808371c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808371e:	2000      	movs	r0, #0
 8083720:	f7fe fe54 	bl	80823cc <spark_sync_time_pending>
 8083724:	b128      	cbz	r0, 8083732 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083726:	f7fe fe39 	bl	808239c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808372a:	f080 0001 	eor.w	r0, r0, #1
 808372e:	b2c0      	uxtb	r0, r0
 8083730:	bd08      	pop	{r3, pc}
 8083732:	2001      	movs	r0, #1
    }
 8083734:	bd08      	pop	{r3, pc}
	...

08083738 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 8083738:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808373a:	f7ff ffbd 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
 808373e:	4b01      	ldr	r3, [pc, #4]	; (8083744 <_ZN9TimeClass4hourEl+0xc>)
 8083740:	6898      	ldr	r0, [r3, #8]
 8083742:	bd08      	pop	{r3, pc}
 8083744:	20000400 	.word	0x20000400

08083748 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 8083748:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808374a:	f7ff ffb5 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
 808374e:	4b01      	ldr	r3, [pc, #4]	; (8083754 <_ZN9TimeClass3dayEl+0xc>)
 8083750:	68d8      	ldr	r0, [r3, #12]
 8083752:	bd08      	pop	{r3, pc}
 8083754:	20000400 	.word	0x20000400

08083758 <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 8083758:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808375a:	f7ff ffad 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 808375e:	4b02      	ldr	r3, [pc, #8]	; (8083768 <_ZN9TimeClass7weekdayEl+0x10>)
 8083760:	6998      	ldr	r0, [r3, #24]
}
 8083762:	3001      	adds	r0, #1
 8083764:	bd08      	pop	{r3, pc}
 8083766:	bf00      	nop
 8083768:	20000400 	.word	0x20000400

0808376c <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808376c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808376e:	f7ff ffa3 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8083772:	4b02      	ldr	r3, [pc, #8]	; (808377c <_ZN9TimeClass5monthEl+0x10>)
 8083774:	6918      	ldr	r0, [r3, #16]
}
 8083776:	3001      	adds	r0, #1
 8083778:	bd08      	pop	{r3, pc}
 808377a:	bf00      	nop
 808377c:	20000400 	.word	0x20000400

08083780 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
 8083780:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
 8083782:	f7fe fc09 	bl	8081f98 <HAL_RTC_Get_UnixTime>
 8083786:	4b03      	ldr	r3, [pc, #12]	; (8083794 <_ZN9TimeClass5localEv+0x14>)
 8083788:	681b      	ldr	r3, [r3, #0]
 808378a:	4418      	add	r0, r3
 808378c:	4b02      	ldr	r3, [pc, #8]	; (8083798 <_ZN9TimeClass5localEv+0x18>)
 808378e:	681b      	ldr	r3, [r3, #0]
}
 8083790:	4418      	add	r0, r3
 8083792:	bd08      	pop	{r3, pc}
 8083794:	20000430 	.word	0x20000430
 8083798:	20000428 	.word	0x20000428

0808379c <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808379c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808379e:	4909      	ldr	r1, [pc, #36]	; (80837c4 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80837a0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80837a2:	f001 fca5 	bl	80850f0 <__aeabi_fcmplt>
 80837a6:	b960      	cbnz	r0, 80837c2 <_ZN9TimeClass4zoneEf+0x26>
 80837a8:	4907      	ldr	r1, [pc, #28]	; (80837c8 <_ZN9TimeClass4zoneEf+0x2c>)
 80837aa:	4620      	mov	r0, r4
 80837ac:	f001 fcbe 	bl	808512c <__aeabi_fcmpgt>
 80837b0:	b938      	cbnz	r0, 80837c2 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80837b2:	4906      	ldr	r1, [pc, #24]	; (80837cc <_ZN9TimeClass4zoneEf+0x30>)
 80837b4:	4620      	mov	r0, r4
 80837b6:	f001 fafd 	bl	8084db4 <__aeabi_fmul>
 80837ba:	f001 fcc1 	bl	8085140 <__aeabi_f2iz>
 80837be:	4b04      	ldr	r3, [pc, #16]	; (80837d0 <_ZN9TimeClass4zoneEf+0x34>)
 80837c0:	6018      	str	r0, [r3, #0]
 80837c2:	bd10      	pop	{r4, pc}
 80837c4:	c1400000 	.word	0xc1400000
 80837c8:	41600000 	.word	0x41600000
 80837cc:	45610000 	.word	0x45610000
 80837d0:	20000430 	.word	0x20000430

080837d4 <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80837d4:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 80837d6:	2100      	movs	r1, #0
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80837d8:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 80837da:	f001 fc89 	bl	80850f0 <__aeabi_fcmplt>
 80837de:	b968      	cbnz	r0, 80837fc <_ZN9TimeClass12setDSTOffsetEf+0x28>
 80837e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80837e4:	4620      	mov	r0, r4
 80837e6:	f001 fca1 	bl	808512c <__aeabi_fcmpgt>
 80837ea:	b938      	cbnz	r0, 80837fc <_ZN9TimeClass12setDSTOffsetEf+0x28>
    {
        return;
    }
    dst_cache = offset * 3600;
 80837ec:	4904      	ldr	r1, [pc, #16]	; (8083800 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 80837ee:	4620      	mov	r0, r4
 80837f0:	f001 fae0 	bl	8084db4 <__aeabi_fmul>
 80837f4:	f001 fca4 	bl	8085140 <__aeabi_f2iz>
 80837f8:	4b02      	ldr	r3, [pc, #8]	; (8083804 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 80837fa:	6018      	str	r0, [r3, #0]
 80837fc:	bd10      	pop	{r4, pc}
 80837fe:	bf00      	nop
 8083800:	45610000 	.word	0x45610000
 8083804:	20000078 	.word	0x20000078

08083808 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 8083808:	4b02      	ldr	r3, [pc, #8]	; (8083814 <_ZN9TimeClass8beginDSTEv+0xc>)
 808380a:	681a      	ldr	r2, [r3, #0]
 808380c:	4b02      	ldr	r3, [pc, #8]	; (8083818 <_ZN9TimeClass8beginDSTEv+0x10>)
 808380e:	601a      	str	r2, [r3, #0]
 8083810:	4770      	bx	lr
 8083812:	bf00      	nop
 8083814:	20000078 	.word	0x20000078
 8083818:	20000428 	.word	0x20000428

0808381c <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
 808381c:	4b01      	ldr	r3, [pc, #4]	; (8083824 <_ZN9TimeClass6endDSTEv+0x8>)
 808381e:	2200      	movs	r2, #0
 8083820:	601a      	str	r2, [r3, #0]
 8083822:	4770      	bx	lr
 8083824:	20000428 	.word	0x20000428

08083828 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083828:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808382a:	4b0e      	ldr	r3, [pc, #56]	; (8083864 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808382c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808382e:	681b      	ldr	r3, [r3, #0]
 8083830:	a802      	add	r0, sp, #8
 8083832:	4419      	add	r1, r3
 8083834:	4b0c      	ldr	r3, [pc, #48]	; (8083868 <_ZN9TimeClass7timeStrEl+0x40>)
 8083836:	681b      	ldr	r3, [r3, #0]
 8083838:	4419      	add	r1, r3
 808383a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808383e:	f001 fcef 	bl	8085220 <localtime>
        char* ascstr = asctime(calendar_time);
 8083842:	f001 fca3 	bl	808518c <asctime>
 8083846:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8083848:	f001 fe5b 	bl	8085502 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808384c:	2300      	movs	r3, #0
 808384e:	4428      	add	r0, r5
 8083850:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8083854:	4629      	mov	r1, r5
 8083856:	4620      	mov	r0, r4
 8083858:	f7ff fdc5 	bl	80833e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808385c:	4620      	mov	r0, r4
 808385e:	b003      	add	sp, #12
 8083860:	bd30      	pop	{r4, r5, pc}
 8083862:	bf00      	nop
 8083864:	20000430 	.word	0x20000430
 8083868:	20000428 	.word	0x20000428

0808386c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808386c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808386e:	2000      	movs	r0, #0
 8083870:	f7fe fb9a 	bl	8081fa8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8083874:	4604      	mov	r4, r0
 8083876:	b968      	cbnz	r0, 8083894 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083878:	f7fe fd00 	bl	808227c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808387c:	2801      	cmp	r0, #1
 808387e:	d10b      	bne.n	8083898 <_ZN9TimeClass7isValidEv+0x2c>
 8083880:	4620      	mov	r0, r4
 8083882:	f7fe fd33 	bl	80822ec <system_thread_get_state>
 8083886:	b938      	cbnz	r0, 8083898 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8083888:	f7ff ff48 	bl	808371c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808388c:	b930      	cbnz	r0, 808389c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808388e:	f7fe fd6d 	bl	808236c <spark_process>
 8083892:	e7f9      	b.n	8083888 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8083894:	2001      	movs	r0, #1
 8083896:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8083898:	2000      	movs	r0, #0
 808389a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808389c:	f7ff ff3e 	bl	808371c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80838a0:	2000      	movs	r0, #0
 80838a2:	f7fe fb81 	bl	8081fa8 <HAL_RTC_Time_Is_Valid>
 80838a6:	3000      	adds	r0, #0
 80838a8:	bf18      	it	ne
 80838aa:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80838ac:	bd10      	pop	{r4, pc}

080838ae <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80838ae:	b508      	push	{r3, lr}
    (void)isValid();
 80838b0:	f7ff ffdc 	bl	808386c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80838b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80838b8:	f7fe bb6e 	b.w	8081f98 <HAL_RTC_Get_UnixTime>

080838bc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80838bc:	b508      	push	{r3, lr}
	return hour(now());
 80838be:	f7ff fff6 	bl	80838ae <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80838c2:	f7ff fef9 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80838c6:	4b01      	ldr	r3, [pc, #4]	; (80838cc <_ZN9TimeClass4hourEv+0x10>)
 80838c8:	6898      	ldr	r0, [r3, #8]
 80838ca:	bd08      	pop	{r3, pc}
 80838cc:	20000400 	.word	0x20000400

080838d0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80838d0:	b508      	push	{r3, lr}
	return minute(now());
 80838d2:	f7ff ffec 	bl	80838ae <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80838d6:	f7ff feef 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80838da:	4b01      	ldr	r3, [pc, #4]	; (80838e0 <_ZN9TimeClass6minuteEv+0x10>)
 80838dc:	6858      	ldr	r0, [r3, #4]
 80838de:	bd08      	pop	{r3, pc}
 80838e0:	20000400 	.word	0x20000400

080838e4 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80838e4:	b508      	push	{r3, lr}
	return day(now());
 80838e6:	f7ff ffe2 	bl	80838ae <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80838ea:	f7ff fee5 	bl	80836b8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80838ee:	4b01      	ldr	r3, [pc, #4]	; (80838f4 <_ZN9TimeClass3dayEv+0x10>)
 80838f0:	68d8      	ldr	r0, [r3, #12]
 80838f2:	bd08      	pop	{r3, pc}
 80838f4:	20000400 	.word	0x20000400

080838f8 <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
 80838f8:	b508      	push	{r3, lr}
	return weekday(now());
 80838fa:	f7ff ffd8 	bl	80838ae <_ZN9TimeClass3nowEv>
}
 80838fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
 8083902:	f7ff bf29 	b.w	8083758 <_ZN9TimeClass7weekdayEl>

08083906 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 8083906:	b508      	push	{r3, lr}
	return month(now());
 8083908:	f7ff ffd1 	bl	80838ae <_ZN9TimeClass3nowEv>
}
 808390c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8083910:	f7ff bf2c 	b.w	808376c <_ZN9TimeClass5monthEl>

08083914 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8083914:	4b02      	ldr	r3, [pc, #8]	; (8083920 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8083916:	681a      	ldr	r2, [r3, #0]
 8083918:	4b02      	ldr	r3, [pc, #8]	; (8083924 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808391a:	601a      	str	r2, [r3, #0]
 808391c:	4770      	bx	lr
 808391e:	bf00      	nop
 8083920:	2000007c 	.word	0x2000007c
 8083924:	20000424 	.word	0x20000424

08083928 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8083928:	4770      	bx	lr

0808392a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808392a:	7441      	strb	r1, [r0, #17]
 808392c:	4770      	bx	lr

0808392e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808392e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8083930:	7c00      	ldrb	r0, [r0, #16]
 8083932:	f7fe fc41 	bl	80821b8 <HAL_USART_Available_Data_For_Write>
}
 8083936:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808393a:	bd08      	pop	{r3, pc}

0808393c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808393c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808393e:	7c00      	ldrb	r0, [r0, #16]
 8083940:	f7fe fc12 	bl	8082168 <HAL_USART_Available_Data>
}
 8083944:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083948:	bd08      	pop	{r3, pc}

0808394a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808394a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808394c:	7c00      	ldrb	r0, [r0, #16]
 808394e:	f7fe fc1b 	bl	8082188 <HAL_USART_Peek_Data>
}
 8083952:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8083956:	bf28      	it	cs
 8083958:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 808395c:	bd08      	pop	{r3, pc}

0808395e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808395e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8083960:	7c00      	ldrb	r0, [r0, #16]
 8083962:	f7fe fc09 	bl	8082178 <HAL_USART_Read_Data>
}
 8083966:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808396a:	bf28      	it	cs
 808396c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8083970:	bd08      	pop	{r3, pc}

08083972 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8083972:	7c00      	ldrb	r0, [r0, #16]
 8083974:	f7fe bc10 	b.w	8082198 <HAL_USART_Flush_Data>

08083978 <_ZN11USARTSerialD0Ev>:
 8083978:	b510      	push	{r4, lr}
 808397a:	4604      	mov	r4, r0
 808397c:	2114      	movs	r1, #20
 808397e:	f000 fb62 	bl	8084046 <_ZdlPvj>
 8083982:	4620      	mov	r0, r4
 8083984:	bd10      	pop	{r4, pc}

08083986 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083986:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083988:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808398a:	4604      	mov	r4, r0
 808398c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808398e:	b925      	cbnz	r5, 808399a <_ZN11USARTSerial5writeEh+0x14>
 8083990:	7c00      	ldrb	r0, [r0, #16]
 8083992:	f7fe fc11 	bl	80821b8 <HAL_USART_Available_Data_For_Write>
 8083996:	2800      	cmp	r0, #0
 8083998:	dd05      	ble.n	80839a6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808399a:	4631      	mov	r1, r6
 808399c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808399e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80839a2:	f7fe bbd9 	b.w	8082158 <HAL_USART_Write_Data>
  }
  return 0;
}
 80839a6:	4628      	mov	r0, r5
 80839a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080839ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80839ac:	b510      	push	{r4, lr}
 80839ae:	4604      	mov	r4, r0
 80839b0:	4608      	mov	r0, r1
 80839b2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80839b4:	2200      	movs	r2, #0
 80839b6:	6062      	str	r2, [r4, #4]
 80839b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80839bc:	60a2      	str	r2, [r4, #8]
 80839be:	4a05      	ldr	r2, [pc, #20]	; (80839d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80839c0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80839c2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80839c4:	2201      	movs	r2, #1
 80839c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80839c8:	461a      	mov	r2, r3
 80839ca:	f7fe fbbd 	bl	8082148 <HAL_USART_Init>
}
 80839ce:	4620      	mov	r0, r4
 80839d0:	bd10      	pop	{r4, pc}
 80839d2:	bf00      	nop
 80839d4:	08086544 	.word	0x08086544

080839d8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80839d8:	2300      	movs	r3, #0
 80839da:	7c00      	ldrb	r0, [r0, #16]
 80839dc:	f7fe bbf4 	b.w	80821c8 <HAL_USART_BeginConfig>

080839e0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80839e0:	2200      	movs	r2, #0
 80839e2:	f7ff bff9 	b.w	80839d8 <_ZN11USARTSerial5beginEmm>

080839e6 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80839e6:	7c00      	ldrb	r0, [r0, #16]
 80839e8:	f7fe bbde 	b.w	80821a8 <HAL_USART_Is_Enabled>

080839ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80839ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80839ee:	4d0c      	ldr	r5, [pc, #48]	; (8083a20 <_Z22__fetch_global_Serial1v+0x34>)
 80839f0:	6829      	ldr	r1, [r5, #0]
 80839f2:	f011 0401 	ands.w	r4, r1, #1
 80839f6:	d111      	bne.n	8083a1c <_Z22__fetch_global_Serial1v+0x30>
 80839f8:	4628      	mov	r0, r5
 80839fa:	f7fc fb54 	bl	80800a6 <__cxa_guard_acquire>
 80839fe:	b168      	cbz	r0, 8083a1c <_Z22__fetch_global_Serial1v+0x30>
 8083a00:	4a08      	ldr	r2, [pc, #32]	; (8083a24 <_Z22__fetch_global_Serial1v+0x38>)
 8083a02:	4621      	mov	r1, r4
 8083a04:	4b08      	ldr	r3, [pc, #32]	; (8083a28 <_Z22__fetch_global_Serial1v+0x3c>)
 8083a06:	4809      	ldr	r0, [pc, #36]	; (8083a2c <_Z22__fetch_global_Serial1v+0x40>)
 8083a08:	f7ff ffd0 	bl	80839ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8083a0c:	4628      	mov	r0, r5
 8083a0e:	f7fc fb4f 	bl	80800b0 <__cxa_guard_release>
 8083a12:	4a07      	ldr	r2, [pc, #28]	; (8083a30 <_Z22__fetch_global_Serial1v+0x44>)
 8083a14:	4907      	ldr	r1, [pc, #28]	; (8083a34 <_Z22__fetch_global_Serial1v+0x48>)
 8083a16:	4805      	ldr	r0, [pc, #20]	; (8083a2c <_Z22__fetch_global_Serial1v+0x40>)
 8083a18:	f000 fb10 	bl	808403c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083a1c:	4803      	ldr	r0, [pc, #12]	; (8083a2c <_Z22__fetch_global_Serial1v+0x40>)
 8083a1e:	bd38      	pop	{r3, r4, r5, pc}
 8083a20:	200004cc 	.word	0x200004cc
 8083a24:	200004d0 	.word	0x200004d0
 8083a28:	20000448 	.word	0x20000448
 8083a2c:	20000434 	.word	0x20000434
 8083a30:	20000134 	.word	0x20000134
 8083a34:	08083929 	.word	0x08083929

08083a38 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083a38:	7441      	strb	r1, [r0, #17]
 8083a3a:	4770      	bx	lr

08083a3c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8083a3c:	4770      	bx	lr

08083a3e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8083a3e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8083a40:	2100      	movs	r1, #0
 8083a42:	7c00      	ldrb	r0, [r0, #16]
 8083a44:	f7fe fbe0 	bl	8082208 <HAL_USB_USART_Receive_Data>
}
 8083a48:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8083a4c:	bf28      	it	cs
 8083a4e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8083a52:	bd08      	pop	{r3, pc}

08083a54 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8083a54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8083a56:	2101      	movs	r1, #1
 8083a58:	7c00      	ldrb	r0, [r0, #16]
 8083a5a:	f7fe fbd5 	bl	8082208 <HAL_USB_USART_Receive_Data>
}
 8083a5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8083a62:	bf28      	it	cs
 8083a64:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8083a68:	bd08      	pop	{r3, pc}

08083a6a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8083a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8083a6c:	7c00      	ldrb	r0, [r0, #16]
 8083a6e:	f7fe fbc3 	bl	80821f8 <HAL_USB_USART_Available_Data_For_Write>
}
 8083a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083a76:	bd08      	pop	{r3, pc}

08083a78 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8083a78:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8083a7a:	7c00      	ldrb	r0, [r0, #16]
 8083a7c:	f7fe fbb4 	bl	80821e8 <HAL_USB_USART_Available_Data>
}
 8083a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083a84:	bd08      	pop	{r3, pc}

08083a86 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8083a86:	7c00      	ldrb	r0, [r0, #16]
 8083a88:	f7fe bbce 	b.w	8082228 <HAL_USB_USART_Flush_Data>

08083a8c <_ZN9USBSerialD0Ev>:
 8083a8c:	b510      	push	{r4, lr}
 8083a8e:	4604      	mov	r4, r0
 8083a90:	2114      	movs	r1, #20
 8083a92:	f000 fad8 	bl	8084046 <_ZdlPvj>
 8083a96:	4620      	mov	r0, r4
 8083a98:	bd10      	pop	{r4, pc}

08083a9a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8083a9a:	b538      	push	{r3, r4, r5, lr}
 8083a9c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083a9e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8083aa0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083aa2:	f7fe fba9 	bl	80821f8 <HAL_USB_USART_Available_Data_For_Write>
 8083aa6:	2800      	cmp	r0, #0
 8083aa8:	dc01      	bgt.n	8083aae <_ZN9USBSerial5writeEh+0x14>
 8083aaa:	7c60      	ldrb	r0, [r4, #17]
 8083aac:	b128      	cbz	r0, 8083aba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8083aae:	4629      	mov	r1, r5
 8083ab0:	7c20      	ldrb	r0, [r4, #16]
 8083ab2:	f7fe fbb1 	bl	8082218 <HAL_USB_USART_Send_Data>
 8083ab6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8083aba:	bd38      	pop	{r3, r4, r5, pc}

08083abc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083abc:	b510      	push	{r4, lr}
 8083abe:	4604      	mov	r4, r0
 8083ac0:	2300      	movs	r3, #0
 8083ac2:	6063      	str	r3, [r4, #4]
 8083ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083ac8:	60a3      	str	r3, [r4, #8]
 8083aca:	4b05      	ldr	r3, [pc, #20]	; (8083ae0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8083acc:	4608      	mov	r0, r1
 8083ace:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083ad0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8083ad2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8083ad4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8083ad6:	4611      	mov	r1, r2
 8083ad8:	f7fe fb7e 	bl	80821d8 <HAL_USB_USART_Init>
}
 8083adc:	4620      	mov	r0, r4
 8083ade:	bd10      	pop	{r4, pc}
 8083ae0:	08086574 	.word	0x08086574

08083ae4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083ae4:	b510      	push	{r4, lr}
 8083ae6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083ae8:	2214      	movs	r2, #20
 8083aea:	2100      	movs	r1, #0
 8083aec:	f001 fc9b 	bl	8085426 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083af0:	4b05      	ldr	r3, [pc, #20]	; (8083b08 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083af2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083af4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8083af6:	4b05      	ldr	r3, [pc, #20]	; (8083b0c <_Z19acquireSerialBufferv+0x28>)
 8083af8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083afa:	f240 1301 	movw	r3, #257	; 0x101
 8083afe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083b00:	2381      	movs	r3, #129	; 0x81
 8083b02:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083b04:	bd10      	pop	{r4, pc}
 8083b06:	bf00      	nop
 8083b08:	200005d9 	.word	0x200005d9
 8083b0c:	20000558 	.word	0x20000558

08083b10 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083b10:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083b12:	4d0e      	ldr	r5, [pc, #56]	; (8083b4c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8083b14:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083b16:	a801      	add	r0, sp, #4
 8083b18:	f7ff ffe4 	bl	8083ae4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083b1c:	6829      	ldr	r1, [r5, #0]
 8083b1e:	f011 0401 	ands.w	r4, r1, #1
 8083b22:	d110      	bne.n	8083b46 <_Z16_fetch_usbserialv+0x36>
 8083b24:	4628      	mov	r0, r5
 8083b26:	f7fc fabe 	bl	80800a6 <__cxa_guard_acquire>
 8083b2a:	b160      	cbz	r0, 8083b46 <_Z16_fetch_usbserialv+0x36>
 8083b2c:	aa01      	add	r2, sp, #4
 8083b2e:	4621      	mov	r1, r4
 8083b30:	4807      	ldr	r0, [pc, #28]	; (8083b50 <_Z16_fetch_usbserialv+0x40>)
 8083b32:	f7ff ffc3 	bl	8083abc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083b36:	4628      	mov	r0, r5
 8083b38:	f7fc faba 	bl	80800b0 <__cxa_guard_release>
 8083b3c:	4a05      	ldr	r2, [pc, #20]	; (8083b54 <_Z16_fetch_usbserialv+0x44>)
 8083b3e:	4906      	ldr	r1, [pc, #24]	; (8083b58 <_Z16_fetch_usbserialv+0x48>)
 8083b40:	4803      	ldr	r0, [pc, #12]	; (8083b50 <_Z16_fetch_usbserialv+0x40>)
 8083b42:	f000 fa7b 	bl	808403c <__aeabi_atexit>
	return _usbserial;
}
 8083b46:	4802      	ldr	r0, [pc, #8]	; (8083b50 <_Z16_fetch_usbserialv+0x40>)
 8083b48:	b007      	add	sp, #28
 8083b4a:	bd30      	pop	{r4, r5, pc}
 8083b4c:	20000554 	.word	0x20000554
 8083b50:	200006dc 	.word	0x200006dc
 8083b54:	20000134 	.word	0x20000134
 8083b58:	08083a3d 	.word	0x08083a3d

08083b5c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8083b5c:	b510      	push	{r4, lr}
 8083b5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083b60:	2214      	movs	r2, #20
 8083b62:	2100      	movs	r1, #0
 8083b64:	f001 fc5f 	bl	8085426 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083b68:	4b05      	ldr	r3, [pc, #20]	; (8083b80 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083b6a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083b6c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8083b6e:	4b05      	ldr	r3, [pc, #20]	; (8083b84 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8083b70:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083b72:	f240 1301 	movw	r3, #257	; 0x101
 8083b76:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083b78:	2381      	movs	r3, #129	; 0x81
 8083b7a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083b7c:	bd10      	pop	{r4, pc}
 8083b7e:	bf00      	nop
 8083b80:	2000078c 	.word	0x2000078c
 8083b84:	200006f4 	.word	0x200006f4

08083b88 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8083b88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083b8a:	4c0e      	ldr	r4, [pc, #56]	; (8083bc4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8083b8c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8083b8e:	a801      	add	r0, sp, #4
 8083b90:	f7ff ffe4 	bl	8083b5c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083b94:	6823      	ldr	r3, [r4, #0]
 8083b96:	07db      	lsls	r3, r3, #31
 8083b98:	d410      	bmi.n	8083bbc <_Z17_fetch_usbserial1v+0x34>
 8083b9a:	4620      	mov	r0, r4
 8083b9c:	f7fc fa83 	bl	80800a6 <__cxa_guard_acquire>
 8083ba0:	b160      	cbz	r0, 8083bbc <_Z17_fetch_usbserial1v+0x34>
 8083ba2:	aa01      	add	r2, sp, #4
 8083ba4:	2101      	movs	r1, #1
 8083ba6:	4808      	ldr	r0, [pc, #32]	; (8083bc8 <_Z17_fetch_usbserial1v+0x40>)
 8083ba8:	f7ff ff88 	bl	8083abc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083bac:	4620      	mov	r0, r4
 8083bae:	f7fc fa7f 	bl	80800b0 <__cxa_guard_release>
 8083bb2:	4a06      	ldr	r2, [pc, #24]	; (8083bcc <_Z17_fetch_usbserial1v+0x44>)
 8083bb4:	4906      	ldr	r1, [pc, #24]	; (8083bd0 <_Z17_fetch_usbserial1v+0x48>)
 8083bb6:	4804      	ldr	r0, [pc, #16]	; (8083bc8 <_Z17_fetch_usbserial1v+0x40>)
 8083bb8:	f000 fa40 	bl	808403c <__aeabi_atexit>
  return _usbserial1;
}
 8083bbc:	4802      	ldr	r0, [pc, #8]	; (8083bc8 <_Z17_fetch_usbserial1v+0x40>)
 8083bbe:	b006      	add	sp, #24
 8083bc0:	bd10      	pop	{r4, pc}
 8083bc2:	bf00      	nop
 8083bc4:	200006f0 	.word	0x200006f0
 8083bc8:	20000778 	.word	0x20000778
 8083bcc:	20000134 	.word	0x20000134
 8083bd0:	08083a3d 	.word	0x08083a3d

08083bd4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8083bd4:	b510      	push	{r4, lr}
 8083bd6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8083bd8:	f001 fc93 	bl	8085502 <strlen>
 8083bdc:	3801      	subs	r0, #1
 8083bde:	1823      	adds	r3, r4, r0
 8083be0:	4620      	mov	r0, r4
	while(i<j){
 8083be2:	4298      	cmp	r0, r3
 8083be4:	d206      	bcs.n	8083bf4 <_Z11str_reversePc+0x20>
		c = *i;
 8083be6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8083be8:	7819      	ldrb	r1, [r3, #0]
 8083bea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8083bee:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8083bf2:	e7f6      	b.n	8083be2 <_Z11str_reversePc+0xe>
 8083bf4:	bd10      	pop	{r4, pc}

08083bf6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8083bf6:	b570      	push	{r4, r5, r6, lr}
 8083bf8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8083bfa:	1e91      	subs	r1, r2, #2
 8083bfc:	2922      	cmp	r1, #34	; 0x22
 8083bfe:	d820      	bhi.n	8083c42 <ultoa+0x4c>
 8083c00:	4625      	mov	r5, r4
 8083c02:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8083c04:	b910      	cbnz	r0, 8083c0c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8083c06:	4423      	add	r3, r4
            *ptr++ = '0';
 8083c08:	2230      	movs	r2, #48	; 0x30
 8083c0a:	e00e      	b.n	8083c2a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8083c0c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8083c10:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8083c14:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8083c16:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8083c18:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8083c1c:	bf94      	ite	ls
 8083c1e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8083c20:	3157      	addhi	r1, #87	; 0x57
 8083c22:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8083c26:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8083c28:	e7eb      	b.n	8083c02 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8083c2a:	4299      	cmp	r1, r3
 8083c2c:	d202      	bcs.n	8083c34 <ultoa+0x3e>
            *ptr++ = '0';
 8083c2e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8083c32:	e7fa      	b.n	8083c2a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8083c34:	2300      	movs	r3, #0
	str_reverse(buffer);
 8083c36:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8083c38:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8083c3a:	f7ff ffcb 	bl	8083bd4 <_Z11str_reversePc>
	return buffer;
 8083c3e:	4620      	mov	r0, r4
 8083c40:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8083c42:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8083c44:	bd70      	pop	{r4, r5, r6, pc}

08083c46 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8083c46:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8083c48:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8083c4a:	460c      	mov	r4, r1
 8083c4c:	4615      	mov	r5, r2
	if(a<0){
 8083c4e:	da0b      	bge.n	8083c68 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8083c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8083c54:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8083c58:	bf14      	ite	ne
 8083c5a:	4258      	negne	r0, r3
 8083c5c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8083c5e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8083c60:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8083c62:	462a      	mov	r2, r5
 8083c64:	4419      	add	r1, r3
 8083c66:	e000      	b.n	8083c6a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8083c68:	2301      	movs	r3, #1
 8083c6a:	f7ff ffc4 	bl	8083bf6 <ultoa>
	}
	return buffer;
}
 8083c6e:	4620      	mov	r0, r4
 8083c70:	bd38      	pop	{r3, r4, r5, pc}
	...

08083c74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8083c74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8083c76:	4b18      	ldr	r3, [pc, #96]	; (8083cd8 <serialEventRun+0x64>)
 8083c78:	b133      	cbz	r3, 8083c88 <serialEventRun+0x14>
 8083c7a:	f7ff ff49 	bl	8083b10 <_Z16_fetch_usbserialv>
 8083c7e:	6803      	ldr	r3, [r0, #0]
 8083c80:	691b      	ldr	r3, [r3, #16]
 8083c82:	4798      	blx	r3
 8083c84:	2800      	cmp	r0, #0
 8083c86:	dc1e      	bgt.n	8083cc6 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8083c88:	4b14      	ldr	r3, [pc, #80]	; (8083cdc <serialEventRun+0x68>)
 8083c8a:	b133      	cbz	r3, 8083c9a <serialEventRun+0x26>
 8083c8c:	f7ff feae 	bl	80839ec <_Z22__fetch_global_Serial1v>
 8083c90:	6803      	ldr	r3, [r0, #0]
 8083c92:	691b      	ldr	r3, [r3, #16]
 8083c94:	4798      	blx	r3
 8083c96:	2800      	cmp	r0, #0
 8083c98:	dc18      	bgt.n	8083ccc <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8083c9a:	4b11      	ldr	r3, [pc, #68]	; (8083ce0 <serialEventRun+0x6c>)
 8083c9c:	b10b      	cbz	r3, 8083ca2 <serialEventRun+0x2e>
 8083c9e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8083ca2:	4b10      	ldr	r3, [pc, #64]	; (8083ce4 <serialEventRun+0x70>)
 8083ca4:	b10b      	cbz	r3, 8083caa <serialEventRun+0x36>
 8083ca6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8083caa:	4b0f      	ldr	r3, [pc, #60]	; (8083ce8 <serialEventRun+0x74>)
 8083cac:	b10b      	cbz	r3, 8083cb2 <serialEventRun+0x3e>
 8083cae:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083cb2:	4b0e      	ldr	r3, [pc, #56]	; (8083cec <serialEventRun+0x78>)
 8083cb4:	b17b      	cbz	r3, 8083cd6 <serialEventRun+0x62>
 8083cb6:	f7ff ff67 	bl	8083b88 <_Z17_fetch_usbserial1v>
 8083cba:	6803      	ldr	r3, [r0, #0]
 8083cbc:	691b      	ldr	r3, [r3, #16]
 8083cbe:	4798      	blx	r3
 8083cc0:	2800      	cmp	r0, #0
 8083cc2:	dc06      	bgt.n	8083cd2 <serialEventRun+0x5e>
 8083cc4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8083cc6:	f3af 8000 	nop.w
 8083cca:	e7dd      	b.n	8083c88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8083ccc:	f3af 8000 	nop.w
 8083cd0:	e7e3      	b.n	8083c9a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8083cd2:	f3af 8000 	nop.w
 8083cd6:	bd08      	pop	{r3, pc}
	...

08083cf0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8083cf0:	b508      	push	{r3, lr}
	serialEventRun();
 8083cf2:	f7ff ffbf 	bl	8083c74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083cf6:	f7fe f947 	bl	8081f88 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083cfa:	4b01      	ldr	r3, [pc, #4]	; (8083d00 <_post_loop+0x10>)
 8083cfc:	6018      	str	r0, [r3, #0]
 8083cfe:	bd08      	pop	{r3, pc}
 8083d00:	200008a8 	.word	0x200008a8

08083d04 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8083d04:	4802      	ldr	r0, [pc, #8]	; (8083d10 <_Z33system_initialize_user_backup_ramv+0xc>)
 8083d06:	4a03      	ldr	r2, [pc, #12]	; (8083d14 <_Z33system_initialize_user_backup_ramv+0x10>)
 8083d08:	4903      	ldr	r1, [pc, #12]	; (8083d18 <_Z33system_initialize_user_backup_ramv+0x14>)
 8083d0a:	1a12      	subs	r2, r2, r0
 8083d0c:	f001 bb80 	b.w	8085410 <memcpy>
 8083d10:	40024000 	.word	0x40024000
 8083d14:	40024004 	.word	0x40024004
 8083d18:	08086830 	.word	0x08086830

08083d1c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8083d1c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083d1e:	2300      	movs	r3, #0
 8083d20:	9300      	str	r3, [sp, #0]
 8083d22:	461a      	mov	r2, r3
 8083d24:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083d28:	f7fe faf2 	bl	8082310 <system_ctrl_set_result>
}
 8083d2c:	b003      	add	sp, #12
 8083d2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083d34 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083d34:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083d36:	8843      	ldrh	r3, [r0, #2]
 8083d38:	2b0a      	cmp	r3, #10
 8083d3a:	d008      	beq.n	8083d4e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083d3c:	2b50      	cmp	r3, #80	; 0x50
 8083d3e:	d109      	bne.n	8083d54 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8083d40:	4b09      	ldr	r3, [pc, #36]	; (8083d68 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8083d42:	681b      	ldr	r3, [r3, #0]
 8083d44:	b13b      	cbz	r3, 8083d56 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8083d46:	b003      	add	sp, #12
 8083d48:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083d4c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8083d4e:	f7ff ffe5 	bl	8083d1c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8083d52:	e006      	b.n	8083d62 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083d54:	2300      	movs	r3, #0
 8083d56:	9300      	str	r3, [sp, #0]
 8083d58:	461a      	mov	r2, r3
 8083d5a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083d5e:	f7fe fad7 	bl	8082310 <system_ctrl_set_result>
        break;
    }
}
 8083d62:	b003      	add	sp, #12
 8083d64:	f85d fb04 	ldr.w	pc, [sp], #4
 8083d68:	20000890 	.word	0x20000890

08083d6c <module_user_init_hook>:

void module_user_init_hook()
{
 8083d6c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083d6e:	4c10      	ldr	r4, [pc, #64]	; (8083db0 <module_user_init_hook+0x44>)
 8083d70:	4d10      	ldr	r5, [pc, #64]	; (8083db4 <module_user_init_hook+0x48>)
 8083d72:	6823      	ldr	r3, [r4, #0]
 8083d74:	42ab      	cmp	r3, r5
 8083d76:	4b10      	ldr	r3, [pc, #64]	; (8083db8 <module_user_init_hook+0x4c>)
 8083d78:	bf0c      	ite	eq
 8083d7a:	2201      	moveq	r2, #1
 8083d7c:	2200      	movne	r2, #0
 8083d7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083d80:	d002      	beq.n	8083d88 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8083d82:	f7ff ffbf 	bl	8083d04 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8083d86:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083d88:	f7fe f8ee 	bl	8081f68 <HAL_RNG_GetRandomNumber>
 8083d8c:	4604      	mov	r4, r0
    srand(seed);
 8083d8e:	f001 fb53 	bl	8085438 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8083d92:	4b0a      	ldr	r3, [pc, #40]	; (8083dbc <module_user_init_hook+0x50>)
 8083d94:	b113      	cbz	r3, 8083d9c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8083d96:	4620      	mov	r0, r4
 8083d98:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083d9c:	2100      	movs	r1, #0
 8083d9e:	4807      	ldr	r0, [pc, #28]	; (8083dbc <module_user_init_hook+0x50>)
 8083da0:	f7fe fb1c 	bl	80823dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083da8:	2100      	movs	r1, #0
 8083daa:	4805      	ldr	r0, [pc, #20]	; (8083dc0 <module_user_init_hook+0x54>)
 8083dac:	f7fe baa6 	b.w	80822fc <system_ctrl_set_app_request_handler>
 8083db0:	40024000 	.word	0x40024000
 8083db4:	9a271c1e 	.word	0x9a271c1e
 8083db8:	20000894 	.word	0x20000894
 8083dbc:	00000000 	.word	0x00000000
 8083dc0:	08083d35 	.word	0x08083d35

08083dc4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8083dc4:	b508      	push	{r3, lr}
 8083dc6:	4b02      	ldr	r3, [pc, #8]	; (8083dd0 <spark_protocol_instance+0xc>)
 8083dc8:	681b      	ldr	r3, [r3, #0]
 8083dca:	681b      	ldr	r3, [r3, #0]
 8083dcc:	9301      	str	r3, [sp, #4]
 8083dce:	bd08      	pop	{r3, pc}
 8083dd0:	0802019c 	.word	0x0802019c

08083dd4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8083dd4:	b508      	push	{r3, lr}
 8083dd6:	4b02      	ldr	r3, [pc, #8]	; (8083de0 <spark_protocol_set_product_id+0xc>)
 8083dd8:	681b      	ldr	r3, [r3, #0]
 8083dda:	685b      	ldr	r3, [r3, #4]
 8083ddc:	9301      	str	r3, [sp, #4]
 8083dde:	bd08      	pop	{r3, pc}
 8083de0:	0802019c 	.word	0x0802019c

08083de4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8083de4:	b508      	push	{r3, lr}
 8083de6:	4b02      	ldr	r3, [pc, #8]	; (8083df0 <spark_protocol_set_product_firmware_version+0xc>)
 8083de8:	681b      	ldr	r3, [r3, #0]
 8083dea:	689b      	ldr	r3, [r3, #8]
 8083dec:	9301      	str	r3, [sp, #4]
 8083dee:	bd08      	pop	{r3, pc}
 8083df0:	0802019c 	.word	0x0802019c

08083df4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 8083df4:	b510      	push	{r4, lr}
 8083df6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8083df8:	6880      	ldr	r0, [r0, #8]
 8083dfa:	b108      	cbz	r0, 8083e00 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8083dfc:	f7fe f884 	bl	8081f08 <os_mutex_recursive_destroy>
 8083e00:	4620      	mov	r0, r4
 8083e02:	bd10      	pop	{r4, pc}

08083e04 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083e04:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083e06:	4e1a      	ldr	r6, [pc, #104]	; (8083e70 <pinAvailable+0x6c>)
 8083e08:	4604      	mov	r4, r0
 8083e0a:	6831      	ldr	r1, [r6, #0]
 8083e0c:	f011 0501 	ands.w	r5, r1, #1
 8083e10:	d10f      	bne.n	8083e32 <pinAvailable+0x2e>
 8083e12:	4630      	mov	r0, r6
 8083e14:	f7fc f947 	bl	80800a6 <__cxa_guard_acquire>
 8083e18:	b158      	cbz	r0, 8083e32 <pinAvailable+0x2e>
 8083e1a:	4629      	mov	r1, r5
 8083e1c:	4815      	ldr	r0, [pc, #84]	; (8083e74 <pinAvailable+0x70>)
 8083e1e:	f7ff fa89 	bl	8083334 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083e22:	4630      	mov	r0, r6
 8083e24:	f7fc f944 	bl	80800b0 <__cxa_guard_release>
 8083e28:	4a13      	ldr	r2, [pc, #76]	; (8083e78 <pinAvailable+0x74>)
 8083e2a:	4914      	ldr	r1, [pc, #80]	; (8083e7c <pinAvailable+0x78>)
 8083e2c:	4811      	ldr	r0, [pc, #68]	; (8083e74 <pinAvailable+0x70>)
 8083e2e:	f000 f905 	bl	808403c <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 8083e32:	4810      	ldr	r0, [pc, #64]	; (8083e74 <pinAvailable+0x70>)
 8083e34:	f7ff fa8d 	bl	8083352 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083e38:	b128      	cbz	r0, 8083e46 <pinAvailable+0x42>
 8083e3a:	f1a4 030d 	sub.w	r3, r4, #13
 8083e3e:	2b02      	cmp	r3, #2
 8083e40:	d801      	bhi.n	8083e46 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 8083e42:	2000      	movs	r0, #0
 8083e44:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083e46:	f000 f895 	bl	8083f74 <_Z19__fetch_global_Wirev>
 8083e4a:	f7ff f848 	bl	8082ede <_ZN7TwoWire9isEnabledEv>
 8083e4e:	b108      	cbz	r0, 8083e54 <pinAvailable+0x50>
 8083e50:	2c01      	cmp	r4, #1
 8083e52:	d9f6      	bls.n	8083e42 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083e54:	f7ff fdca 	bl	80839ec <_Z22__fetch_global_Serial1v>
 8083e58:	f7ff fdc5 	bl	80839e6 <_ZN11USARTSerial9isEnabledEv>
 8083e5c:	b118      	cbz	r0, 8083e66 <pinAvailable+0x62>
 8083e5e:	f1a4 0312 	sub.w	r3, r4, #18
 8083e62:	2b01      	cmp	r3, #1
 8083e64:	d9ed      	bls.n	8083e42 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083e66:	2c2e      	cmp	r4, #46	; 0x2e
 8083e68:	bf8c      	ite	hi
 8083e6a:	2000      	movhi	r0, #0
 8083e6c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8083e6e:	bd70      	pop	{r4, r5, r6, pc}
 8083e70:	20000898 	.word	0x20000898
 8083e74:	2000089c 	.word	0x2000089c
 8083e78:	20000134 	.word	0x20000134
 8083e7c:	08083df5 	.word	0x08083df5

08083e80 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083e80:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8083e82:	b538      	push	{r3, r4, r5, lr}
 8083e84:	4604      	mov	r4, r0
 8083e86:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083e88:	d80a      	bhi.n	8083ea0 <pinMode+0x20>
 8083e8a:	29ff      	cmp	r1, #255	; 0xff
 8083e8c:	d008      	beq.n	8083ea0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083e8e:	f7ff ffb9 	bl	8083e04 <pinAvailable>
 8083e92:	b128      	cbz	r0, 8083ea0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083e94:	4629      	mov	r1, r5
 8083e96:	4620      	mov	r0, r4
}
 8083e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083e9c:	f7fe b8a4 	b.w	8081fe8 <HAL_Pin_Mode>
 8083ea0:	bd38      	pop	{r3, r4, r5, pc}

08083ea2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083ea2:	b538      	push	{r3, r4, r5, lr}
 8083ea4:	4604      	mov	r4, r0
 8083ea6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083ea8:	f7fe f8a6 	bl	8081ff8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083eac:	28ff      	cmp	r0, #255	; 0xff
 8083eae:	d010      	beq.n	8083ed2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083eb0:	2806      	cmp	r0, #6
 8083eb2:	d804      	bhi.n	8083ebe <digitalWrite+0x1c>
 8083eb4:	234d      	movs	r3, #77	; 0x4d
 8083eb6:	fa23 f000 	lsr.w	r0, r3, r0
 8083eba:	07c3      	lsls	r3, r0, #31
 8083ebc:	d409      	bmi.n	8083ed2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083ebe:	4620      	mov	r0, r4
 8083ec0:	f7ff ffa0 	bl	8083e04 <pinAvailable>
 8083ec4:	b128      	cbz	r0, 8083ed2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083ec6:	4629      	mov	r1, r5
 8083ec8:	4620      	mov	r0, r4
}
 8083eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083ece:	f7fe b89b 	b.w	8082008 <HAL_GPIO_Write>
 8083ed2:	bd38      	pop	{r3, r4, r5, pc}

08083ed4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083ed4:	b510      	push	{r4, lr}
 8083ed6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083ed8:	f7fe f88e 	bl	8081ff8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8083edc:	3804      	subs	r0, #4
 8083ede:	b2c0      	uxtb	r0, r0
 8083ee0:	2801      	cmp	r0, #1
 8083ee2:	d908      	bls.n	8083ef6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083ee4:	4620      	mov	r0, r4
 8083ee6:	f7ff ff8d 	bl	8083e04 <pinAvailable>
 8083eea:	b120      	cbz	r0, 8083ef6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083eec:	4620      	mov	r0, r4
}
 8083eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083ef2:	f7fe b891 	b.w	8082018 <HAL_GPIO_Read>
}
 8083ef6:	2000      	movs	r0, #0
 8083ef8:	bd10      	pop	{r4, pc}

08083efa <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8083efa:	b510      	push	{r4, lr}
 8083efc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8083efe:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8083f00:	bf9c      	itt	ls
 8083f02:	340a      	addls	r4, #10
 8083f04:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083f06:	4620      	mov	r0, r4
 8083f08:	f7ff ff7c 	bl	8083e04 <pinAvailable>
 8083f0c:	b150      	cbz	r0, 8083f24 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083f0e:	2103      	movs	r1, #3
 8083f10:	4620      	mov	r0, r4
 8083f12:	f7fe f861 	bl	8081fd8 <HAL_Validate_Pin_Function>
 8083f16:	2803      	cmp	r0, #3
 8083f18:	d104      	bne.n	8083f24 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083f1a:	4620      	mov	r0, r4
}
 8083f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083f20:	f7fe b892 	b.w	8082048 <HAL_ADC_Read>
}
 8083f24:	2000      	movs	r0, #0
 8083f26:	bd10      	pop	{r4, pc}

08083f28 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:

#ifndef SPARK_WIRING_NO_I2C

namespace {

HAL_I2C_Config defaultWireConfig() {
 8083f28:	b570      	push	{r4, r5, r6, lr}
 8083f2a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083f2c:	2514      	movs	r5, #20
 8083f2e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083f30:	4e09      	ldr	r6, [pc, #36]	; (8083f58 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083f32:	2100      	movs	r1, #0
 8083f34:	f001 fa77 	bl	8085426 <memset>
 8083f38:	8025      	strh	r5, [r4, #0]
 8083f3a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083f3c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083f3e:	60a5      	str	r5, [r4, #8]
 8083f40:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083f42:	4628      	mov	r0, r5
 8083f44:	f000 f899 	bl	808407a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083f48:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083f4a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083f4c:	4628      	mov	r0, r5
 8083f4e:	f000 f894 	bl	808407a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083f52:	60e0      	str	r0, [r4, #12]

	return config;
}
 8083f54:	4620      	mov	r0, r4
 8083f56:	bd70      	pop	{r4, r5, r6, pc}
 8083f58:	0808659c 	.word	0x0808659c

08083f5c <_Z17acquireWireBufferv>:
 8083f5c:	b510      	push	{r4, lr}
 8083f5e:	4604      	mov	r4, r0
 8083f60:	f7ff ffe2 	bl	8083f28 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8083f64:	4620      	mov	r0, r4
 8083f66:	bd10      	pop	{r4, pc}

08083f68 <_Z18acquireWire3Bufferv>:
}
#endif

#if Wiring_Wire3
HAL_I2C_Config __attribute__((weak)) acquireWire3Buffer()
{
 8083f68:	b510      	push	{r4, lr}
 8083f6a:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083f6c:	f7ff ffdc 	bl	8083f28 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083f70:	4620      	mov	r0, r4
 8083f72:	bd10      	pop	{r4, pc}

08083f74 <_Z19__fetch_global_Wirev>:
#endif

TwoWire& __fetch_global_Wire()
{
 8083f74:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083f76:	4d0e      	ldr	r5, [pc, #56]	; (8083fb0 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8083f78:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083f7a:	6829      	ldr	r1, [r5, #0]
 8083f7c:	f011 0401 	ands.w	r4, r1, #1
 8083f80:	d113      	bne.n	8083faa <_Z19__fetch_global_Wirev+0x36>
 8083f82:	4628      	mov	r0, r5
 8083f84:	f7fc f88f 	bl	80800a6 <__cxa_guard_acquire>
 8083f88:	b178      	cbz	r0, 8083faa <_Z19__fetch_global_Wirev+0x36>
 8083f8a:	a801      	add	r0, sp, #4
 8083f8c:	f7ff ffe6 	bl	8083f5c <_Z17acquireWireBufferv>
 8083f90:	aa01      	add	r2, sp, #4
 8083f92:	4621      	mov	r1, r4
 8083f94:	4807      	ldr	r0, [pc, #28]	; (8083fb4 <_Z19__fetch_global_Wirev+0x40>)
 8083f96:	f7fe ff51 	bl	8082e3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8083f9a:	4628      	mov	r0, r5
 8083f9c:	f7fc f888 	bl	80800b0 <__cxa_guard_release>
 8083fa0:	4a05      	ldr	r2, [pc, #20]	; (8083fb8 <_Z19__fetch_global_Wirev+0x44>)
 8083fa2:	4906      	ldr	r1, [pc, #24]	; (8083fbc <_Z19__fetch_global_Wirev+0x48>)
 8083fa4:	4803      	ldr	r0, [pc, #12]	; (8083fb4 <_Z19__fetch_global_Wirev+0x40>)
 8083fa6:	f000 f849 	bl	808403c <__aeabi_atexit>
	return wire;
}
 8083faa:	4802      	ldr	r0, [pc, #8]	; (8083fb4 <_Z19__fetch_global_Wirev+0x40>)
 8083fac:	b007      	add	sp, #28
 8083fae:	bd30      	pop	{r4, r5, pc}
 8083fb0:	200008ac 	.word	0x200008ac
 8083fb4:	200008c4 	.word	0x200008c4
 8083fb8:	20000134 	.word	0x20000134
 8083fbc:	08082de5 	.word	0x08082de5

08083fc0 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083fc0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083fc2:	4c0e      	ldr	r4, [pc, #56]	; (8083ffc <_Z20__fetch_global_Wire3v+0x3c>)
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083fc4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8083fc6:	6823      	ldr	r3, [r4, #0]
 8083fc8:	07db      	lsls	r3, r3, #31
 8083fca:	d413      	bmi.n	8083ff4 <_Z20__fetch_global_Wire3v+0x34>
 8083fcc:	4620      	mov	r0, r4
 8083fce:	f7fc f86a 	bl	80800a6 <__cxa_guard_acquire>
 8083fd2:	b178      	cbz	r0, 8083ff4 <_Z20__fetch_global_Wire3v+0x34>
 8083fd4:	a801      	add	r0, sp, #4
 8083fd6:	f7ff ffc7 	bl	8083f68 <_Z18acquireWire3Bufferv>
 8083fda:	aa01      	add	r2, sp, #4
 8083fdc:	2102      	movs	r1, #2
 8083fde:	4808      	ldr	r0, [pc, #32]	; (8084000 <_Z20__fetch_global_Wire3v+0x40>)
 8083fe0:	f7fe ff2c 	bl	8082e3c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 8083fe4:	4620      	mov	r0, r4
 8083fe6:	f7fc f863 	bl	80800b0 <__cxa_guard_release>
 8083fea:	4a06      	ldr	r2, [pc, #24]	; (8084004 <_Z20__fetch_global_Wire3v+0x44>)
 8083fec:	4906      	ldr	r1, [pc, #24]	; (8084008 <_Z20__fetch_global_Wire3v+0x48>)
 8083fee:	4804      	ldr	r0, [pc, #16]	; (8084000 <_Z20__fetch_global_Wire3v+0x40>)
 8083ff0:	f000 f824 	bl	808403c <__aeabi_atexit>
	return wire;
}
 8083ff4:	4802      	ldr	r0, [pc, #8]	; (8084000 <_Z20__fetch_global_Wire3v+0x40>)
 8083ff6:	b006      	add	sp, #24
 8083ff8:	bd10      	pop	{r4, pc}
 8083ffa:	bf00      	nop
 8083ffc:	200008d8 	.word	0x200008d8
 8084000:	200008b0 	.word	0x200008b0
 8084004:	20000134 	.word	0x20000134
 8084008:	08082de5 	.word	0x08082de5

0808400c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808400c:	b513      	push	{r0, r1, r4, lr}
 808400e:	4c08      	ldr	r4, [pc, #32]	; (8084030 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8084010:	2300      	movs	r3, #0
 8084012:	461a      	mov	r2, r3
 8084014:	4619      	mov	r1, r3
 8084016:	9300      	str	r3, [sp, #0]
 8084018:	4620      	mov	r0, r4
 808401a:	f7fe fffd 	bl	8083018 <_ZN9IPAddressC1Ehhhh>
 808401e:	4620      	mov	r0, r4
 8084020:	4a04      	ldr	r2, [pc, #16]	; (8084034 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8084022:	4905      	ldr	r1, [pc, #20]	; (8084038 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8084024:	b002      	add	sp, #8
 8084026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808402a:	f000 b807 	b.w	808403c <__aeabi_atexit>
 808402e:	bf00      	nop
 8084030:	200008dc 	.word	0x200008dc
 8084034:	20000134 	.word	0x20000134
 8084038:	08082f91 	.word	0x08082f91

0808403c <__aeabi_atexit>:
 808403c:	460b      	mov	r3, r1
 808403e:	4601      	mov	r1, r0
 8084040:	4618      	mov	r0, r3
 8084042:	f001 b8df 	b.w	8085204 <__cxa_atexit>

08084046 <_ZdlPvj>:
 8084046:	f7fc b82c 	b.w	80800a2 <_ZdlPv>
	...

0808404c <_ZSt15get_new_handlerv>:
 808404c:	4b02      	ldr	r3, [pc, #8]	; (8084058 <_ZSt15get_new_handlerv+0xc>)
 808404e:	6818      	ldr	r0, [r3, #0]
 8084050:	f3bf 8f5f 	dmb	sy
 8084054:	4770      	bx	lr
 8084056:	bf00      	nop
 8084058:	200008e4 	.word	0x200008e4

0808405c <_ZnwjRKSt9nothrow_t>:
 808405c:	b510      	push	{r4, lr}
 808405e:	2800      	cmp	r0, #0
 8084060:	bf14      	ite	ne
 8084062:	4604      	movne	r4, r0
 8084064:	2401      	moveq	r4, #1
 8084066:	4620      	mov	r0, r4
 8084068:	f7fe fa10 	bl	808248c <malloc>
 808406c:	b920      	cbnz	r0, 8084078 <_ZnwjRKSt9nothrow_t+0x1c>
 808406e:	f7ff ffed 	bl	808404c <_ZSt15get_new_handlerv>
 8084072:	b108      	cbz	r0, 8084078 <_ZnwjRKSt9nothrow_t+0x1c>
 8084074:	4780      	blx	r0
 8084076:	e7f6      	b.n	8084066 <_ZnwjRKSt9nothrow_t+0xa>
 8084078:	bd10      	pop	{r4, pc}

0808407a <_ZnajRKSt9nothrow_t>:
 808407a:	f7ff bfef 	b.w	808405c <_ZnwjRKSt9nothrow_t>

0808407e <_ZSt25__throw_bad_function_callv>:
 808407e:	b508      	push	{r3, lr}
 8084080:	f7fe fa34 	bl	80824ec <abort>

08084084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8084084:	4b24      	ldr	r3, [pc, #144]	; (8084118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8084086:	681a      	ldr	r2, [r3, #0]
 8084088:	07d0      	lsls	r0, r2, #31
 808408a:	bf5c      	itt	pl
 808408c:	2201      	movpl	r2, #1
 808408e:	601a      	strpl	r2, [r3, #0]
 8084090:	4b22      	ldr	r3, [pc, #136]	; (808411c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8084092:	681a      	ldr	r2, [r3, #0]
 8084094:	07d1      	lsls	r1, r2, #31
 8084096:	bf5c      	itt	pl
 8084098:	2201      	movpl	r2, #1
 808409a:	601a      	strpl	r2, [r3, #0]
 808409c:	4b20      	ldr	r3, [pc, #128]	; (8084120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808409e:	681a      	ldr	r2, [r3, #0]
 80840a0:	07d2      	lsls	r2, r2, #31
 80840a2:	bf5c      	itt	pl
 80840a4:	2201      	movpl	r2, #1
 80840a6:	601a      	strpl	r2, [r3, #0]
 80840a8:	4b1e      	ldr	r3, [pc, #120]	; (8084124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80840aa:	681a      	ldr	r2, [r3, #0]
 80840ac:	07d0      	lsls	r0, r2, #31
 80840ae:	bf5c      	itt	pl
 80840b0:	2201      	movpl	r2, #1
 80840b2:	601a      	strpl	r2, [r3, #0]
 80840b4:	4b1c      	ldr	r3, [pc, #112]	; (8084128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80840b6:	681a      	ldr	r2, [r3, #0]
 80840b8:	07d1      	lsls	r1, r2, #31
 80840ba:	bf5c      	itt	pl
 80840bc:	2201      	movpl	r2, #1
 80840be:	601a      	strpl	r2, [r3, #0]
 80840c0:	4b1a      	ldr	r3, [pc, #104]	; (808412c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80840c2:	681a      	ldr	r2, [r3, #0]
 80840c4:	07d2      	lsls	r2, r2, #31
 80840c6:	bf5c      	itt	pl
 80840c8:	2201      	movpl	r2, #1
 80840ca:	601a      	strpl	r2, [r3, #0]
 80840cc:	4b18      	ldr	r3, [pc, #96]	; (8084130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80840ce:	681a      	ldr	r2, [r3, #0]
 80840d0:	07d0      	lsls	r0, r2, #31
 80840d2:	bf5c      	itt	pl
 80840d4:	2201      	movpl	r2, #1
 80840d6:	601a      	strpl	r2, [r3, #0]
 80840d8:	4b16      	ldr	r3, [pc, #88]	; (8084134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80840da:	681a      	ldr	r2, [r3, #0]
 80840dc:	07d1      	lsls	r1, r2, #31
 80840de:	bf5c      	itt	pl
 80840e0:	2201      	movpl	r2, #1
 80840e2:	601a      	strpl	r2, [r3, #0]
 80840e4:	4b14      	ldr	r3, [pc, #80]	; (8084138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80840e6:	681a      	ldr	r2, [r3, #0]
 80840e8:	07d2      	lsls	r2, r2, #31
 80840ea:	bf5c      	itt	pl
 80840ec:	2201      	movpl	r2, #1
 80840ee:	601a      	strpl	r2, [r3, #0]
 80840f0:	4b12      	ldr	r3, [pc, #72]	; (808413c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80840f2:	681a      	ldr	r2, [r3, #0]
 80840f4:	07d0      	lsls	r0, r2, #31
 80840f6:	bf5c      	itt	pl
 80840f8:	2201      	movpl	r2, #1
 80840fa:	601a      	strpl	r2, [r3, #0]
 80840fc:	4b10      	ldr	r3, [pc, #64]	; (8084140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80840fe:	681a      	ldr	r2, [r3, #0]
 8084100:	07d1      	lsls	r1, r2, #31
 8084102:	bf5c      	itt	pl
 8084104:	2201      	movpl	r2, #1
 8084106:	601a      	strpl	r2, [r3, #0]
 8084108:	4b0e      	ldr	r3, [pc, #56]	; (8084144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808410a:	681a      	ldr	r2, [r3, #0]
 808410c:	07d2      	lsls	r2, r2, #31
 808410e:	bf5c      	itt	pl
 8084110:	2201      	movpl	r2, #1
 8084112:	601a      	strpl	r2, [r3, #0]
 8084114:	4770      	bx	lr
 8084116:	bf00      	nop
 8084118:	20000914 	.word	0x20000914
 808411c:	20000910 	.word	0x20000910
 8084120:	2000090c 	.word	0x2000090c
 8084124:	20000908 	.word	0x20000908
 8084128:	20000904 	.word	0x20000904
 808412c:	20000900 	.word	0x20000900
 8084130:	200008fc 	.word	0x200008fc
 8084134:	200008f8 	.word	0x200008f8
 8084138:	200008f4 	.word	0x200008f4
 808413c:	200008f0 	.word	0x200008f0
 8084140:	200008ec 	.word	0x200008ec
 8084144:	200008e8 	.word	0x200008e8

08084148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8084148:	4b18      	ldr	r3, [pc, #96]	; (80841ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808414a:	681a      	ldr	r2, [r3, #0]
 808414c:	07d1      	lsls	r1, r2, #31
 808414e:	bf5c      	itt	pl
 8084150:	2201      	movpl	r2, #1
 8084152:	601a      	strpl	r2, [r3, #0]
 8084154:	4b16      	ldr	r3, [pc, #88]	; (80841b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8084156:	681a      	ldr	r2, [r3, #0]
 8084158:	07d2      	lsls	r2, r2, #31
 808415a:	bf5c      	itt	pl
 808415c:	2201      	movpl	r2, #1
 808415e:	601a      	strpl	r2, [r3, #0]
 8084160:	4b14      	ldr	r3, [pc, #80]	; (80841b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8084162:	681a      	ldr	r2, [r3, #0]
 8084164:	07d0      	lsls	r0, r2, #31
 8084166:	bf5c      	itt	pl
 8084168:	2201      	movpl	r2, #1
 808416a:	601a      	strpl	r2, [r3, #0]
 808416c:	4b12      	ldr	r3, [pc, #72]	; (80841b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808416e:	681a      	ldr	r2, [r3, #0]
 8084170:	07d1      	lsls	r1, r2, #31
 8084172:	bf5c      	itt	pl
 8084174:	2201      	movpl	r2, #1
 8084176:	601a      	strpl	r2, [r3, #0]
 8084178:	4b10      	ldr	r3, [pc, #64]	; (80841bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808417a:	681a      	ldr	r2, [r3, #0]
 808417c:	07d2      	lsls	r2, r2, #31
 808417e:	bf5c      	itt	pl
 8084180:	2201      	movpl	r2, #1
 8084182:	601a      	strpl	r2, [r3, #0]
 8084184:	4b0e      	ldr	r3, [pc, #56]	; (80841c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8084186:	681a      	ldr	r2, [r3, #0]
 8084188:	07d0      	lsls	r0, r2, #31
 808418a:	bf5c      	itt	pl
 808418c:	2201      	movpl	r2, #1
 808418e:	601a      	strpl	r2, [r3, #0]
 8084190:	4b0c      	ldr	r3, [pc, #48]	; (80841c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8084192:	681a      	ldr	r2, [r3, #0]
 8084194:	07d1      	lsls	r1, r2, #31
 8084196:	bf5c      	itt	pl
 8084198:	2201      	movpl	r2, #1
 808419a:	601a      	strpl	r2, [r3, #0]
 808419c:	4b0a      	ldr	r3, [pc, #40]	; (80841c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808419e:	681a      	ldr	r2, [r3, #0]
 80841a0:	07d2      	lsls	r2, r2, #31
 80841a2:	bf5c      	itt	pl
 80841a4:	2201      	movpl	r2, #1
 80841a6:	601a      	strpl	r2, [r3, #0]
 80841a8:	4770      	bx	lr
 80841aa:	bf00      	nop
 80841ac:	20000934 	.word	0x20000934
 80841b0:	20000930 	.word	0x20000930
 80841b4:	2000092c 	.word	0x2000092c
 80841b8:	20000928 	.word	0x20000928
 80841bc:	20000924 	.word	0x20000924
 80841c0:	20000920 	.word	0x20000920
 80841c4:	2000091c 	.word	0x2000091c
 80841c8:	20000918 	.word	0x20000918

080841cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80841cc:	4b18      	ldr	r3, [pc, #96]	; (8084230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80841ce:	681a      	ldr	r2, [r3, #0]
 80841d0:	07d1      	lsls	r1, r2, #31
 80841d2:	bf5c      	itt	pl
 80841d4:	2201      	movpl	r2, #1
 80841d6:	601a      	strpl	r2, [r3, #0]
 80841d8:	4b16      	ldr	r3, [pc, #88]	; (8084234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80841da:	681a      	ldr	r2, [r3, #0]
 80841dc:	07d2      	lsls	r2, r2, #31
 80841de:	bf5c      	itt	pl
 80841e0:	2201      	movpl	r2, #1
 80841e2:	601a      	strpl	r2, [r3, #0]
 80841e4:	4b14      	ldr	r3, [pc, #80]	; (8084238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80841e6:	681a      	ldr	r2, [r3, #0]
 80841e8:	07d0      	lsls	r0, r2, #31
 80841ea:	bf5c      	itt	pl
 80841ec:	2201      	movpl	r2, #1
 80841ee:	601a      	strpl	r2, [r3, #0]
 80841f0:	4b12      	ldr	r3, [pc, #72]	; (808423c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80841f2:	681a      	ldr	r2, [r3, #0]
 80841f4:	07d1      	lsls	r1, r2, #31
 80841f6:	bf5c      	itt	pl
 80841f8:	2201      	movpl	r2, #1
 80841fa:	601a      	strpl	r2, [r3, #0]
 80841fc:	4b10      	ldr	r3, [pc, #64]	; (8084240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80841fe:	681a      	ldr	r2, [r3, #0]
 8084200:	07d2      	lsls	r2, r2, #31
 8084202:	bf5c      	itt	pl
 8084204:	2201      	movpl	r2, #1
 8084206:	601a      	strpl	r2, [r3, #0]
 8084208:	4b0e      	ldr	r3, [pc, #56]	; (8084244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808420a:	681a      	ldr	r2, [r3, #0]
 808420c:	07d0      	lsls	r0, r2, #31
 808420e:	bf5c      	itt	pl
 8084210:	2201      	movpl	r2, #1
 8084212:	601a      	strpl	r2, [r3, #0]
 8084214:	4b0c      	ldr	r3, [pc, #48]	; (8084248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8084216:	681a      	ldr	r2, [r3, #0]
 8084218:	07d1      	lsls	r1, r2, #31
 808421a:	bf5c      	itt	pl
 808421c:	2201      	movpl	r2, #1
 808421e:	601a      	strpl	r2, [r3, #0]
 8084220:	4b0a      	ldr	r3, [pc, #40]	; (808424c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8084222:	681a      	ldr	r2, [r3, #0]
 8084224:	07d2      	lsls	r2, r2, #31
 8084226:	bf5c      	itt	pl
 8084228:	2201      	movpl	r2, #1
 808422a:	601a      	strpl	r2, [r3, #0]
 808422c:	4770      	bx	lr
 808422e:	bf00      	nop
 8084230:	20000954 	.word	0x20000954
 8084234:	20000950 	.word	0x20000950
 8084238:	2000094c 	.word	0x2000094c
 808423c:	20000948 	.word	0x20000948
 8084240:	20000944 	.word	0x20000944
 8084244:	20000940 	.word	0x20000940
 8084248:	2000093c 	.word	0x2000093c
 808424c:	20000938 	.word	0x20000938

08084250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8084250:	4b24      	ldr	r3, [pc, #144]	; (80842e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8084252:	681a      	ldr	r2, [r3, #0]
 8084254:	07d0      	lsls	r0, r2, #31
 8084256:	bf5c      	itt	pl
 8084258:	2201      	movpl	r2, #1
 808425a:	601a      	strpl	r2, [r3, #0]
 808425c:	4b22      	ldr	r3, [pc, #136]	; (80842e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808425e:	681a      	ldr	r2, [r3, #0]
 8084260:	07d1      	lsls	r1, r2, #31
 8084262:	bf5c      	itt	pl
 8084264:	2201      	movpl	r2, #1
 8084266:	601a      	strpl	r2, [r3, #0]
 8084268:	4b20      	ldr	r3, [pc, #128]	; (80842ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808426a:	681a      	ldr	r2, [r3, #0]
 808426c:	07d2      	lsls	r2, r2, #31
 808426e:	bf5c      	itt	pl
 8084270:	2201      	movpl	r2, #1
 8084272:	601a      	strpl	r2, [r3, #0]
 8084274:	4b1e      	ldr	r3, [pc, #120]	; (80842f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8084276:	681a      	ldr	r2, [r3, #0]
 8084278:	07d0      	lsls	r0, r2, #31
 808427a:	bf5c      	itt	pl
 808427c:	2201      	movpl	r2, #1
 808427e:	601a      	strpl	r2, [r3, #0]
 8084280:	4b1c      	ldr	r3, [pc, #112]	; (80842f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8084282:	681a      	ldr	r2, [r3, #0]
 8084284:	07d1      	lsls	r1, r2, #31
 8084286:	bf5c      	itt	pl
 8084288:	2201      	movpl	r2, #1
 808428a:	601a      	strpl	r2, [r3, #0]
 808428c:	4b1a      	ldr	r3, [pc, #104]	; (80842f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808428e:	681a      	ldr	r2, [r3, #0]
 8084290:	07d2      	lsls	r2, r2, #31
 8084292:	bf5c      	itt	pl
 8084294:	2201      	movpl	r2, #1
 8084296:	601a      	strpl	r2, [r3, #0]
 8084298:	4b18      	ldr	r3, [pc, #96]	; (80842fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808429a:	681a      	ldr	r2, [r3, #0]
 808429c:	07d0      	lsls	r0, r2, #31
 808429e:	bf5c      	itt	pl
 80842a0:	2201      	movpl	r2, #1
 80842a2:	601a      	strpl	r2, [r3, #0]
 80842a4:	4b16      	ldr	r3, [pc, #88]	; (8084300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80842a6:	681a      	ldr	r2, [r3, #0]
 80842a8:	07d1      	lsls	r1, r2, #31
 80842aa:	bf5c      	itt	pl
 80842ac:	2201      	movpl	r2, #1
 80842ae:	601a      	strpl	r2, [r3, #0]
 80842b0:	4b14      	ldr	r3, [pc, #80]	; (8084304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80842b2:	681a      	ldr	r2, [r3, #0]
 80842b4:	07d2      	lsls	r2, r2, #31
 80842b6:	bf5c      	itt	pl
 80842b8:	2201      	movpl	r2, #1
 80842ba:	601a      	strpl	r2, [r3, #0]
 80842bc:	4b12      	ldr	r3, [pc, #72]	; (8084308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80842be:	681a      	ldr	r2, [r3, #0]
 80842c0:	07d0      	lsls	r0, r2, #31
 80842c2:	bf5c      	itt	pl
 80842c4:	2201      	movpl	r2, #1
 80842c6:	601a      	strpl	r2, [r3, #0]
 80842c8:	4b10      	ldr	r3, [pc, #64]	; (808430c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80842ca:	681a      	ldr	r2, [r3, #0]
 80842cc:	07d1      	lsls	r1, r2, #31
 80842ce:	bf5c      	itt	pl
 80842d0:	2201      	movpl	r2, #1
 80842d2:	601a      	strpl	r2, [r3, #0]
 80842d4:	4b0e      	ldr	r3, [pc, #56]	; (8084310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80842d6:	681a      	ldr	r2, [r3, #0]
 80842d8:	07d2      	lsls	r2, r2, #31
 80842da:	bf5c      	itt	pl
 80842dc:	2201      	movpl	r2, #1
 80842de:	601a      	strpl	r2, [r3, #0]
 80842e0:	4770      	bx	lr
 80842e2:	bf00      	nop
 80842e4:	20000984 	.word	0x20000984
 80842e8:	20000980 	.word	0x20000980
 80842ec:	2000097c 	.word	0x2000097c
 80842f0:	20000978 	.word	0x20000978
 80842f4:	20000974 	.word	0x20000974
 80842f8:	20000970 	.word	0x20000970
 80842fc:	2000096c 	.word	0x2000096c
 8084300:	20000968 	.word	0x20000968
 8084304:	20000964 	.word	0x20000964
 8084308:	20000960 	.word	0x20000960
 808430c:	2000095c 	.word	0x2000095c
 8084310:	20000958 	.word	0x20000958

08084314 <__aeabi_drsub>:
 8084314:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8084318:	e002      	b.n	8084320 <__adddf3>
 808431a:	bf00      	nop

0808431c <__aeabi_dsub>:
 808431c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08084320 <__adddf3>:
 8084320:	b530      	push	{r4, r5, lr}
 8084322:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8084326:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808432a:	ea94 0f05 	teq	r4, r5
 808432e:	bf08      	it	eq
 8084330:	ea90 0f02 	teqeq	r0, r2
 8084334:	bf1f      	itttt	ne
 8084336:	ea54 0c00 	orrsne.w	ip, r4, r0
 808433a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808433e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8084342:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084346:	f000 80e2 	beq.w	808450e <__adddf3+0x1ee>
 808434a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808434e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8084352:	bfb8      	it	lt
 8084354:	426d      	neglt	r5, r5
 8084356:	dd0c      	ble.n	8084372 <__adddf3+0x52>
 8084358:	442c      	add	r4, r5
 808435a:	ea80 0202 	eor.w	r2, r0, r2
 808435e:	ea81 0303 	eor.w	r3, r1, r3
 8084362:	ea82 0000 	eor.w	r0, r2, r0
 8084366:	ea83 0101 	eor.w	r1, r3, r1
 808436a:	ea80 0202 	eor.w	r2, r0, r2
 808436e:	ea81 0303 	eor.w	r3, r1, r3
 8084372:	2d36      	cmp	r5, #54	; 0x36
 8084374:	bf88      	it	hi
 8084376:	bd30      	pophi	{r4, r5, pc}
 8084378:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808437c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084380:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8084384:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8084388:	d002      	beq.n	8084390 <__adddf3+0x70>
 808438a:	4240      	negs	r0, r0
 808438c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084390:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8084394:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084398:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808439c:	d002      	beq.n	80843a4 <__adddf3+0x84>
 808439e:	4252      	negs	r2, r2
 80843a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80843a4:	ea94 0f05 	teq	r4, r5
 80843a8:	f000 80a7 	beq.w	80844fa <__adddf3+0x1da>
 80843ac:	f1a4 0401 	sub.w	r4, r4, #1
 80843b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80843b4:	db0d      	blt.n	80843d2 <__adddf3+0xb2>
 80843b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80843ba:	fa22 f205 	lsr.w	r2, r2, r5
 80843be:	1880      	adds	r0, r0, r2
 80843c0:	f141 0100 	adc.w	r1, r1, #0
 80843c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80843c8:	1880      	adds	r0, r0, r2
 80843ca:	fa43 f305 	asr.w	r3, r3, r5
 80843ce:	4159      	adcs	r1, r3
 80843d0:	e00e      	b.n	80843f0 <__adddf3+0xd0>
 80843d2:	f1a5 0520 	sub.w	r5, r5, #32
 80843d6:	f10e 0e20 	add.w	lr, lr, #32
 80843da:	2a01      	cmp	r2, #1
 80843dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80843e0:	bf28      	it	cs
 80843e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80843e6:	fa43 f305 	asr.w	r3, r3, r5
 80843ea:	18c0      	adds	r0, r0, r3
 80843ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80843f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80843f4:	d507      	bpl.n	8084406 <__adddf3+0xe6>
 80843f6:	f04f 0e00 	mov.w	lr, #0
 80843fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80843fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8084402:	eb6e 0101 	sbc.w	r1, lr, r1
 8084406:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808440a:	d31b      	bcc.n	8084444 <__adddf3+0x124>
 808440c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8084410:	d30c      	bcc.n	808442c <__adddf3+0x10c>
 8084412:	0849      	lsrs	r1, r1, #1
 8084414:	ea5f 0030 	movs.w	r0, r0, rrx
 8084418:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808441c:	f104 0401 	add.w	r4, r4, #1
 8084420:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8084424:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8084428:	f080 809a 	bcs.w	8084560 <__adddf3+0x240>
 808442c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084430:	bf08      	it	eq
 8084432:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084436:	f150 0000 	adcs.w	r0, r0, #0
 808443a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808443e:	ea41 0105 	orr.w	r1, r1, r5
 8084442:	bd30      	pop	{r4, r5, pc}
 8084444:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8084448:	4140      	adcs	r0, r0
 808444a:	eb41 0101 	adc.w	r1, r1, r1
 808444e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084452:	f1a4 0401 	sub.w	r4, r4, #1
 8084456:	d1e9      	bne.n	808442c <__adddf3+0x10c>
 8084458:	f091 0f00 	teq	r1, #0
 808445c:	bf04      	itt	eq
 808445e:	4601      	moveq	r1, r0
 8084460:	2000      	moveq	r0, #0
 8084462:	fab1 f381 	clz	r3, r1
 8084466:	bf08      	it	eq
 8084468:	3320      	addeq	r3, #32
 808446a:	f1a3 030b 	sub.w	r3, r3, #11
 808446e:	f1b3 0220 	subs.w	r2, r3, #32
 8084472:	da0c      	bge.n	808448e <__adddf3+0x16e>
 8084474:	320c      	adds	r2, #12
 8084476:	dd08      	ble.n	808448a <__adddf3+0x16a>
 8084478:	f102 0c14 	add.w	ip, r2, #20
 808447c:	f1c2 020c 	rsb	r2, r2, #12
 8084480:	fa01 f00c 	lsl.w	r0, r1, ip
 8084484:	fa21 f102 	lsr.w	r1, r1, r2
 8084488:	e00c      	b.n	80844a4 <__adddf3+0x184>
 808448a:	f102 0214 	add.w	r2, r2, #20
 808448e:	bfd8      	it	le
 8084490:	f1c2 0c20 	rsble	ip, r2, #32
 8084494:	fa01 f102 	lsl.w	r1, r1, r2
 8084498:	fa20 fc0c 	lsr.w	ip, r0, ip
 808449c:	bfdc      	itt	le
 808449e:	ea41 010c 	orrle.w	r1, r1, ip
 80844a2:	4090      	lslle	r0, r2
 80844a4:	1ae4      	subs	r4, r4, r3
 80844a6:	bfa2      	ittt	ge
 80844a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80844ac:	4329      	orrge	r1, r5
 80844ae:	bd30      	popge	{r4, r5, pc}
 80844b0:	ea6f 0404 	mvn.w	r4, r4
 80844b4:	3c1f      	subs	r4, #31
 80844b6:	da1c      	bge.n	80844f2 <__adddf3+0x1d2>
 80844b8:	340c      	adds	r4, #12
 80844ba:	dc0e      	bgt.n	80844da <__adddf3+0x1ba>
 80844bc:	f104 0414 	add.w	r4, r4, #20
 80844c0:	f1c4 0220 	rsb	r2, r4, #32
 80844c4:	fa20 f004 	lsr.w	r0, r0, r4
 80844c8:	fa01 f302 	lsl.w	r3, r1, r2
 80844cc:	ea40 0003 	orr.w	r0, r0, r3
 80844d0:	fa21 f304 	lsr.w	r3, r1, r4
 80844d4:	ea45 0103 	orr.w	r1, r5, r3
 80844d8:	bd30      	pop	{r4, r5, pc}
 80844da:	f1c4 040c 	rsb	r4, r4, #12
 80844de:	f1c4 0220 	rsb	r2, r4, #32
 80844e2:	fa20 f002 	lsr.w	r0, r0, r2
 80844e6:	fa01 f304 	lsl.w	r3, r1, r4
 80844ea:	ea40 0003 	orr.w	r0, r0, r3
 80844ee:	4629      	mov	r1, r5
 80844f0:	bd30      	pop	{r4, r5, pc}
 80844f2:	fa21 f004 	lsr.w	r0, r1, r4
 80844f6:	4629      	mov	r1, r5
 80844f8:	bd30      	pop	{r4, r5, pc}
 80844fa:	f094 0f00 	teq	r4, #0
 80844fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8084502:	bf06      	itte	eq
 8084504:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8084508:	3401      	addeq	r4, #1
 808450a:	3d01      	subne	r5, #1
 808450c:	e74e      	b.n	80843ac <__adddf3+0x8c>
 808450e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084512:	bf18      	it	ne
 8084514:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8084518:	d029      	beq.n	808456e <__adddf3+0x24e>
 808451a:	ea94 0f05 	teq	r4, r5
 808451e:	bf08      	it	eq
 8084520:	ea90 0f02 	teqeq	r0, r2
 8084524:	d005      	beq.n	8084532 <__adddf3+0x212>
 8084526:	ea54 0c00 	orrs.w	ip, r4, r0
 808452a:	bf04      	itt	eq
 808452c:	4619      	moveq	r1, r3
 808452e:	4610      	moveq	r0, r2
 8084530:	bd30      	pop	{r4, r5, pc}
 8084532:	ea91 0f03 	teq	r1, r3
 8084536:	bf1e      	ittt	ne
 8084538:	2100      	movne	r1, #0
 808453a:	2000      	movne	r0, #0
 808453c:	bd30      	popne	{r4, r5, pc}
 808453e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8084542:	d105      	bne.n	8084550 <__adddf3+0x230>
 8084544:	0040      	lsls	r0, r0, #1
 8084546:	4149      	adcs	r1, r1
 8084548:	bf28      	it	cs
 808454a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808454e:	bd30      	pop	{r4, r5, pc}
 8084550:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8084554:	bf3c      	itt	cc
 8084556:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808455a:	bd30      	popcc	{r4, r5, pc}
 808455c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084560:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8084564:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084568:	f04f 0000 	mov.w	r0, #0
 808456c:	bd30      	pop	{r4, r5, pc}
 808456e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8084572:	bf1a      	itte	ne
 8084574:	4619      	movne	r1, r3
 8084576:	4610      	movne	r0, r2
 8084578:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808457c:	bf1c      	itt	ne
 808457e:	460b      	movne	r3, r1
 8084580:	4602      	movne	r2, r0
 8084582:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084586:	bf06      	itte	eq
 8084588:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808458c:	ea91 0f03 	teqeq	r1, r3
 8084590:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8084594:	bd30      	pop	{r4, r5, pc}
 8084596:	bf00      	nop

08084598 <__aeabi_ui2d>:
 8084598:	f090 0f00 	teq	r0, #0
 808459c:	bf04      	itt	eq
 808459e:	2100      	moveq	r1, #0
 80845a0:	4770      	bxeq	lr
 80845a2:	b530      	push	{r4, r5, lr}
 80845a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80845a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80845ac:	f04f 0500 	mov.w	r5, #0
 80845b0:	f04f 0100 	mov.w	r1, #0
 80845b4:	e750      	b.n	8084458 <__adddf3+0x138>
 80845b6:	bf00      	nop

080845b8 <__aeabi_i2d>:
 80845b8:	f090 0f00 	teq	r0, #0
 80845bc:	bf04      	itt	eq
 80845be:	2100      	moveq	r1, #0
 80845c0:	4770      	bxeq	lr
 80845c2:	b530      	push	{r4, r5, lr}
 80845c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80845c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80845cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80845d0:	bf48      	it	mi
 80845d2:	4240      	negmi	r0, r0
 80845d4:	f04f 0100 	mov.w	r1, #0
 80845d8:	e73e      	b.n	8084458 <__adddf3+0x138>
 80845da:	bf00      	nop

080845dc <__aeabi_f2d>:
 80845dc:	0042      	lsls	r2, r0, #1
 80845de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80845e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80845e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80845ea:	bf1f      	itttt	ne
 80845ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80845f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80845f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80845f8:	4770      	bxne	lr
 80845fa:	f092 0f00 	teq	r2, #0
 80845fe:	bf14      	ite	ne
 8084600:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8084604:	4770      	bxeq	lr
 8084606:	b530      	push	{r4, r5, lr}
 8084608:	f44f 7460 	mov.w	r4, #896	; 0x380
 808460c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8084610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084614:	e720      	b.n	8084458 <__adddf3+0x138>
 8084616:	bf00      	nop

08084618 <__aeabi_ul2d>:
 8084618:	ea50 0201 	orrs.w	r2, r0, r1
 808461c:	bf08      	it	eq
 808461e:	4770      	bxeq	lr
 8084620:	b530      	push	{r4, r5, lr}
 8084622:	f04f 0500 	mov.w	r5, #0
 8084626:	e00a      	b.n	808463e <__aeabi_l2d+0x16>

08084628 <__aeabi_l2d>:
 8084628:	ea50 0201 	orrs.w	r2, r0, r1
 808462c:	bf08      	it	eq
 808462e:	4770      	bxeq	lr
 8084630:	b530      	push	{r4, r5, lr}
 8084632:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8084636:	d502      	bpl.n	808463e <__aeabi_l2d+0x16>
 8084638:	4240      	negs	r0, r0
 808463a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808463e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8084642:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8084646:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808464a:	f43f aedc 	beq.w	8084406 <__adddf3+0xe6>
 808464e:	f04f 0203 	mov.w	r2, #3
 8084652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084656:	bf18      	it	ne
 8084658:	3203      	addne	r2, #3
 808465a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808465e:	bf18      	it	ne
 8084660:	3203      	addne	r2, #3
 8084662:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8084666:	f1c2 0320 	rsb	r3, r2, #32
 808466a:	fa00 fc03 	lsl.w	ip, r0, r3
 808466e:	fa20 f002 	lsr.w	r0, r0, r2
 8084672:	fa01 fe03 	lsl.w	lr, r1, r3
 8084676:	ea40 000e 	orr.w	r0, r0, lr
 808467a:	fa21 f102 	lsr.w	r1, r1, r2
 808467e:	4414      	add	r4, r2
 8084680:	e6c1      	b.n	8084406 <__adddf3+0xe6>
 8084682:	bf00      	nop

08084684 <__aeabi_dmul>:
 8084684:	b570      	push	{r4, r5, r6, lr}
 8084686:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808468a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808468e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8084692:	bf1d      	ittte	ne
 8084694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084698:	ea94 0f0c 	teqne	r4, ip
 808469c:	ea95 0f0c 	teqne	r5, ip
 80846a0:	f000 f8de 	bleq	8084860 <__aeabi_dmul+0x1dc>
 80846a4:	442c      	add	r4, r5
 80846a6:	ea81 0603 	eor.w	r6, r1, r3
 80846aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80846ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80846b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80846b6:	bf18      	it	ne
 80846b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80846bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80846c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80846c4:	d038      	beq.n	8084738 <__aeabi_dmul+0xb4>
 80846c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80846ca:	f04f 0500 	mov.w	r5, #0
 80846ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80846d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80846d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80846da:	f04f 0600 	mov.w	r6, #0
 80846de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80846e2:	f09c 0f00 	teq	ip, #0
 80846e6:	bf18      	it	ne
 80846e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80846ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80846f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80846f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80846f8:	d204      	bcs.n	8084704 <__aeabi_dmul+0x80>
 80846fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80846fe:	416d      	adcs	r5, r5
 8084700:	eb46 0606 	adc.w	r6, r6, r6
 8084704:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8084708:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808470c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8084710:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8084714:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8084718:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808471c:	bf88      	it	hi
 808471e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084722:	d81e      	bhi.n	8084762 <__aeabi_dmul+0xde>
 8084724:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8084728:	bf08      	it	eq
 808472a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808472e:	f150 0000 	adcs.w	r0, r0, #0
 8084732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084736:	bd70      	pop	{r4, r5, r6, pc}
 8084738:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808473c:	ea46 0101 	orr.w	r1, r6, r1
 8084740:	ea40 0002 	orr.w	r0, r0, r2
 8084744:	ea81 0103 	eor.w	r1, r1, r3
 8084748:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808474c:	bfc2      	ittt	gt
 808474e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8084752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8084756:	bd70      	popgt	{r4, r5, r6, pc}
 8084758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808475c:	f04f 0e00 	mov.w	lr, #0
 8084760:	3c01      	subs	r4, #1
 8084762:	f300 80ab 	bgt.w	80848bc <__aeabi_dmul+0x238>
 8084766:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808476a:	bfde      	ittt	le
 808476c:	2000      	movle	r0, #0
 808476e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8084772:	bd70      	pople	{r4, r5, r6, pc}
 8084774:	f1c4 0400 	rsb	r4, r4, #0
 8084778:	3c20      	subs	r4, #32
 808477a:	da35      	bge.n	80847e8 <__aeabi_dmul+0x164>
 808477c:	340c      	adds	r4, #12
 808477e:	dc1b      	bgt.n	80847b8 <__aeabi_dmul+0x134>
 8084780:	f104 0414 	add.w	r4, r4, #20
 8084784:	f1c4 0520 	rsb	r5, r4, #32
 8084788:	fa00 f305 	lsl.w	r3, r0, r5
 808478c:	fa20 f004 	lsr.w	r0, r0, r4
 8084790:	fa01 f205 	lsl.w	r2, r1, r5
 8084794:	ea40 0002 	orr.w	r0, r0, r2
 8084798:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808479c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80847a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80847a4:	fa21 f604 	lsr.w	r6, r1, r4
 80847a8:	eb42 0106 	adc.w	r1, r2, r6
 80847ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80847b0:	bf08      	it	eq
 80847b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80847b6:	bd70      	pop	{r4, r5, r6, pc}
 80847b8:	f1c4 040c 	rsb	r4, r4, #12
 80847bc:	f1c4 0520 	rsb	r5, r4, #32
 80847c0:	fa00 f304 	lsl.w	r3, r0, r4
 80847c4:	fa20 f005 	lsr.w	r0, r0, r5
 80847c8:	fa01 f204 	lsl.w	r2, r1, r4
 80847cc:	ea40 0002 	orr.w	r0, r0, r2
 80847d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80847d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80847d8:	f141 0100 	adc.w	r1, r1, #0
 80847dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80847e0:	bf08      	it	eq
 80847e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80847e6:	bd70      	pop	{r4, r5, r6, pc}
 80847e8:	f1c4 0520 	rsb	r5, r4, #32
 80847ec:	fa00 f205 	lsl.w	r2, r0, r5
 80847f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80847f4:	fa20 f304 	lsr.w	r3, r0, r4
 80847f8:	fa01 f205 	lsl.w	r2, r1, r5
 80847fc:	ea43 0302 	orr.w	r3, r3, r2
 8084800:	fa21 f004 	lsr.w	r0, r1, r4
 8084804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084808:	fa21 f204 	lsr.w	r2, r1, r4
 808480c:	ea20 0002 	bic.w	r0, r0, r2
 8084810:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8084814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084818:	bf08      	it	eq
 808481a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808481e:	bd70      	pop	{r4, r5, r6, pc}
 8084820:	f094 0f00 	teq	r4, #0
 8084824:	d10f      	bne.n	8084846 <__aeabi_dmul+0x1c2>
 8084826:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808482a:	0040      	lsls	r0, r0, #1
 808482c:	eb41 0101 	adc.w	r1, r1, r1
 8084830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084834:	bf08      	it	eq
 8084836:	3c01      	subeq	r4, #1
 8084838:	d0f7      	beq.n	808482a <__aeabi_dmul+0x1a6>
 808483a:	ea41 0106 	orr.w	r1, r1, r6
 808483e:	f095 0f00 	teq	r5, #0
 8084842:	bf18      	it	ne
 8084844:	4770      	bxne	lr
 8084846:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808484a:	0052      	lsls	r2, r2, #1
 808484c:	eb43 0303 	adc.w	r3, r3, r3
 8084850:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8084854:	bf08      	it	eq
 8084856:	3d01      	subeq	r5, #1
 8084858:	d0f7      	beq.n	808484a <__aeabi_dmul+0x1c6>
 808485a:	ea43 0306 	orr.w	r3, r3, r6
 808485e:	4770      	bx	lr
 8084860:	ea94 0f0c 	teq	r4, ip
 8084864:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084868:	bf18      	it	ne
 808486a:	ea95 0f0c 	teqne	r5, ip
 808486e:	d00c      	beq.n	808488a <__aeabi_dmul+0x206>
 8084870:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084874:	bf18      	it	ne
 8084876:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808487a:	d1d1      	bne.n	8084820 <__aeabi_dmul+0x19c>
 808487c:	ea81 0103 	eor.w	r1, r1, r3
 8084880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084884:	f04f 0000 	mov.w	r0, #0
 8084888:	bd70      	pop	{r4, r5, r6, pc}
 808488a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808488e:	bf06      	itte	eq
 8084890:	4610      	moveq	r0, r2
 8084892:	4619      	moveq	r1, r3
 8084894:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084898:	d019      	beq.n	80848ce <__aeabi_dmul+0x24a>
 808489a:	ea94 0f0c 	teq	r4, ip
 808489e:	d102      	bne.n	80848a6 <__aeabi_dmul+0x222>
 80848a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80848a4:	d113      	bne.n	80848ce <__aeabi_dmul+0x24a>
 80848a6:	ea95 0f0c 	teq	r5, ip
 80848aa:	d105      	bne.n	80848b8 <__aeabi_dmul+0x234>
 80848ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80848b0:	bf1c      	itt	ne
 80848b2:	4610      	movne	r0, r2
 80848b4:	4619      	movne	r1, r3
 80848b6:	d10a      	bne.n	80848ce <__aeabi_dmul+0x24a>
 80848b8:	ea81 0103 	eor.w	r1, r1, r3
 80848bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80848c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80848c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80848c8:	f04f 0000 	mov.w	r0, #0
 80848cc:	bd70      	pop	{r4, r5, r6, pc}
 80848ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80848d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80848d6:	bd70      	pop	{r4, r5, r6, pc}

080848d8 <__aeabi_ddiv>:
 80848d8:	b570      	push	{r4, r5, r6, lr}
 80848da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80848de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80848e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80848e6:	bf1d      	ittte	ne
 80848e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80848ec:	ea94 0f0c 	teqne	r4, ip
 80848f0:	ea95 0f0c 	teqne	r5, ip
 80848f4:	f000 f8a7 	bleq	8084a46 <__aeabi_ddiv+0x16e>
 80848f8:	eba4 0405 	sub.w	r4, r4, r5
 80848fc:	ea81 0e03 	eor.w	lr, r1, r3
 8084900:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084904:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8084908:	f000 8088 	beq.w	8084a1c <__aeabi_ddiv+0x144>
 808490c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8084910:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8084914:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8084918:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808491c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8084920:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8084924:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8084928:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808492c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8084930:	429d      	cmp	r5, r3
 8084932:	bf08      	it	eq
 8084934:	4296      	cmpeq	r6, r2
 8084936:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808493a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808493e:	d202      	bcs.n	8084946 <__aeabi_ddiv+0x6e>
 8084940:	085b      	lsrs	r3, r3, #1
 8084942:	ea4f 0232 	mov.w	r2, r2, rrx
 8084946:	1ab6      	subs	r6, r6, r2
 8084948:	eb65 0503 	sbc.w	r5, r5, r3
 808494c:	085b      	lsrs	r3, r3, #1
 808494e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084952:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8084956:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808495a:	ebb6 0e02 	subs.w	lr, r6, r2
 808495e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084962:	bf22      	ittt	cs
 8084964:	1ab6      	subcs	r6, r6, r2
 8084966:	4675      	movcs	r5, lr
 8084968:	ea40 000c 	orrcs.w	r0, r0, ip
 808496c:	085b      	lsrs	r3, r3, #1
 808496e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084972:	ebb6 0e02 	subs.w	lr, r6, r2
 8084976:	eb75 0e03 	sbcs.w	lr, r5, r3
 808497a:	bf22      	ittt	cs
 808497c:	1ab6      	subcs	r6, r6, r2
 808497e:	4675      	movcs	r5, lr
 8084980:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084984:	085b      	lsrs	r3, r3, #1
 8084986:	ea4f 0232 	mov.w	r2, r2, rrx
 808498a:	ebb6 0e02 	subs.w	lr, r6, r2
 808498e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084992:	bf22      	ittt	cs
 8084994:	1ab6      	subcs	r6, r6, r2
 8084996:	4675      	movcs	r5, lr
 8084998:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808499c:	085b      	lsrs	r3, r3, #1
 808499e:	ea4f 0232 	mov.w	r2, r2, rrx
 80849a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80849a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80849aa:	bf22      	ittt	cs
 80849ac:	1ab6      	subcs	r6, r6, r2
 80849ae:	4675      	movcs	r5, lr
 80849b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80849b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80849b8:	d018      	beq.n	80849ec <__aeabi_ddiv+0x114>
 80849ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80849be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80849c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80849c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80849ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80849ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80849d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80849d6:	d1c0      	bne.n	808495a <__aeabi_ddiv+0x82>
 80849d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80849dc:	d10b      	bne.n	80849f6 <__aeabi_ddiv+0x11e>
 80849de:	ea41 0100 	orr.w	r1, r1, r0
 80849e2:	f04f 0000 	mov.w	r0, #0
 80849e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80849ea:	e7b6      	b.n	808495a <__aeabi_ddiv+0x82>
 80849ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80849f0:	bf04      	itt	eq
 80849f2:	4301      	orreq	r1, r0
 80849f4:	2000      	moveq	r0, #0
 80849f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80849fa:	bf88      	it	hi
 80849fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084a00:	f63f aeaf 	bhi.w	8084762 <__aeabi_dmul+0xde>
 8084a04:	ebb5 0c03 	subs.w	ip, r5, r3
 8084a08:	bf04      	itt	eq
 8084a0a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8084a0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084a12:	f150 0000 	adcs.w	r0, r0, #0
 8084a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084a1a:	bd70      	pop	{r4, r5, r6, pc}
 8084a1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8084a20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8084a24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8084a28:	bfc2      	ittt	gt
 8084a2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8084a2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8084a32:	bd70      	popgt	{r4, r5, r6, pc}
 8084a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084a38:	f04f 0e00 	mov.w	lr, #0
 8084a3c:	3c01      	subs	r4, #1
 8084a3e:	e690      	b.n	8084762 <__aeabi_dmul+0xde>
 8084a40:	ea45 0e06 	orr.w	lr, r5, r6
 8084a44:	e68d      	b.n	8084762 <__aeabi_dmul+0xde>
 8084a46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084a4a:	ea94 0f0c 	teq	r4, ip
 8084a4e:	bf08      	it	eq
 8084a50:	ea95 0f0c 	teqeq	r5, ip
 8084a54:	f43f af3b 	beq.w	80848ce <__aeabi_dmul+0x24a>
 8084a58:	ea94 0f0c 	teq	r4, ip
 8084a5c:	d10a      	bne.n	8084a74 <__aeabi_ddiv+0x19c>
 8084a5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084a62:	f47f af34 	bne.w	80848ce <__aeabi_dmul+0x24a>
 8084a66:	ea95 0f0c 	teq	r5, ip
 8084a6a:	f47f af25 	bne.w	80848b8 <__aeabi_dmul+0x234>
 8084a6e:	4610      	mov	r0, r2
 8084a70:	4619      	mov	r1, r3
 8084a72:	e72c      	b.n	80848ce <__aeabi_dmul+0x24a>
 8084a74:	ea95 0f0c 	teq	r5, ip
 8084a78:	d106      	bne.n	8084a88 <__aeabi_ddiv+0x1b0>
 8084a7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084a7e:	f43f aefd 	beq.w	808487c <__aeabi_dmul+0x1f8>
 8084a82:	4610      	mov	r0, r2
 8084a84:	4619      	mov	r1, r3
 8084a86:	e722      	b.n	80848ce <__aeabi_dmul+0x24a>
 8084a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084a8c:	bf18      	it	ne
 8084a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084a92:	f47f aec5 	bne.w	8084820 <__aeabi_dmul+0x19c>
 8084a96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084a9a:	f47f af0d 	bne.w	80848b8 <__aeabi_dmul+0x234>
 8084a9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8084aa2:	f47f aeeb 	bne.w	808487c <__aeabi_dmul+0x1f8>
 8084aa6:	e712      	b.n	80848ce <__aeabi_dmul+0x24a>

08084aa8 <__aeabi_d2iz>:
 8084aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084ab0:	d215      	bcs.n	8084ade <__aeabi_d2iz+0x36>
 8084ab2:	d511      	bpl.n	8084ad8 <__aeabi_d2iz+0x30>
 8084ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084abc:	d912      	bls.n	8084ae4 <__aeabi_d2iz+0x3c>
 8084abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084ace:	fa23 f002 	lsr.w	r0, r3, r2
 8084ad2:	bf18      	it	ne
 8084ad4:	4240      	negne	r0, r0
 8084ad6:	4770      	bx	lr
 8084ad8:	f04f 0000 	mov.w	r0, #0
 8084adc:	4770      	bx	lr
 8084ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084ae2:	d105      	bne.n	8084af0 <__aeabi_d2iz+0x48>
 8084ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8084ae8:	bf08      	it	eq
 8084aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084aee:	4770      	bx	lr
 8084af0:	f04f 0000 	mov.w	r0, #0
 8084af4:	4770      	bx	lr
 8084af6:	bf00      	nop

08084af8 <__aeabi_d2f>:
 8084af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8084b00:	bf24      	itt	cs
 8084b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8084b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8084b0a:	d90d      	bls.n	8084b28 <__aeabi_d2f+0x30>
 8084b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8084b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8084b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8084b20:	bf08      	it	eq
 8084b22:	f020 0001 	biceq.w	r0, r0, #1
 8084b26:	4770      	bx	lr
 8084b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8084b2c:	d121      	bne.n	8084b72 <__aeabi_d2f+0x7a>
 8084b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8084b32:	bfbc      	itt	lt
 8084b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8084b38:	4770      	bxlt	lr
 8084b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8084b42:	f1c2 0218 	rsb	r2, r2, #24
 8084b46:	f1c2 0c20 	rsb	ip, r2, #32
 8084b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8084b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8084b52:	bf18      	it	ne
 8084b54:	f040 0001 	orrne.w	r0, r0, #1
 8084b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084b64:	ea40 000c 	orr.w	r0, r0, ip
 8084b68:	fa23 f302 	lsr.w	r3, r3, r2
 8084b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084b70:	e7cc      	b.n	8084b0c <__aeabi_d2f+0x14>
 8084b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8084b76:	d107      	bne.n	8084b88 <__aeabi_d2f+0x90>
 8084b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084b7c:	bf1e      	ittt	ne
 8084b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8084b86:	4770      	bxne	lr
 8084b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084b94:	4770      	bx	lr
 8084b96:	bf00      	nop

08084b98 <__aeabi_frsub>:
 8084b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084b9c:	e002      	b.n	8084ba4 <__addsf3>
 8084b9e:	bf00      	nop

08084ba0 <__aeabi_fsub>:
 8084ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08084ba4 <__addsf3>:
 8084ba4:	0042      	lsls	r2, r0, #1
 8084ba6:	bf1f      	itttt	ne
 8084ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084bac:	ea92 0f03 	teqne	r2, r3
 8084bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8084bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084bb8:	d06a      	beq.n	8084c90 <__addsf3+0xec>
 8084bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8084bc2:	bfc1      	itttt	gt
 8084bc4:	18d2      	addgt	r2, r2, r3
 8084bc6:	4041      	eorgt	r1, r0
 8084bc8:	4048      	eorgt	r0, r1
 8084bca:	4041      	eorgt	r1, r0
 8084bcc:	bfb8      	it	lt
 8084bce:	425b      	neglt	r3, r3
 8084bd0:	2b19      	cmp	r3, #25
 8084bd2:	bf88      	it	hi
 8084bd4:	4770      	bxhi	lr
 8084bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8084be2:	bf18      	it	ne
 8084be4:	4240      	negne	r0, r0
 8084be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8084bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8084bf2:	bf18      	it	ne
 8084bf4:	4249      	negne	r1, r1
 8084bf6:	ea92 0f03 	teq	r2, r3
 8084bfa:	d03f      	beq.n	8084c7c <__addsf3+0xd8>
 8084bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8084c00:	fa41 fc03 	asr.w	ip, r1, r3
 8084c04:	eb10 000c 	adds.w	r0, r0, ip
 8084c08:	f1c3 0320 	rsb	r3, r3, #32
 8084c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8084c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084c14:	d502      	bpl.n	8084c1c <__addsf3+0x78>
 8084c16:	4249      	negs	r1, r1
 8084c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8084c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8084c20:	d313      	bcc.n	8084c4a <__addsf3+0xa6>
 8084c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8084c26:	d306      	bcc.n	8084c36 <__addsf3+0x92>
 8084c28:	0840      	lsrs	r0, r0, #1
 8084c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8084c2e:	f102 0201 	add.w	r2, r2, #1
 8084c32:	2afe      	cmp	r2, #254	; 0xfe
 8084c34:	d251      	bcs.n	8084cda <__addsf3+0x136>
 8084c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8084c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084c3e:	bf08      	it	eq
 8084c40:	f020 0001 	biceq.w	r0, r0, #1
 8084c44:	ea40 0003 	orr.w	r0, r0, r3
 8084c48:	4770      	bx	lr
 8084c4a:	0049      	lsls	r1, r1, #1
 8084c4c:	eb40 0000 	adc.w	r0, r0, r0
 8084c50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8084c54:	f1a2 0201 	sub.w	r2, r2, #1
 8084c58:	d1ed      	bne.n	8084c36 <__addsf3+0x92>
 8084c5a:	fab0 fc80 	clz	ip, r0
 8084c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8084c62:	ebb2 020c 	subs.w	r2, r2, ip
 8084c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8084c6a:	bfaa      	itet	ge
 8084c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084c70:	4252      	neglt	r2, r2
 8084c72:	4318      	orrge	r0, r3
 8084c74:	bfbc      	itt	lt
 8084c76:	40d0      	lsrlt	r0, r2
 8084c78:	4318      	orrlt	r0, r3
 8084c7a:	4770      	bx	lr
 8084c7c:	f092 0f00 	teq	r2, #0
 8084c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084c84:	bf06      	itte	eq
 8084c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8084c8a:	3201      	addeq	r2, #1
 8084c8c:	3b01      	subne	r3, #1
 8084c8e:	e7b5      	b.n	8084bfc <__addsf3+0x58>
 8084c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084c98:	bf18      	it	ne
 8084c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084c9e:	d021      	beq.n	8084ce4 <__addsf3+0x140>
 8084ca0:	ea92 0f03 	teq	r2, r3
 8084ca4:	d004      	beq.n	8084cb0 <__addsf3+0x10c>
 8084ca6:	f092 0f00 	teq	r2, #0
 8084caa:	bf08      	it	eq
 8084cac:	4608      	moveq	r0, r1
 8084cae:	4770      	bx	lr
 8084cb0:	ea90 0f01 	teq	r0, r1
 8084cb4:	bf1c      	itt	ne
 8084cb6:	2000      	movne	r0, #0
 8084cb8:	4770      	bxne	lr
 8084cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084cbe:	d104      	bne.n	8084cca <__addsf3+0x126>
 8084cc0:	0040      	lsls	r0, r0, #1
 8084cc2:	bf28      	it	cs
 8084cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084cc8:	4770      	bx	lr
 8084cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084cce:	bf3c      	itt	cc
 8084cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8084cd4:	4770      	bxcc	lr
 8084cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8084cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084ce2:	4770      	bx	lr
 8084ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8084ce8:	bf16      	itet	ne
 8084cea:	4608      	movne	r0, r1
 8084cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8084cf0:	4601      	movne	r1, r0
 8084cf2:	0242      	lsls	r2, r0, #9
 8084cf4:	bf06      	itte	eq
 8084cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8084cfa:	ea90 0f01 	teqeq	r0, r1
 8084cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8084d02:	4770      	bx	lr

08084d04 <__aeabi_ui2f>:
 8084d04:	f04f 0300 	mov.w	r3, #0
 8084d08:	e004      	b.n	8084d14 <__aeabi_i2f+0x8>
 8084d0a:	bf00      	nop

08084d0c <__aeabi_i2f>:
 8084d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8084d10:	bf48      	it	mi
 8084d12:	4240      	negmi	r0, r0
 8084d14:	ea5f 0c00 	movs.w	ip, r0
 8084d18:	bf08      	it	eq
 8084d1a:	4770      	bxeq	lr
 8084d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8084d20:	4601      	mov	r1, r0
 8084d22:	f04f 0000 	mov.w	r0, #0
 8084d26:	e01c      	b.n	8084d62 <__aeabi_l2f+0x2a>

08084d28 <__aeabi_ul2f>:
 8084d28:	ea50 0201 	orrs.w	r2, r0, r1
 8084d2c:	bf08      	it	eq
 8084d2e:	4770      	bxeq	lr
 8084d30:	f04f 0300 	mov.w	r3, #0
 8084d34:	e00a      	b.n	8084d4c <__aeabi_l2f+0x14>
 8084d36:	bf00      	nop

08084d38 <__aeabi_l2f>:
 8084d38:	ea50 0201 	orrs.w	r2, r0, r1
 8084d3c:	bf08      	it	eq
 8084d3e:	4770      	bxeq	lr
 8084d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084d44:	d502      	bpl.n	8084d4c <__aeabi_l2f+0x14>
 8084d46:	4240      	negs	r0, r0
 8084d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084d4c:	ea5f 0c01 	movs.w	ip, r1
 8084d50:	bf02      	ittt	eq
 8084d52:	4684      	moveq	ip, r0
 8084d54:	4601      	moveq	r1, r0
 8084d56:	2000      	moveq	r0, #0
 8084d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084d5c:	bf08      	it	eq
 8084d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8084d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8084d66:	fabc f28c 	clz	r2, ip
 8084d6a:	3a08      	subs	r2, #8
 8084d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084d70:	db10      	blt.n	8084d94 <__aeabi_l2f+0x5c>
 8084d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8084d76:	4463      	add	r3, ip
 8084d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8084d7c:	f1c2 0220 	rsb	r2, r2, #32
 8084d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084d84:	fa20 f202 	lsr.w	r2, r0, r2
 8084d88:	eb43 0002 	adc.w	r0, r3, r2
 8084d8c:	bf08      	it	eq
 8084d8e:	f020 0001 	biceq.w	r0, r0, #1
 8084d92:	4770      	bx	lr
 8084d94:	f102 0220 	add.w	r2, r2, #32
 8084d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8084d9c:	f1c2 0220 	rsb	r2, r2, #32
 8084da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084da4:	fa21 f202 	lsr.w	r2, r1, r2
 8084da8:	eb43 0002 	adc.w	r0, r3, r2
 8084dac:	bf08      	it	eq
 8084dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084db2:	4770      	bx	lr

08084db4 <__aeabi_fmul>:
 8084db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084dbc:	bf1e      	ittt	ne
 8084dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084dc2:	ea92 0f0c 	teqne	r2, ip
 8084dc6:	ea93 0f0c 	teqne	r3, ip
 8084dca:	d06f      	beq.n	8084eac <__aeabi_fmul+0xf8>
 8084dcc:	441a      	add	r2, r3
 8084dce:	ea80 0c01 	eor.w	ip, r0, r1
 8084dd2:	0240      	lsls	r0, r0, #9
 8084dd4:	bf18      	it	ne
 8084dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084dda:	d01e      	beq.n	8084e1a <__aeabi_fmul+0x66>
 8084ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084de8:	fba0 3101 	umull	r3, r1, r0, r1
 8084dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084df4:	bf3e      	ittt	cc
 8084df6:	0049      	lslcc	r1, r1, #1
 8084df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084dfc:	005b      	lslcc	r3, r3, #1
 8084dfe:	ea40 0001 	orr.w	r0, r0, r1
 8084e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8084e06:	2afd      	cmp	r2, #253	; 0xfd
 8084e08:	d81d      	bhi.n	8084e46 <__aeabi_fmul+0x92>
 8084e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084e12:	bf08      	it	eq
 8084e14:	f020 0001 	biceq.w	r0, r0, #1
 8084e18:	4770      	bx	lr
 8084e1a:	f090 0f00 	teq	r0, #0
 8084e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084e22:	bf08      	it	eq
 8084e24:	0249      	lsleq	r1, r1, #9
 8084e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084e2e:	3a7f      	subs	r2, #127	; 0x7f
 8084e30:	bfc2      	ittt	gt
 8084e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084e3a:	4770      	bxgt	lr
 8084e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084e40:	f04f 0300 	mov.w	r3, #0
 8084e44:	3a01      	subs	r2, #1
 8084e46:	dc5d      	bgt.n	8084f04 <__aeabi_fmul+0x150>
 8084e48:	f112 0f19 	cmn.w	r2, #25
 8084e4c:	bfdc      	itt	le
 8084e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084e52:	4770      	bxle	lr
 8084e54:	f1c2 0200 	rsb	r2, r2, #0
 8084e58:	0041      	lsls	r1, r0, #1
 8084e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8084e5e:	f1c2 0220 	rsb	r2, r2, #32
 8084e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8084e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8084e6a:	f140 0000 	adc.w	r0, r0, #0
 8084e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084e72:	bf08      	it	eq
 8084e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084e78:	4770      	bx	lr
 8084e7a:	f092 0f00 	teq	r2, #0
 8084e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084e82:	bf02      	ittt	eq
 8084e84:	0040      	lsleq	r0, r0, #1
 8084e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084e8a:	3a01      	subeq	r2, #1
 8084e8c:	d0f9      	beq.n	8084e82 <__aeabi_fmul+0xce>
 8084e8e:	ea40 000c 	orr.w	r0, r0, ip
 8084e92:	f093 0f00 	teq	r3, #0
 8084e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084e9a:	bf02      	ittt	eq
 8084e9c:	0049      	lsleq	r1, r1, #1
 8084e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084ea2:	3b01      	subeq	r3, #1
 8084ea4:	d0f9      	beq.n	8084e9a <__aeabi_fmul+0xe6>
 8084ea6:	ea41 010c 	orr.w	r1, r1, ip
 8084eaa:	e78f      	b.n	8084dcc <__aeabi_fmul+0x18>
 8084eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084eb0:	ea92 0f0c 	teq	r2, ip
 8084eb4:	bf18      	it	ne
 8084eb6:	ea93 0f0c 	teqne	r3, ip
 8084eba:	d00a      	beq.n	8084ed2 <__aeabi_fmul+0x11e>
 8084ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084ec0:	bf18      	it	ne
 8084ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084ec6:	d1d8      	bne.n	8084e7a <__aeabi_fmul+0xc6>
 8084ec8:	ea80 0001 	eor.w	r0, r0, r1
 8084ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084ed0:	4770      	bx	lr
 8084ed2:	f090 0f00 	teq	r0, #0
 8084ed6:	bf17      	itett	ne
 8084ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084edc:	4608      	moveq	r0, r1
 8084ede:	f091 0f00 	teqne	r1, #0
 8084ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8084ee6:	d014      	beq.n	8084f12 <__aeabi_fmul+0x15e>
 8084ee8:	ea92 0f0c 	teq	r2, ip
 8084eec:	d101      	bne.n	8084ef2 <__aeabi_fmul+0x13e>
 8084eee:	0242      	lsls	r2, r0, #9
 8084ef0:	d10f      	bne.n	8084f12 <__aeabi_fmul+0x15e>
 8084ef2:	ea93 0f0c 	teq	r3, ip
 8084ef6:	d103      	bne.n	8084f00 <__aeabi_fmul+0x14c>
 8084ef8:	024b      	lsls	r3, r1, #9
 8084efa:	bf18      	it	ne
 8084efc:	4608      	movne	r0, r1
 8084efe:	d108      	bne.n	8084f12 <__aeabi_fmul+0x15e>
 8084f00:	ea80 0001 	eor.w	r0, r0, r1
 8084f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084f10:	4770      	bx	lr
 8084f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8084f1a:	4770      	bx	lr

08084f1c <__aeabi_fdiv>:
 8084f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084f24:	bf1e      	ittt	ne
 8084f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084f2a:	ea92 0f0c 	teqne	r2, ip
 8084f2e:	ea93 0f0c 	teqne	r3, ip
 8084f32:	d069      	beq.n	8085008 <__aeabi_fdiv+0xec>
 8084f34:	eba2 0203 	sub.w	r2, r2, r3
 8084f38:	ea80 0c01 	eor.w	ip, r0, r1
 8084f3c:	0249      	lsls	r1, r1, #9
 8084f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8084f42:	d037      	beq.n	8084fb4 <__aeabi_fdiv+0x98>
 8084f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084f54:	428b      	cmp	r3, r1
 8084f56:	bf38      	it	cc
 8084f58:	005b      	lslcc	r3, r3, #1
 8084f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8084f62:	428b      	cmp	r3, r1
 8084f64:	bf24      	itt	cs
 8084f66:	1a5b      	subcs	r3, r3, r1
 8084f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8084f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084f70:	bf24      	itt	cs
 8084f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8084f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084f7e:	bf24      	itt	cs
 8084f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084f8c:	bf24      	itt	cs
 8084f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8084f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084f96:	011b      	lsls	r3, r3, #4
 8084f98:	bf18      	it	ne
 8084f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084f9e:	d1e0      	bne.n	8084f62 <__aeabi_fdiv+0x46>
 8084fa0:	2afd      	cmp	r2, #253	; 0xfd
 8084fa2:	f63f af50 	bhi.w	8084e46 <__aeabi_fmul+0x92>
 8084fa6:	428b      	cmp	r3, r1
 8084fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084fac:	bf08      	it	eq
 8084fae:	f020 0001 	biceq.w	r0, r0, #1
 8084fb2:	4770      	bx	lr
 8084fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084fbc:	327f      	adds	r2, #127	; 0x7f
 8084fbe:	bfc2      	ittt	gt
 8084fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084fc8:	4770      	bxgt	lr
 8084fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084fce:	f04f 0300 	mov.w	r3, #0
 8084fd2:	3a01      	subs	r2, #1
 8084fd4:	e737      	b.n	8084e46 <__aeabi_fmul+0x92>
 8084fd6:	f092 0f00 	teq	r2, #0
 8084fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084fde:	bf02      	ittt	eq
 8084fe0:	0040      	lsleq	r0, r0, #1
 8084fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084fe6:	3a01      	subeq	r2, #1
 8084fe8:	d0f9      	beq.n	8084fde <__aeabi_fdiv+0xc2>
 8084fea:	ea40 000c 	orr.w	r0, r0, ip
 8084fee:	f093 0f00 	teq	r3, #0
 8084ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084ff6:	bf02      	ittt	eq
 8084ff8:	0049      	lsleq	r1, r1, #1
 8084ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084ffe:	3b01      	subeq	r3, #1
 8085000:	d0f9      	beq.n	8084ff6 <__aeabi_fdiv+0xda>
 8085002:	ea41 010c 	orr.w	r1, r1, ip
 8085006:	e795      	b.n	8084f34 <__aeabi_fdiv+0x18>
 8085008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808500c:	ea92 0f0c 	teq	r2, ip
 8085010:	d108      	bne.n	8085024 <__aeabi_fdiv+0x108>
 8085012:	0242      	lsls	r2, r0, #9
 8085014:	f47f af7d 	bne.w	8084f12 <__aeabi_fmul+0x15e>
 8085018:	ea93 0f0c 	teq	r3, ip
 808501c:	f47f af70 	bne.w	8084f00 <__aeabi_fmul+0x14c>
 8085020:	4608      	mov	r0, r1
 8085022:	e776      	b.n	8084f12 <__aeabi_fmul+0x15e>
 8085024:	ea93 0f0c 	teq	r3, ip
 8085028:	d104      	bne.n	8085034 <__aeabi_fdiv+0x118>
 808502a:	024b      	lsls	r3, r1, #9
 808502c:	f43f af4c 	beq.w	8084ec8 <__aeabi_fmul+0x114>
 8085030:	4608      	mov	r0, r1
 8085032:	e76e      	b.n	8084f12 <__aeabi_fmul+0x15e>
 8085034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8085038:	bf18      	it	ne
 808503a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808503e:	d1ca      	bne.n	8084fd6 <__aeabi_fdiv+0xba>
 8085040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8085044:	f47f af5c 	bne.w	8084f00 <__aeabi_fmul+0x14c>
 8085048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808504c:	f47f af3c 	bne.w	8084ec8 <__aeabi_fmul+0x114>
 8085050:	e75f      	b.n	8084f12 <__aeabi_fmul+0x15e>
 8085052:	bf00      	nop

08085054 <__gesf2>:
 8085054:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8085058:	e006      	b.n	8085068 <__cmpsf2+0x4>
 808505a:	bf00      	nop

0808505c <__lesf2>:
 808505c:	f04f 0c01 	mov.w	ip, #1
 8085060:	e002      	b.n	8085068 <__cmpsf2+0x4>
 8085062:	bf00      	nop

08085064 <__cmpsf2>:
 8085064:	f04f 0c01 	mov.w	ip, #1
 8085068:	f84d cd04 	str.w	ip, [sp, #-4]!
 808506c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8085070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8085074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8085078:	bf18      	it	ne
 808507a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808507e:	d011      	beq.n	80850a4 <__cmpsf2+0x40>
 8085080:	b001      	add	sp, #4
 8085082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8085086:	bf18      	it	ne
 8085088:	ea90 0f01 	teqne	r0, r1
 808508c:	bf58      	it	pl
 808508e:	ebb2 0003 	subspl.w	r0, r2, r3
 8085092:	bf88      	it	hi
 8085094:	17c8      	asrhi	r0, r1, #31
 8085096:	bf38      	it	cc
 8085098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808509c:	bf18      	it	ne
 808509e:	f040 0001 	orrne.w	r0, r0, #1
 80850a2:	4770      	bx	lr
 80850a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80850a8:	d102      	bne.n	80850b0 <__cmpsf2+0x4c>
 80850aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80850ae:	d105      	bne.n	80850bc <__cmpsf2+0x58>
 80850b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80850b4:	d1e4      	bne.n	8085080 <__cmpsf2+0x1c>
 80850b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80850ba:	d0e1      	beq.n	8085080 <__cmpsf2+0x1c>
 80850bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80850c0:	4770      	bx	lr
 80850c2:	bf00      	nop

080850c4 <__aeabi_cfrcmple>:
 80850c4:	4684      	mov	ip, r0
 80850c6:	4608      	mov	r0, r1
 80850c8:	4661      	mov	r1, ip
 80850ca:	e7ff      	b.n	80850cc <__aeabi_cfcmpeq>

080850cc <__aeabi_cfcmpeq>:
 80850cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80850ce:	f7ff ffc9 	bl	8085064 <__cmpsf2>
 80850d2:	2800      	cmp	r0, #0
 80850d4:	bf48      	it	mi
 80850d6:	f110 0f00 	cmnmi.w	r0, #0
 80850da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080850dc <__aeabi_fcmpeq>:
 80850dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80850e0:	f7ff fff4 	bl	80850cc <__aeabi_cfcmpeq>
 80850e4:	bf0c      	ite	eq
 80850e6:	2001      	moveq	r0, #1
 80850e8:	2000      	movne	r0, #0
 80850ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80850ee:	bf00      	nop

080850f0 <__aeabi_fcmplt>:
 80850f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80850f4:	f7ff ffea 	bl	80850cc <__aeabi_cfcmpeq>
 80850f8:	bf34      	ite	cc
 80850fa:	2001      	movcc	r0, #1
 80850fc:	2000      	movcs	r0, #0
 80850fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8085102:	bf00      	nop

08085104 <__aeabi_fcmple>:
 8085104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085108:	f7ff ffe0 	bl	80850cc <__aeabi_cfcmpeq>
 808510c:	bf94      	ite	ls
 808510e:	2001      	movls	r0, #1
 8085110:	2000      	movhi	r0, #0
 8085112:	f85d fb08 	ldr.w	pc, [sp], #8
 8085116:	bf00      	nop

08085118 <__aeabi_fcmpge>:
 8085118:	f84d ed08 	str.w	lr, [sp, #-8]!
 808511c:	f7ff ffd2 	bl	80850c4 <__aeabi_cfrcmple>
 8085120:	bf94      	ite	ls
 8085122:	2001      	movls	r0, #1
 8085124:	2000      	movhi	r0, #0
 8085126:	f85d fb08 	ldr.w	pc, [sp], #8
 808512a:	bf00      	nop

0808512c <__aeabi_fcmpgt>:
 808512c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8085130:	f7ff ffc8 	bl	80850c4 <__aeabi_cfrcmple>
 8085134:	bf34      	ite	cc
 8085136:	2001      	movcc	r0, #1
 8085138:	2000      	movcs	r0, #0
 808513a:	f85d fb08 	ldr.w	pc, [sp], #8
 808513e:	bf00      	nop

08085140 <__aeabi_f2iz>:
 8085140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8085144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8085148:	d30f      	bcc.n	808516a <__aeabi_f2iz+0x2a>
 808514a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808514e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8085152:	d90d      	bls.n	8085170 <__aeabi_f2iz+0x30>
 8085154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8085158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808515c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8085160:	fa23 f002 	lsr.w	r0, r3, r2
 8085164:	bf18      	it	ne
 8085166:	4240      	negne	r0, r0
 8085168:	4770      	bx	lr
 808516a:	f04f 0000 	mov.w	r0, #0
 808516e:	4770      	bx	lr
 8085170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8085174:	d101      	bne.n	808517a <__aeabi_f2iz+0x3a>
 8085176:	0242      	lsls	r2, r0, #9
 8085178:	d105      	bne.n	8085186 <__aeabi_f2iz+0x46>
 808517a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808517e:	bf08      	it	eq
 8085180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085184:	4770      	bx	lr
 8085186:	f04f 0000 	mov.w	r0, #0
 808518a:	4770      	bx	lr

0808518c <asctime>:
 808518c:	4b09      	ldr	r3, [pc, #36]	; (80851b4 <asctime+0x28>)
 808518e:	b570      	push	{r4, r5, r6, lr}
 8085190:	681c      	ldr	r4, [r3, #0]
 8085192:	4606      	mov	r6, r0
 8085194:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8085196:	b93d      	cbnz	r5, 80851a8 <asctime+0x1c>
 8085198:	201a      	movs	r0, #26
 808519a:	f7fd f977 	bl	808248c <malloc>
 808519e:	221a      	movs	r2, #26
 80851a0:	6420      	str	r0, [r4, #64]	; 0x40
 80851a2:	4629      	mov	r1, r5
 80851a4:	f000 f93f 	bl	8085426 <memset>
 80851a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80851aa:	4630      	mov	r0, r6
 80851ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80851b0:	f000 b802 	b.w	80851b8 <asctime_r>
 80851b4:	200000e4 	.word	0x200000e4

080851b8 <asctime_r>:
 80851b8:	b510      	push	{r4, lr}
 80851ba:	460c      	mov	r4, r1
 80851bc:	6941      	ldr	r1, [r0, #20]
 80851be:	b086      	sub	sp, #24
 80851c0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80851c4:	6903      	ldr	r3, [r0, #16]
 80851c6:	6982      	ldr	r2, [r0, #24]
 80851c8:	9104      	str	r1, [sp, #16]
 80851ca:	6801      	ldr	r1, [r0, #0]
 80851cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80851d0:	9103      	str	r1, [sp, #12]
 80851d2:	6841      	ldr	r1, [r0, #4]
 80851d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80851d8:	9102      	str	r1, [sp, #8]
 80851da:	6881      	ldr	r1, [r0, #8]
 80851dc:	9101      	str	r1, [sp, #4]
 80851de:	68c1      	ldr	r1, [r0, #12]
 80851e0:	4620      	mov	r0, r4
 80851e2:	9100      	str	r1, [sp, #0]
 80851e4:	4904      	ldr	r1, [pc, #16]	; (80851f8 <asctime_r+0x40>)
 80851e6:	440b      	add	r3, r1
 80851e8:	4904      	ldr	r1, [pc, #16]	; (80851fc <asctime_r+0x44>)
 80851ea:	440a      	add	r2, r1
 80851ec:	4904      	ldr	r1, [pc, #16]	; (8085200 <asctime_r+0x48>)
 80851ee:	f7fd f965 	bl	80824bc <siprintf>
 80851f2:	4620      	mov	r0, r4
 80851f4:	b006      	add	sp, #24
 80851f6:	bd10      	pop	{r4, pc}
 80851f8:	080865b2 	.word	0x080865b2
 80851fc:	0808659d 	.word	0x0808659d
 8085200:	080865d6 	.word	0x080865d6

08085204 <__cxa_atexit>:
 8085204:	b510      	push	{r4, lr}
 8085206:	4c05      	ldr	r4, [pc, #20]	; (808521c <__cxa_atexit+0x18>)
 8085208:	4613      	mov	r3, r2
 808520a:	b12c      	cbz	r4, 8085218 <__cxa_atexit+0x14>
 808520c:	460a      	mov	r2, r1
 808520e:	4601      	mov	r1, r0
 8085210:	2002      	movs	r0, #2
 8085212:	f3af 8000 	nop.w
 8085216:	bd10      	pop	{r4, pc}
 8085218:	4620      	mov	r0, r4
 808521a:	bd10      	pop	{r4, pc}
 808521c:	00000000 	.word	0x00000000

08085220 <localtime>:
 8085220:	b538      	push	{r3, r4, r5, lr}
 8085222:	4b07      	ldr	r3, [pc, #28]	; (8085240 <localtime+0x20>)
 8085224:	4605      	mov	r5, r0
 8085226:	681c      	ldr	r4, [r3, #0]
 8085228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808522a:	b91b      	cbnz	r3, 8085234 <localtime+0x14>
 808522c:	2024      	movs	r0, #36	; 0x24
 808522e:	f7fd f92d 	bl	808248c <malloc>
 8085232:	63e0      	str	r0, [r4, #60]	; 0x3c
 8085234:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8085236:	4628      	mov	r0, r5
 8085238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808523c:	f000 b802 	b.w	8085244 <localtime_r>
 8085240:	200000e4 	.word	0x200000e4

08085244 <localtime_r>:
 8085244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085248:	460c      	mov	r4, r1
 808524a:	4680      	mov	r8, r0
 808524c:	f000 fd02 	bl	8085c54 <__gettzinfo>
 8085250:	4621      	mov	r1, r4
 8085252:	4607      	mov	r7, r0
 8085254:	4640      	mov	r0, r8
 8085256:	f000 fd01 	bl	8085c5c <gmtime_r>
 808525a:	6946      	ldr	r6, [r0, #20]
 808525c:	4604      	mov	r4, r0
 808525e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8085262:	07b3      	lsls	r3, r6, #30
 8085264:	d105      	bne.n	8085272 <localtime_r+0x2e>
 8085266:	2264      	movs	r2, #100	; 0x64
 8085268:	fb96 f3f2 	sdiv	r3, r6, r2
 808526c:	fb02 6313 	mls	r3, r2, r3, r6
 8085270:	b94b      	cbnz	r3, 8085286 <localtime_r+0x42>
 8085272:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8085276:	fb96 f3f5 	sdiv	r3, r6, r5
 808527a:	fb05 6513 	mls	r5, r5, r3, r6
 808527e:	fab5 f385 	clz	r3, r5
 8085282:	095b      	lsrs	r3, r3, #5
 8085284:	e000      	b.n	8085288 <localtime_r+0x44>
 8085286:	2301      	movs	r3, #1
 8085288:	4a5f      	ldr	r2, [pc, #380]	; (8085408 <localtime_r+0x1c4>)
 808528a:	2530      	movs	r5, #48	; 0x30
 808528c:	fb05 2503 	mla	r5, r5, r3, r2
 8085290:	f000 fb14 	bl	80858bc <__tz_lock>
 8085294:	f000 fb14 	bl	80858c0 <_tzset_unlocked>
 8085298:	4b5c      	ldr	r3, [pc, #368]	; (808540c <localtime_r+0x1c8>)
 808529a:	681b      	ldr	r3, [r3, #0]
 808529c:	b1f3      	cbz	r3, 80852dc <localtime_r+0x98>
 808529e:	687b      	ldr	r3, [r7, #4]
 80852a0:	429e      	cmp	r6, r3
 80852a2:	d105      	bne.n	80852b0 <localtime_r+0x6c>
 80852a4:	6839      	ldr	r1, [r7, #0]
 80852a6:	f8d8 3000 	ldr.w	r3, [r8]
 80852aa:	69fa      	ldr	r2, [r7, #28]
 80852ac:	b941      	cbnz	r1, 80852c0 <localtime_r+0x7c>
 80852ae:	e00a      	b.n	80852c6 <localtime_r+0x82>
 80852b0:	4630      	mov	r0, r6
 80852b2:	f000 fa5b 	bl	808576c <__tzcalc_limits>
 80852b6:	2800      	cmp	r0, #0
 80852b8:	d1f4      	bne.n	80852a4 <localtime_r+0x60>
 80852ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80852be:	e00d      	b.n	80852dc <localtime_r+0x98>
 80852c0:	4293      	cmp	r3, r2
 80852c2:	db08      	blt.n	80852d6 <localtime_r+0x92>
 80852c4:	e001      	b.n	80852ca <localtime_r+0x86>
 80852c6:	4293      	cmp	r3, r2
 80852c8:	da07      	bge.n	80852da <localtime_r+0x96>
 80852ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80852cc:	4293      	cmp	r3, r2
 80852ce:	bfac      	ite	ge
 80852d0:	2300      	movge	r3, #0
 80852d2:	2301      	movlt	r3, #1
 80852d4:	e002      	b.n	80852dc <localtime_r+0x98>
 80852d6:	2300      	movs	r3, #0
 80852d8:	e000      	b.n	80852dc <localtime_r+0x98>
 80852da:	2301      	movs	r3, #1
 80852dc:	6223      	str	r3, [r4, #32]
 80852de:	6a23      	ldr	r3, [r4, #32]
 80852e0:	203c      	movs	r0, #60	; 0x3c
 80852e2:	2b01      	cmp	r3, #1
 80852e4:	bf0c      	ite	eq
 80852e6:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80852e8:	6a39      	ldrne	r1, [r7, #32]
 80852ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80852ee:	fb91 f6f3 	sdiv	r6, r1, r3
 80852f2:	fb03 1316 	mls	r3, r3, r6, r1
 80852f6:	fb93 f2f0 	sdiv	r2, r3, r0
 80852fa:	fb00 3012 	mls	r0, r0, r2, r3
 80852fe:	6861      	ldr	r1, [r4, #4]
 8085300:	6823      	ldr	r3, [r4, #0]
 8085302:	1a89      	subs	r1, r1, r2
 8085304:	68a2      	ldr	r2, [r4, #8]
 8085306:	1a1b      	subs	r3, r3, r0
 8085308:	1b92      	subs	r2, r2, r6
 808530a:	2b3b      	cmp	r3, #59	; 0x3b
 808530c:	6023      	str	r3, [r4, #0]
 808530e:	6061      	str	r1, [r4, #4]
 8085310:	60a2      	str	r2, [r4, #8]
 8085312:	dd03      	ble.n	808531c <localtime_r+0xd8>
 8085314:	3101      	adds	r1, #1
 8085316:	6061      	str	r1, [r4, #4]
 8085318:	3b3c      	subs	r3, #60	; 0x3c
 808531a:	e004      	b.n	8085326 <localtime_r+0xe2>
 808531c:	2b00      	cmp	r3, #0
 808531e:	da03      	bge.n	8085328 <localtime_r+0xe4>
 8085320:	3901      	subs	r1, #1
 8085322:	6061      	str	r1, [r4, #4]
 8085324:	333c      	adds	r3, #60	; 0x3c
 8085326:	6023      	str	r3, [r4, #0]
 8085328:	6863      	ldr	r3, [r4, #4]
 808532a:	2b3b      	cmp	r3, #59	; 0x3b
 808532c:	dd03      	ble.n	8085336 <localtime_r+0xf2>
 808532e:	3201      	adds	r2, #1
 8085330:	60a2      	str	r2, [r4, #8]
 8085332:	3b3c      	subs	r3, #60	; 0x3c
 8085334:	e004      	b.n	8085340 <localtime_r+0xfc>
 8085336:	2b00      	cmp	r3, #0
 8085338:	da03      	bge.n	8085342 <localtime_r+0xfe>
 808533a:	3a01      	subs	r2, #1
 808533c:	60a2      	str	r2, [r4, #8]
 808533e:	333c      	adds	r3, #60	; 0x3c
 8085340:	6063      	str	r3, [r4, #4]
 8085342:	68a3      	ldr	r3, [r4, #8]
 8085344:	2b17      	cmp	r3, #23
 8085346:	dd22      	ble.n	808538e <localtime_r+0x14a>
 8085348:	69e2      	ldr	r2, [r4, #28]
 808534a:	3b18      	subs	r3, #24
 808534c:	3201      	adds	r2, #1
 808534e:	61e2      	str	r2, [r4, #28]
 8085350:	69a2      	ldr	r2, [r4, #24]
 8085352:	60a3      	str	r3, [r4, #8]
 8085354:	3201      	adds	r2, #1
 8085356:	2a06      	cmp	r2, #6
 8085358:	bfc8      	it	gt
 808535a:	2200      	movgt	r2, #0
 808535c:	61a2      	str	r2, [r4, #24]
 808535e:	68e2      	ldr	r2, [r4, #12]
 8085360:	6923      	ldr	r3, [r4, #16]
 8085362:	3201      	adds	r2, #1
 8085364:	60e2      	str	r2, [r4, #12]
 8085366:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808536a:	428a      	cmp	r2, r1
 808536c:	dd46      	ble.n	80853fc <localtime_r+0x1b8>
 808536e:	3301      	adds	r3, #1
 8085370:	2b0c      	cmp	r3, #12
 8085372:	bf08      	it	eq
 8085374:	6963      	ldreq	r3, [r4, #20]
 8085376:	eba2 0201 	sub.w	r2, r2, r1
 808537a:	60e2      	str	r2, [r4, #12]
 808537c:	bf05      	ittet	eq
 808537e:	3301      	addeq	r3, #1
 8085380:	2200      	moveq	r2, #0
 8085382:	6123      	strne	r3, [r4, #16]
 8085384:	6122      	streq	r2, [r4, #16]
 8085386:	bf04      	itt	eq
 8085388:	6163      	streq	r3, [r4, #20]
 808538a:	61e2      	streq	r2, [r4, #28]
 808538c:	e036      	b.n	80853fc <localtime_r+0x1b8>
 808538e:	2b00      	cmp	r3, #0
 8085390:	da34      	bge.n	80853fc <localtime_r+0x1b8>
 8085392:	69e2      	ldr	r2, [r4, #28]
 8085394:	3318      	adds	r3, #24
 8085396:	3a01      	subs	r2, #1
 8085398:	61e2      	str	r2, [r4, #28]
 808539a:	69a2      	ldr	r2, [r4, #24]
 808539c:	60a3      	str	r3, [r4, #8]
 808539e:	3a01      	subs	r2, #1
 80853a0:	bf48      	it	mi
 80853a2:	2206      	movmi	r2, #6
 80853a4:	61a2      	str	r2, [r4, #24]
 80853a6:	68e2      	ldr	r2, [r4, #12]
 80853a8:	3a01      	subs	r2, #1
 80853aa:	60e2      	str	r2, [r4, #12]
 80853ac:	bb32      	cbnz	r2, 80853fc <localtime_r+0x1b8>
 80853ae:	6923      	ldr	r3, [r4, #16]
 80853b0:	3b01      	subs	r3, #1
 80853b2:	d401      	bmi.n	80853b8 <localtime_r+0x174>
 80853b4:	6123      	str	r3, [r4, #16]
 80853b6:	e01d      	b.n	80853f4 <localtime_r+0x1b0>
 80853b8:	230b      	movs	r3, #11
 80853ba:	6123      	str	r3, [r4, #16]
 80853bc:	6963      	ldr	r3, [r4, #20]
 80853be:	1e5a      	subs	r2, r3, #1
 80853c0:	f012 0f03 	tst.w	r2, #3
 80853c4:	6162      	str	r2, [r4, #20]
 80853c6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80853ca:	d105      	bne.n	80853d8 <localtime_r+0x194>
 80853cc:	2164      	movs	r1, #100	; 0x64
 80853ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80853d2:	fb01 3212 	mls	r2, r1, r2, r3
 80853d6:	b94a      	cbnz	r2, 80853ec <localtime_r+0x1a8>
 80853d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80853dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80853e0:	fb01 3312 	mls	r3, r1, r2, r3
 80853e4:	fab3 f383 	clz	r3, r3
 80853e8:	095b      	lsrs	r3, r3, #5
 80853ea:	e000      	b.n	80853ee <localtime_r+0x1aa>
 80853ec:	2301      	movs	r3, #1
 80853ee:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80853f2:	61e3      	str	r3, [r4, #28]
 80853f4:	6923      	ldr	r3, [r4, #16]
 80853f6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80853fa:	60e3      	str	r3, [r4, #12]
 80853fc:	f000 fa5f 	bl	80858be <__tz_unlock>
 8085400:	4620      	mov	r0, r4
 8085402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085406:	bf00      	nop
 8085408:	08086758 	.word	0x08086758
 808540c:	200009a4 	.word	0x200009a4

08085410 <memcpy>:
 8085410:	b510      	push	{r4, lr}
 8085412:	1e43      	subs	r3, r0, #1
 8085414:	440a      	add	r2, r1
 8085416:	4291      	cmp	r1, r2
 8085418:	d004      	beq.n	8085424 <memcpy+0x14>
 808541a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808541e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8085422:	e7f8      	b.n	8085416 <memcpy+0x6>
 8085424:	bd10      	pop	{r4, pc}

08085426 <memset>:
 8085426:	4603      	mov	r3, r0
 8085428:	4402      	add	r2, r0
 808542a:	4293      	cmp	r3, r2
 808542c:	d002      	beq.n	8085434 <memset+0xe>
 808542e:	f803 1b01 	strb.w	r1, [r3], #1
 8085432:	e7fa      	b.n	808542a <memset+0x4>
 8085434:	4770      	bx	lr
	...

08085438 <srand>:
 8085438:	b538      	push	{r3, r4, r5, lr}
 808543a:	4b12      	ldr	r3, [pc, #72]	; (8085484 <srand+0x4c>)
 808543c:	4605      	mov	r5, r0
 808543e:	681c      	ldr	r4, [r3, #0]
 8085440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8085442:	b9d3      	cbnz	r3, 808547a <srand+0x42>
 8085444:	2018      	movs	r0, #24
 8085446:	f7fd f821 	bl	808248c <malloc>
 808544a:	f243 330e 	movw	r3, #13070	; 0x330e
 808544e:	63a0      	str	r0, [r4, #56]	; 0x38
 8085450:	8003      	strh	r3, [r0, #0]
 8085452:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8085456:	8043      	strh	r3, [r0, #2]
 8085458:	f241 2334 	movw	r3, #4660	; 0x1234
 808545c:	8083      	strh	r3, [r0, #4]
 808545e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8085462:	80c3      	strh	r3, [r0, #6]
 8085464:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8085468:	8103      	strh	r3, [r0, #8]
 808546a:	2305      	movs	r3, #5
 808546c:	8143      	strh	r3, [r0, #10]
 808546e:	230b      	movs	r3, #11
 8085470:	8183      	strh	r3, [r0, #12]
 8085472:	2201      	movs	r2, #1
 8085474:	2300      	movs	r3, #0
 8085476:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808547a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808547c:	2200      	movs	r2, #0
 808547e:	611d      	str	r5, [r3, #16]
 8085480:	615a      	str	r2, [r3, #20]
 8085482:	bd38      	pop	{r3, r4, r5, pc}
 8085484:	200000e4 	.word	0x200000e4

08085488 <strcat>:
 8085488:	4602      	mov	r2, r0
 808548a:	b510      	push	{r4, lr}
 808548c:	4613      	mov	r3, r2
 808548e:	781c      	ldrb	r4, [r3, #0]
 8085490:	3201      	adds	r2, #1
 8085492:	2c00      	cmp	r4, #0
 8085494:	d1fa      	bne.n	808548c <strcat+0x4>
 8085496:	3b01      	subs	r3, #1
 8085498:	f811 2b01 	ldrb.w	r2, [r1], #1
 808549c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80854a0:	2a00      	cmp	r2, #0
 80854a2:	d1f9      	bne.n	8085498 <strcat+0x10>
 80854a4:	bd10      	pop	{r4, pc}

080854a6 <strcmp>:
 80854a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80854aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80854ae:	2a01      	cmp	r2, #1
 80854b0:	bf28      	it	cs
 80854b2:	429a      	cmpcs	r2, r3
 80854b4:	d0f7      	beq.n	80854a6 <strcmp>
 80854b6:	1ad0      	subs	r0, r2, r3
 80854b8:	4770      	bx	lr

080854ba <strcpy>:
 80854ba:	4603      	mov	r3, r0
 80854bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80854c0:	f803 2b01 	strb.w	r2, [r3], #1
 80854c4:	2a00      	cmp	r2, #0
 80854c6:	d1f9      	bne.n	80854bc <strcpy+0x2>
 80854c8:	4770      	bx	lr
	...

080854cc <strdup>:
 80854cc:	4b02      	ldr	r3, [pc, #8]	; (80854d8 <strdup+0xc>)
 80854ce:	4601      	mov	r1, r0
 80854d0:	6818      	ldr	r0, [r3, #0]
 80854d2:	f000 b803 	b.w	80854dc <_strdup_r>
 80854d6:	bf00      	nop
 80854d8:	200000e4 	.word	0x200000e4

080854dc <_strdup_r>:
 80854dc:	b570      	push	{r4, r5, r6, lr}
 80854de:	4606      	mov	r6, r0
 80854e0:	4608      	mov	r0, r1
 80854e2:	460c      	mov	r4, r1
 80854e4:	f000 f80d 	bl	8085502 <strlen>
 80854e8:	1c45      	adds	r5, r0, #1
 80854ea:	4629      	mov	r1, r5
 80854ec:	4630      	mov	r0, r6
 80854ee:	f7fd f805 	bl	80824fc <_malloc_r>
 80854f2:	4606      	mov	r6, r0
 80854f4:	b118      	cbz	r0, 80854fe <_strdup_r+0x22>
 80854f6:	462a      	mov	r2, r5
 80854f8:	4621      	mov	r1, r4
 80854fa:	f7ff ff89 	bl	8085410 <memcpy>
 80854fe:	4630      	mov	r0, r6
 8085500:	bd70      	pop	{r4, r5, r6, pc}

08085502 <strlen>:
 8085502:	4603      	mov	r3, r0
 8085504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085508:	2a00      	cmp	r2, #0
 808550a:	d1fb      	bne.n	8085504 <strlen+0x2>
 808550c:	1a18      	subs	r0, r3, r0
 808550e:	3801      	subs	r0, #1
 8085510:	4770      	bx	lr

08085512 <strncmp>:
 8085512:	b530      	push	{r4, r5, lr}
 8085514:	b182      	cbz	r2, 8085538 <strncmp+0x26>
 8085516:	1e45      	subs	r5, r0, #1
 8085518:	3901      	subs	r1, #1
 808551a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808551e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8085522:	42a3      	cmp	r3, r4
 8085524:	d106      	bne.n	8085534 <strncmp+0x22>
 8085526:	43ec      	mvns	r4, r5
 8085528:	4414      	add	r4, r2
 808552a:	42e0      	cmn	r0, r4
 808552c:	d001      	beq.n	8085532 <strncmp+0x20>
 808552e:	2b00      	cmp	r3, #0
 8085530:	d1f3      	bne.n	808551a <strncmp+0x8>
 8085532:	461c      	mov	r4, r3
 8085534:	1b18      	subs	r0, r3, r4
 8085536:	bd30      	pop	{r4, r5, pc}
 8085538:	4610      	mov	r0, r2
 808553a:	bd30      	pop	{r4, r5, pc}

0808553c <_strtol_r>:
 808553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085540:	460f      	mov	r7, r1
 8085542:	4680      	mov	r8, r0
 8085544:	483f      	ldr	r0, [pc, #252]	; (8085644 <_strtol_r+0x108>)
 8085546:	f8d0 9000 	ldr.w	r9, [r0]
 808554a:	463d      	mov	r5, r7
 808554c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085550:	eb09 0004 	add.w	r0, r9, r4
 8085554:	7840      	ldrb	r0, [r0, #1]
 8085556:	f000 0008 	and.w	r0, r0, #8
 808555a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808555e:	b108      	cbz	r0, 8085564 <_strtol_r+0x28>
 8085560:	462f      	mov	r7, r5
 8085562:	e7f2      	b.n	808554a <_strtol_r+0xe>
 8085564:	2c2d      	cmp	r4, #45	; 0x2d
 8085566:	d103      	bne.n	8085570 <_strtol_r+0x34>
 8085568:	1cbd      	adds	r5, r7, #2
 808556a:	787c      	ldrb	r4, [r7, #1]
 808556c:	2601      	movs	r6, #1
 808556e:	e003      	b.n	8085578 <_strtol_r+0x3c>
 8085570:	2c2b      	cmp	r4, #43	; 0x2b
 8085572:	bf04      	itt	eq
 8085574:	787c      	ldrbeq	r4, [r7, #1]
 8085576:	1cbd      	addeq	r5, r7, #2
 8085578:	b113      	cbz	r3, 8085580 <_strtol_r+0x44>
 808557a:	2b10      	cmp	r3, #16
 808557c:	d10a      	bne.n	8085594 <_strtol_r+0x58>
 808557e:	e05b      	b.n	8085638 <_strtol_r+0xfc>
 8085580:	2c30      	cmp	r4, #48	; 0x30
 8085582:	d157      	bne.n	8085634 <_strtol_r+0xf8>
 8085584:	7828      	ldrb	r0, [r5, #0]
 8085586:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808558a:	2858      	cmp	r0, #88	; 0x58
 808558c:	d14d      	bne.n	808562a <_strtol_r+0xee>
 808558e:	786c      	ldrb	r4, [r5, #1]
 8085590:	2310      	movs	r3, #16
 8085592:	3502      	adds	r5, #2
 8085594:	2e00      	cmp	r6, #0
 8085596:	bf14      	ite	ne
 8085598:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808559c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80855a0:	fbbc faf3 	udiv	sl, ip, r3
 80855a4:	2700      	movs	r7, #0
 80855a6:	4638      	mov	r0, r7
 80855a8:	fb03 cc1a 	mls	ip, r3, sl, ip
 80855ac:	eb09 0e04 	add.w	lr, r9, r4
 80855b0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80855b4:	f01e 0f04 	tst.w	lr, #4
 80855b8:	d001      	beq.n	80855be <_strtol_r+0x82>
 80855ba:	3c30      	subs	r4, #48	; 0x30
 80855bc:	e00b      	b.n	80855d6 <_strtol_r+0x9a>
 80855be:	f01e 0e03 	ands.w	lr, lr, #3
 80855c2:	d01b      	beq.n	80855fc <_strtol_r+0xc0>
 80855c4:	f1be 0f01 	cmp.w	lr, #1
 80855c8:	bf0c      	ite	eq
 80855ca:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80855ce:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80855d2:	ebce 0404 	rsb	r4, lr, r4
 80855d6:	42a3      	cmp	r3, r4
 80855d8:	dd10      	ble.n	80855fc <_strtol_r+0xc0>
 80855da:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80855de:	d00a      	beq.n	80855f6 <_strtol_r+0xba>
 80855e0:	4550      	cmp	r0, sl
 80855e2:	d806      	bhi.n	80855f2 <_strtol_r+0xb6>
 80855e4:	d101      	bne.n	80855ea <_strtol_r+0xae>
 80855e6:	4564      	cmp	r4, ip
 80855e8:	dc03      	bgt.n	80855f2 <_strtol_r+0xb6>
 80855ea:	fb03 4000 	mla	r0, r3, r0, r4
 80855ee:	2701      	movs	r7, #1
 80855f0:	e001      	b.n	80855f6 <_strtol_r+0xba>
 80855f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80855f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80855fa:	e7d7      	b.n	80855ac <_strtol_r+0x70>
 80855fc:	1c7b      	adds	r3, r7, #1
 80855fe:	d10c      	bne.n	808561a <_strtol_r+0xde>
 8085600:	2e00      	cmp	r6, #0
 8085602:	f04f 0322 	mov.w	r3, #34	; 0x22
 8085606:	bf14      	ite	ne
 8085608:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808560c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8085610:	f8c8 3000 	str.w	r3, [r8]
 8085614:	b92a      	cbnz	r2, 8085622 <_strtol_r+0xe6>
 8085616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808561a:	b106      	cbz	r6, 808561e <_strtol_r+0xe2>
 808561c:	4240      	negs	r0, r0
 808561e:	b172      	cbz	r2, 808563e <_strtol_r+0x102>
 8085620:	b107      	cbz	r7, 8085624 <_strtol_r+0xe8>
 8085622:	1e69      	subs	r1, r5, #1
 8085624:	6011      	str	r1, [r2, #0]
 8085626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808562a:	2430      	movs	r4, #48	; 0x30
 808562c:	2b00      	cmp	r3, #0
 808562e:	d1b1      	bne.n	8085594 <_strtol_r+0x58>
 8085630:	2308      	movs	r3, #8
 8085632:	e7af      	b.n	8085594 <_strtol_r+0x58>
 8085634:	230a      	movs	r3, #10
 8085636:	e7ad      	b.n	8085594 <_strtol_r+0x58>
 8085638:	2c30      	cmp	r4, #48	; 0x30
 808563a:	d0a3      	beq.n	8085584 <_strtol_r+0x48>
 808563c:	e7aa      	b.n	8085594 <_strtol_r+0x58>
 808563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085642:	bf00      	nop
 8085644:	20000080 	.word	0x20000080

08085648 <strtol>:
 8085648:	4613      	mov	r3, r2
 808564a:	460a      	mov	r2, r1
 808564c:	4601      	mov	r1, r0
 808564e:	4802      	ldr	r0, [pc, #8]	; (8085658 <strtol+0x10>)
 8085650:	6800      	ldr	r0, [r0, #0]
 8085652:	f7ff bf73 	b.w	808553c <_strtol_r>
 8085656:	bf00      	nop
 8085658:	200000e4 	.word	0x200000e4

0808565c <_strtoul_r>:
 808565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085660:	460e      	mov	r6, r1
 8085662:	4680      	mov	r8, r0
 8085664:	483b      	ldr	r0, [pc, #236]	; (8085754 <_strtoul_r+0xf8>)
 8085666:	f8d0 9000 	ldr.w	r9, [r0]
 808566a:	4635      	mov	r5, r6
 808566c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085670:	eb09 0004 	add.w	r0, r9, r4
 8085674:	7840      	ldrb	r0, [r0, #1]
 8085676:	f000 0008 	and.w	r0, r0, #8
 808567a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808567e:	b108      	cbz	r0, 8085684 <_strtoul_r+0x28>
 8085680:	462e      	mov	r6, r5
 8085682:	e7f2      	b.n	808566a <_strtoul_r+0xe>
 8085684:	2c2d      	cmp	r4, #45	; 0x2d
 8085686:	d103      	bne.n	8085690 <_strtoul_r+0x34>
 8085688:	1cb5      	adds	r5, r6, #2
 808568a:	7874      	ldrb	r4, [r6, #1]
 808568c:	2701      	movs	r7, #1
 808568e:	e003      	b.n	8085698 <_strtoul_r+0x3c>
 8085690:	2c2b      	cmp	r4, #43	; 0x2b
 8085692:	bf04      	itt	eq
 8085694:	7874      	ldrbeq	r4, [r6, #1]
 8085696:	1cb5      	addeq	r5, r6, #2
 8085698:	b113      	cbz	r3, 80856a0 <_strtoul_r+0x44>
 808569a:	2b10      	cmp	r3, #16
 808569c:	d10a      	bne.n	80856b4 <_strtoul_r+0x58>
 808569e:	e053      	b.n	8085748 <_strtoul_r+0xec>
 80856a0:	2c30      	cmp	r4, #48	; 0x30
 80856a2:	d14f      	bne.n	8085744 <_strtoul_r+0xe8>
 80856a4:	7828      	ldrb	r0, [r5, #0]
 80856a6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80856aa:	2858      	cmp	r0, #88	; 0x58
 80856ac:	d145      	bne.n	808573a <_strtoul_r+0xde>
 80856ae:	786c      	ldrb	r4, [r5, #1]
 80856b0:	2310      	movs	r3, #16
 80856b2:	3502      	adds	r5, #2
 80856b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80856b8:	fbbc fcf3 	udiv	ip, ip, r3
 80856bc:	fb03 fa0c 	mul.w	sl, r3, ip
 80856c0:	2600      	movs	r6, #0
 80856c2:	ea6f 0a0a 	mvn.w	sl, sl
 80856c6:	4630      	mov	r0, r6
 80856c8:	eb09 0e04 	add.w	lr, r9, r4
 80856cc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80856d0:	f01e 0f04 	tst.w	lr, #4
 80856d4:	d001      	beq.n	80856da <_strtoul_r+0x7e>
 80856d6:	3c30      	subs	r4, #48	; 0x30
 80856d8:	e00b      	b.n	80856f2 <_strtoul_r+0x96>
 80856da:	f01e 0e03 	ands.w	lr, lr, #3
 80856de:	d01a      	beq.n	8085716 <_strtoul_r+0xba>
 80856e0:	f1be 0f01 	cmp.w	lr, #1
 80856e4:	bf0c      	ite	eq
 80856e6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80856ea:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80856ee:	ebce 0404 	rsb	r4, lr, r4
 80856f2:	42a3      	cmp	r3, r4
 80856f4:	dd0f      	ble.n	8085716 <_strtoul_r+0xba>
 80856f6:	2e00      	cmp	r6, #0
 80856f8:	db08      	blt.n	808570c <_strtoul_r+0xb0>
 80856fa:	4560      	cmp	r0, ip
 80856fc:	d806      	bhi.n	808570c <_strtoul_r+0xb0>
 80856fe:	d101      	bne.n	8085704 <_strtoul_r+0xa8>
 8085700:	4554      	cmp	r4, sl
 8085702:	dc03      	bgt.n	808570c <_strtoul_r+0xb0>
 8085704:	fb03 4000 	mla	r0, r3, r0, r4
 8085708:	2601      	movs	r6, #1
 808570a:	e001      	b.n	8085710 <_strtoul_r+0xb4>
 808570c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8085710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085714:	e7d8      	b.n	80856c8 <_strtoul_r+0x6c>
 8085716:	2e00      	cmp	r6, #0
 8085718:	da07      	bge.n	808572a <_strtoul_r+0xce>
 808571a:	2322      	movs	r3, #34	; 0x22
 808571c:	f8c8 3000 	str.w	r3, [r8]
 8085720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8085724:	b92a      	cbnz	r2, 8085732 <_strtoul_r+0xd6>
 8085726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808572a:	b107      	cbz	r7, 808572e <_strtoul_r+0xd2>
 808572c:	4240      	negs	r0, r0
 808572e:	b172      	cbz	r2, 808574e <_strtoul_r+0xf2>
 8085730:	b106      	cbz	r6, 8085734 <_strtoul_r+0xd8>
 8085732:	1e69      	subs	r1, r5, #1
 8085734:	6011      	str	r1, [r2, #0]
 8085736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808573a:	2430      	movs	r4, #48	; 0x30
 808573c:	2b00      	cmp	r3, #0
 808573e:	d1b9      	bne.n	80856b4 <_strtoul_r+0x58>
 8085740:	2308      	movs	r3, #8
 8085742:	e7b7      	b.n	80856b4 <_strtoul_r+0x58>
 8085744:	230a      	movs	r3, #10
 8085746:	e7b5      	b.n	80856b4 <_strtoul_r+0x58>
 8085748:	2c30      	cmp	r4, #48	; 0x30
 808574a:	d0ab      	beq.n	80856a4 <_strtoul_r+0x48>
 808574c:	e7b2      	b.n	80856b4 <_strtoul_r+0x58>
 808574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085752:	bf00      	nop
 8085754:	20000080 	.word	0x20000080

08085758 <strtoul>:
 8085758:	4613      	mov	r3, r2
 808575a:	460a      	mov	r2, r1
 808575c:	4601      	mov	r1, r0
 808575e:	4802      	ldr	r0, [pc, #8]	; (8085768 <strtoul+0x10>)
 8085760:	6800      	ldr	r0, [r0, #0]
 8085762:	f7ff bf7b 	b.w	808565c <_strtoul_r>
 8085766:	bf00      	nop
 8085768:	200000e4 	.word	0x200000e4

0808576c <__tzcalc_limits>:
 808576c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085770:	4604      	mov	r4, r0
 8085772:	f000 fa6f 	bl	8085c54 <__gettzinfo>
 8085776:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808577a:	429c      	cmp	r4, r3
 808577c:	f340 8096 	ble.w	80858ac <__tzcalc_limits+0x140>
 8085780:	f240 156d 	movw	r5, #365	; 0x16d
 8085784:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8085788:	18e3      	adds	r3, r4, r3
 808578a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808578e:	109b      	asrs	r3, r3, #2
 8085790:	fb05 3502 	mla	r5, r5, r2, r3
 8085794:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8085798:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808579c:	fb92 f3f3 	sdiv	r3, r2, r3
 80857a0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80857a4:	442b      	add	r3, r5
 80857a6:	18a5      	adds	r5, r4, r2
 80857a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80857ac:	fb94 f7f2 	sdiv	r7, r4, r2
 80857b0:	fb95 f5f2 	sdiv	r5, r5, r2
 80857b4:	fb02 4717 	mls	r7, r2, r7, r4
 80857b8:	441d      	add	r5, r3
 80857ba:	2364      	movs	r3, #100	; 0x64
 80857bc:	fb94 f6f3 	sdiv	r6, r4, r3
 80857c0:	fab7 fe87 	clz	lr, r7
 80857c4:	4601      	mov	r1, r0
 80857c6:	fb03 4616 	mls	r6, r3, r6, r4
 80857ca:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80857ce:	9301      	str	r3, [sp, #4]
 80857d0:	f004 0303 	and.w	r3, r4, #3
 80857d4:	6044      	str	r4, [r0, #4]
 80857d6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80857da:	9300      	str	r3, [sp, #0]
 80857dc:	f04f 0c07 	mov.w	ip, #7
 80857e0:	7a0b      	ldrb	r3, [r1, #8]
 80857e2:	2b4a      	cmp	r3, #74	; 0x4a
 80857e4:	d10e      	bne.n	8085804 <__tzcalc_limits+0x98>
 80857e6:	694b      	ldr	r3, [r1, #20]
 80857e8:	9a00      	ldr	r2, [sp, #0]
 80857ea:	18ec      	adds	r4, r5, r3
 80857ec:	b902      	cbnz	r2, 80857f0 <__tzcalc_limits+0x84>
 80857ee:	b906      	cbnz	r6, 80857f2 <__tzcalc_limits+0x86>
 80857f0:	b927      	cbnz	r7, 80857fc <__tzcalc_limits+0x90>
 80857f2:	2b3b      	cmp	r3, #59	; 0x3b
 80857f4:	bfd4      	ite	le
 80857f6:	2300      	movle	r3, #0
 80857f8:	2301      	movgt	r3, #1
 80857fa:	e000      	b.n	80857fe <__tzcalc_limits+0x92>
 80857fc:	2300      	movs	r3, #0
 80857fe:	4423      	add	r3, r4
 8085800:	3b01      	subs	r3, #1
 8085802:	e03f      	b.n	8085884 <__tzcalc_limits+0x118>
 8085804:	2b44      	cmp	r3, #68	; 0x44
 8085806:	d102      	bne.n	808580e <__tzcalc_limits+0xa2>
 8085808:	694b      	ldr	r3, [r1, #20]
 808580a:	442b      	add	r3, r5
 808580c:	e03a      	b.n	8085884 <__tzcalc_limits+0x118>
 808580e:	9b00      	ldr	r3, [sp, #0]
 8085810:	b92b      	cbnz	r3, 808581e <__tzcalc_limits+0xb2>
 8085812:	2e00      	cmp	r6, #0
 8085814:	bf0c      	ite	eq
 8085816:	46f0      	moveq	r8, lr
 8085818:	f04f 0801 	movne.w	r8, #1
 808581c:	e000      	b.n	8085820 <__tzcalc_limits+0xb4>
 808581e:	46f0      	mov	r8, lr
 8085820:	46a9      	mov	r9, r5
 8085822:	4b24      	ldr	r3, [pc, #144]	; (80858b4 <__tzcalc_limits+0x148>)
 8085824:	2230      	movs	r2, #48	; 0x30
 8085826:	fb02 3808 	mla	r8, r2, r8, r3
 808582a:	68cc      	ldr	r4, [r1, #12]
 808582c:	f1a8 0a04 	sub.w	sl, r8, #4
 8085830:	2301      	movs	r3, #1
 8085832:	42a3      	cmp	r3, r4
 8085834:	da04      	bge.n	8085840 <__tzcalc_limits+0xd4>
 8085836:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808583a:	3301      	adds	r3, #1
 808583c:	44d9      	add	r9, fp
 808583e:	e7f8      	b.n	8085832 <__tzcalc_limits+0xc6>
 8085840:	f109 0304 	add.w	r3, r9, #4
 8085844:	fb93 fbfc 	sdiv	fp, r3, ip
 8085848:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808584c:	ebca 0a03 	rsb	sl, sl, r3
 8085850:	694b      	ldr	r3, [r1, #20]
 8085852:	2c01      	cmp	r4, #1
 8085854:	bfb8      	it	lt
 8085856:	2401      	movlt	r4, #1
 8085858:	ebb3 0a0a 	subs.w	sl, r3, sl
 808585c:	690b      	ldr	r3, [r1, #16]
 808585e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8085862:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8085866:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 808586a:	bf48      	it	mi
 808586c:	f10a 0a07 	addmi.w	sl, sl, #7
 8085870:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085874:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8085878:	4453      	add	r3, sl
 808587a:	42a3      	cmp	r3, r4
 808587c:	db01      	blt.n	8085882 <__tzcalc_limits+0x116>
 808587e:	3b07      	subs	r3, #7
 8085880:	e7fb      	b.n	808587a <__tzcalc_limits+0x10e>
 8085882:	444b      	add	r3, r9
 8085884:	698c      	ldr	r4, [r1, #24]
 8085886:	4a0c      	ldr	r2, [pc, #48]	; (80858b8 <__tzcalc_limits+0x14c>)
 8085888:	fb02 4303 	mla	r3, r2, r3, r4
 808588c:	6a0c      	ldr	r4, [r1, #32]
 808588e:	4423      	add	r3, r4
 8085890:	f841 3f1c 	str.w	r3, [r1, #28]!
 8085894:	9b01      	ldr	r3, [sp, #4]
 8085896:	4299      	cmp	r1, r3
 8085898:	d1a2      	bne.n	80857e0 <__tzcalc_limits+0x74>
 808589a:	69c3      	ldr	r3, [r0, #28]
 808589c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808589e:	4293      	cmp	r3, r2
 80858a0:	bfac      	ite	ge
 80858a2:	2300      	movge	r3, #0
 80858a4:	2301      	movlt	r3, #1
 80858a6:	6003      	str	r3, [r0, #0]
 80858a8:	2001      	movs	r0, #1
 80858aa:	e000      	b.n	80858ae <__tzcalc_limits+0x142>
 80858ac:	2000      	movs	r0, #0
 80858ae:	b003      	add	sp, #12
 80858b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80858b4:	08086758 	.word	0x08086758
 80858b8:	00015180 	.word	0x00015180

080858bc <__tz_lock>:
 80858bc:	4770      	bx	lr

080858be <__tz_unlock>:
 80858be:	4770      	bx	lr

080858c0 <_tzset_unlocked>:
 80858c0:	4b01      	ldr	r3, [pc, #4]	; (80858c8 <_tzset_unlocked+0x8>)
 80858c2:	6818      	ldr	r0, [r3, #0]
 80858c4:	f000 b802 	b.w	80858cc <_tzset_unlocked_r>
 80858c8:	200000e4 	.word	0x200000e4

080858cc <_tzset_unlocked_r>:
 80858cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80858d0:	b08d      	sub	sp, #52	; 0x34
 80858d2:	4607      	mov	r7, r0
 80858d4:	f000 f9be 	bl	8085c54 <__gettzinfo>
 80858d8:	49b0      	ldr	r1, [pc, #704]	; (8085b9c <_tzset_unlocked_r+0x2d0>)
 80858da:	4604      	mov	r4, r0
 80858dc:	4638      	mov	r0, r7
 80858de:	f000 f9b1 	bl	8085c44 <_getenv_r>
 80858e2:	4eaf      	ldr	r6, [pc, #700]	; (8085ba0 <_tzset_unlocked_r+0x2d4>)
 80858e4:	4605      	mov	r5, r0
 80858e6:	b960      	cbnz	r0, 8085902 <_tzset_unlocked_r+0x36>
 80858e8:	4bae      	ldr	r3, [pc, #696]	; (8085ba4 <_tzset_unlocked_r+0x2d8>)
 80858ea:	4aaf      	ldr	r2, [pc, #700]	; (8085ba8 <_tzset_unlocked_r+0x2dc>)
 80858ec:	6018      	str	r0, [r3, #0]
 80858ee:	4baf      	ldr	r3, [pc, #700]	; (8085bac <_tzset_unlocked_r+0x2e0>)
 80858f0:	6018      	str	r0, [r3, #0]
 80858f2:	4baf      	ldr	r3, [pc, #700]	; (8085bb0 <_tzset_unlocked_r+0x2e4>)
 80858f4:	6830      	ldr	r0, [r6, #0]
 80858f6:	601a      	str	r2, [r3, #0]
 80858f8:	605a      	str	r2, [r3, #4]
 80858fa:	f7fc fdcf 	bl	808249c <free>
 80858fe:	6035      	str	r5, [r6, #0]
 8085900:	e148      	b.n	8085b94 <_tzset_unlocked_r+0x2c8>
 8085902:	6831      	ldr	r1, [r6, #0]
 8085904:	b979      	cbnz	r1, 8085926 <_tzset_unlocked_r+0x5a>
 8085906:	6830      	ldr	r0, [r6, #0]
 8085908:	f7fc fdc8 	bl	808249c <free>
 808590c:	4628      	mov	r0, r5
 808590e:	f7ff fdf8 	bl	8085502 <strlen>
 8085912:	1c41      	adds	r1, r0, #1
 8085914:	4638      	mov	r0, r7
 8085916:	f7fc fdf1 	bl	80824fc <_malloc_r>
 808591a:	6030      	str	r0, [r6, #0]
 808591c:	b148      	cbz	r0, 8085932 <_tzset_unlocked_r+0x66>
 808591e:	4629      	mov	r1, r5
 8085920:	f7ff fdcb 	bl	80854ba <strcpy>
 8085924:	e005      	b.n	8085932 <_tzset_unlocked_r+0x66>
 8085926:	f7ff fdbe 	bl	80854a6 <strcmp>
 808592a:	2800      	cmp	r0, #0
 808592c:	f000 8132 	beq.w	8085b94 <_tzset_unlocked_r+0x2c8>
 8085930:	e7e9      	b.n	8085906 <_tzset_unlocked_r+0x3a>
 8085932:	782b      	ldrb	r3, [r5, #0]
 8085934:	ae0a      	add	r6, sp, #40	; 0x28
 8085936:	2b3a      	cmp	r3, #58	; 0x3a
 8085938:	bf08      	it	eq
 808593a:	3501      	addeq	r5, #1
 808593c:	4633      	mov	r3, r6
 808593e:	4a9d      	ldr	r2, [pc, #628]	; (8085bb4 <_tzset_unlocked_r+0x2e8>)
 8085940:	499d      	ldr	r1, [pc, #628]	; (8085bb8 <_tzset_unlocked_r+0x2ec>)
 8085942:	4628      	mov	r0, r5
 8085944:	f7fc fdc2 	bl	80824cc <siscanf>
 8085948:	2800      	cmp	r0, #0
 808594a:	f340 8123 	ble.w	8085b94 <_tzset_unlocked_r+0x2c8>
 808594e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085950:	18ef      	adds	r7, r5, r3
 8085952:	5ceb      	ldrb	r3, [r5, r3]
 8085954:	2b2d      	cmp	r3, #45	; 0x2d
 8085956:	d103      	bne.n	8085960 <_tzset_unlocked_r+0x94>
 8085958:	3701      	adds	r7, #1
 808595a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 808595e:	e003      	b.n	8085968 <_tzset_unlocked_r+0x9c>
 8085960:	2b2b      	cmp	r3, #43	; 0x2b
 8085962:	bf08      	it	eq
 8085964:	3701      	addeq	r7, #1
 8085966:	2501      	movs	r5, #1
 8085968:	f10d 0a20 	add.w	sl, sp, #32
 808596c:	f10d 0b1e 	add.w	fp, sp, #30
 8085970:	f04f 0800 	mov.w	r8, #0
 8085974:	9603      	str	r6, [sp, #12]
 8085976:	f8cd a008 	str.w	sl, [sp, #8]
 808597a:	9601      	str	r6, [sp, #4]
 808597c:	f8cd b000 	str.w	fp, [sp]
 8085980:	4633      	mov	r3, r6
 8085982:	aa07      	add	r2, sp, #28
 8085984:	498d      	ldr	r1, [pc, #564]	; (8085bbc <_tzset_unlocked_r+0x2f0>)
 8085986:	4638      	mov	r0, r7
 8085988:	f8ad 801e 	strh.w	r8, [sp, #30]
 808598c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8085990:	f7fc fd9c 	bl	80824cc <siscanf>
 8085994:	4540      	cmp	r0, r8
 8085996:	f340 80fd 	ble.w	8085b94 <_tzset_unlocked_r+0x2c8>
 808599a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808599e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80859a2:	213c      	movs	r1, #60	; 0x3c
 80859a4:	fb01 3302 	mla	r3, r1, r2, r3
 80859a8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80859ac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80859b0:	fb01 3302 	mla	r3, r1, r2, r3
 80859b4:	435d      	muls	r5, r3
 80859b6:	4b7f      	ldr	r3, [pc, #508]	; (8085bb4 <_tzset_unlocked_r+0x2e8>)
 80859b8:	6225      	str	r5, [r4, #32]
 80859ba:	4d7d      	ldr	r5, [pc, #500]	; (8085bb0 <_tzset_unlocked_r+0x2e4>)
 80859bc:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8085bc8 <_tzset_unlocked_r+0x2fc>
 80859c0:	602b      	str	r3, [r5, #0]
 80859c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80859c4:	464a      	mov	r2, r9
 80859c6:	441f      	add	r7, r3
 80859c8:	497b      	ldr	r1, [pc, #492]	; (8085bb8 <_tzset_unlocked_r+0x2ec>)
 80859ca:	4633      	mov	r3, r6
 80859cc:	4638      	mov	r0, r7
 80859ce:	f7fc fd7d 	bl	80824cc <siscanf>
 80859d2:	4540      	cmp	r0, r8
 80859d4:	dc08      	bgt.n	80859e8 <_tzset_unlocked_r+0x11c>
 80859d6:	682b      	ldr	r3, [r5, #0]
 80859d8:	6a22      	ldr	r2, [r4, #32]
 80859da:	606b      	str	r3, [r5, #4]
 80859dc:	4b71      	ldr	r3, [pc, #452]	; (8085ba4 <_tzset_unlocked_r+0x2d8>)
 80859de:	601a      	str	r2, [r3, #0]
 80859e0:	4b72      	ldr	r3, [pc, #456]	; (8085bac <_tzset_unlocked_r+0x2e0>)
 80859e2:	f8c3 8000 	str.w	r8, [r3]
 80859e6:	e0d5      	b.n	8085b94 <_tzset_unlocked_r+0x2c8>
 80859e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80859ea:	f8c5 9004 	str.w	r9, [r5, #4]
 80859ee:	18fd      	adds	r5, r7, r3
 80859f0:	5cfb      	ldrb	r3, [r7, r3]
 80859f2:	2b2d      	cmp	r3, #45	; 0x2d
 80859f4:	d103      	bne.n	80859fe <_tzset_unlocked_r+0x132>
 80859f6:	3501      	adds	r5, #1
 80859f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80859fc:	e003      	b.n	8085a06 <_tzset_unlocked_r+0x13a>
 80859fe:	2b2b      	cmp	r3, #43	; 0x2b
 8085a00:	bf08      	it	eq
 8085a02:	3501      	addeq	r5, #1
 8085a04:	2701      	movs	r7, #1
 8085a06:	2300      	movs	r3, #0
 8085a08:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085a0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085a10:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085a14:	930a      	str	r3, [sp, #40]	; 0x28
 8085a16:	9603      	str	r6, [sp, #12]
 8085a18:	f8cd a008 	str.w	sl, [sp, #8]
 8085a1c:	9601      	str	r6, [sp, #4]
 8085a1e:	f8cd b000 	str.w	fp, [sp]
 8085a22:	4633      	mov	r3, r6
 8085a24:	aa07      	add	r2, sp, #28
 8085a26:	4965      	ldr	r1, [pc, #404]	; (8085bbc <_tzset_unlocked_r+0x2f0>)
 8085a28:	4628      	mov	r0, r5
 8085a2a:	f7fc fd4f 	bl	80824cc <siscanf>
 8085a2e:	2800      	cmp	r0, #0
 8085a30:	dc04      	bgt.n	8085a3c <_tzset_unlocked_r+0x170>
 8085a32:	6a23      	ldr	r3, [r4, #32]
 8085a34:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8085a38:	63e3      	str	r3, [r4, #60]	; 0x3c
 8085a3a:	e00e      	b.n	8085a5a <_tzset_unlocked_r+0x18e>
 8085a3c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085a40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085a44:	213c      	movs	r1, #60	; 0x3c
 8085a46:	fb01 3302 	mla	r3, r1, r2, r3
 8085a4a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085a4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085a52:	fb01 3302 	mla	r3, r1, r2, r3
 8085a56:	435f      	muls	r7, r3
 8085a58:	63e7      	str	r7, [r4, #60]	; 0x3c
 8085a5a:	4627      	mov	r7, r4
 8085a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085a5e:	f04f 0900 	mov.w	r9, #0
 8085a62:	441d      	add	r5, r3
 8085a64:	782b      	ldrb	r3, [r5, #0]
 8085a66:	2b2c      	cmp	r3, #44	; 0x2c
 8085a68:	bf08      	it	eq
 8085a6a:	3501      	addeq	r5, #1
 8085a6c:	f895 8000 	ldrb.w	r8, [r5]
 8085a70:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8085a74:	d126      	bne.n	8085ac4 <_tzset_unlocked_r+0x1f8>
 8085a76:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8085a7a:	9302      	str	r3, [sp, #8]
 8085a7c:	ab09      	add	r3, sp, #36	; 0x24
 8085a7e:	9300      	str	r3, [sp, #0]
 8085a80:	9603      	str	r6, [sp, #12]
 8085a82:	9601      	str	r6, [sp, #4]
 8085a84:	4633      	mov	r3, r6
 8085a86:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8085a8a:	494d      	ldr	r1, [pc, #308]	; (8085bc0 <_tzset_unlocked_r+0x2f4>)
 8085a8c:	4628      	mov	r0, r5
 8085a8e:	f7fc fd1d 	bl	80824cc <siscanf>
 8085a92:	2803      	cmp	r0, #3
 8085a94:	d17e      	bne.n	8085b94 <_tzset_unlocked_r+0x2c8>
 8085a96:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8085a9a:	1e4b      	subs	r3, r1, #1
 8085a9c:	2b0b      	cmp	r3, #11
 8085a9e:	d879      	bhi.n	8085b94 <_tzset_unlocked_r+0x2c8>
 8085aa0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8085aa4:	1e53      	subs	r3, r2, #1
 8085aa6:	2b04      	cmp	r3, #4
 8085aa8:	d874      	bhi.n	8085b94 <_tzset_unlocked_r+0x2c8>
 8085aaa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8085aae:	2b06      	cmp	r3, #6
 8085ab0:	d870      	bhi.n	8085b94 <_tzset_unlocked_r+0x2c8>
 8085ab2:	f887 8008 	strb.w	r8, [r7, #8]
 8085ab6:	60f9      	str	r1, [r7, #12]
 8085ab8:	613a      	str	r2, [r7, #16]
 8085aba:	617b      	str	r3, [r7, #20]
 8085abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085abe:	eb05 0803 	add.w	r8, r5, r3
 8085ac2:	e02a      	b.n	8085b1a <_tzset_unlocked_r+0x24e>
 8085ac4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8085ac8:	bf06      	itte	eq
 8085aca:	4643      	moveq	r3, r8
 8085acc:	3501      	addeq	r5, #1
 8085ace:	2344      	movne	r3, #68	; 0x44
 8085ad0:	220a      	movs	r2, #10
 8085ad2:	a90b      	add	r1, sp, #44	; 0x2c
 8085ad4:	4628      	mov	r0, r5
 8085ad6:	9305      	str	r3, [sp, #20]
 8085ad8:	f7ff fe3e 	bl	8085758 <strtoul>
 8085adc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8085ae0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8085ae4:	4545      	cmp	r5, r8
 8085ae6:	9b05      	ldr	r3, [sp, #20]
 8085ae8:	d114      	bne.n	8085b14 <_tzset_unlocked_r+0x248>
 8085aea:	234d      	movs	r3, #77	; 0x4d
 8085aec:	f1b9 0f00 	cmp.w	r9, #0
 8085af0:	d107      	bne.n	8085b02 <_tzset_unlocked_r+0x236>
 8085af2:	7223      	strb	r3, [r4, #8]
 8085af4:	2303      	movs	r3, #3
 8085af6:	60e3      	str	r3, [r4, #12]
 8085af8:	2302      	movs	r3, #2
 8085afa:	6123      	str	r3, [r4, #16]
 8085afc:	f8c4 9014 	str.w	r9, [r4, #20]
 8085b00:	e00b      	b.n	8085b1a <_tzset_unlocked_r+0x24e>
 8085b02:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8085b06:	230b      	movs	r3, #11
 8085b08:	62a3      	str	r3, [r4, #40]	; 0x28
 8085b0a:	2301      	movs	r3, #1
 8085b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8085b0e:	2300      	movs	r3, #0
 8085b10:	6323      	str	r3, [r4, #48]	; 0x30
 8085b12:	e002      	b.n	8085b1a <_tzset_unlocked_r+0x24e>
 8085b14:	b280      	uxth	r0, r0
 8085b16:	723b      	strb	r3, [r7, #8]
 8085b18:	6178      	str	r0, [r7, #20]
 8085b1a:	2302      	movs	r3, #2
 8085b1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085b20:	2300      	movs	r3, #0
 8085b22:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085b26:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8085b2c:	f898 3000 	ldrb.w	r3, [r8]
 8085b30:	2b2f      	cmp	r3, #47	; 0x2f
 8085b32:	d10b      	bne.n	8085b4c <_tzset_unlocked_r+0x280>
 8085b34:	9603      	str	r6, [sp, #12]
 8085b36:	f8cd a008 	str.w	sl, [sp, #8]
 8085b3a:	9601      	str	r6, [sp, #4]
 8085b3c:	f8cd b000 	str.w	fp, [sp]
 8085b40:	4633      	mov	r3, r6
 8085b42:	aa07      	add	r2, sp, #28
 8085b44:	491f      	ldr	r1, [pc, #124]	; (8085bc4 <_tzset_unlocked_r+0x2f8>)
 8085b46:	4640      	mov	r0, r8
 8085b48:	f7fc fcc0 	bl	80824cc <siscanf>
 8085b4c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085b50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085b54:	213c      	movs	r1, #60	; 0x3c
 8085b56:	fb01 3302 	mla	r3, r1, r2, r3
 8085b5a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085b5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085b62:	fb01 3302 	mla	r3, r1, r2, r3
 8085b66:	61bb      	str	r3, [r7, #24]
 8085b68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085b6a:	f109 0901 	add.w	r9, r9, #1
 8085b6e:	f1b9 0f02 	cmp.w	r9, #2
 8085b72:	4445      	add	r5, r8
 8085b74:	f107 071c 	add.w	r7, r7, #28
 8085b78:	f47f af74 	bne.w	8085a64 <_tzset_unlocked_r+0x198>
 8085b7c:	6860      	ldr	r0, [r4, #4]
 8085b7e:	f7ff fdf5 	bl	808576c <__tzcalc_limits>
 8085b82:	6a22      	ldr	r2, [r4, #32]
 8085b84:	4b07      	ldr	r3, [pc, #28]	; (8085ba4 <_tzset_unlocked_r+0x2d8>)
 8085b86:	601a      	str	r2, [r3, #0]
 8085b88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8085b8a:	1a9b      	subs	r3, r3, r2
 8085b8c:	4a07      	ldr	r2, [pc, #28]	; (8085bac <_tzset_unlocked_r+0x2e0>)
 8085b8e:	bf18      	it	ne
 8085b90:	2301      	movne	r3, #1
 8085b92:	6013      	str	r3, [r2, #0]
 8085b94:	b00d      	add	sp, #52	; 0x34
 8085b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085b9a:	bf00      	nop
 8085b9c:	080867b8 	.word	0x080867b8
 8085ba0:	200009a0 	.word	0x200009a0
 8085ba4:	200009a8 	.word	0x200009a8
 8085ba8:	080867bb 	.word	0x080867bb
 8085bac:	200009a4 	.word	0x200009a4
 8085bb0:	200000e8 	.word	0x200000e8
 8085bb4:	20000993 	.word	0x20000993
 8085bb8:	080867bf 	.word	0x080867bf
 8085bbc:	080867e2 	.word	0x080867e2
 8085bc0:	080867ce 	.word	0x080867ce
 8085bc4:	080867e1 	.word	0x080867e1
 8085bc8:	20000988 	.word	0x20000988

08085bcc <_findenv_r>:
 8085bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085bd0:	4607      	mov	r7, r0
 8085bd2:	468b      	mov	fp, r1
 8085bd4:	4690      	mov	r8, r2
 8085bd6:	f000 f8d7 	bl	8085d88 <__env_lock>
 8085bda:	4b19      	ldr	r3, [pc, #100]	; (8085c40 <_findenv_r+0x74>)
 8085bdc:	681d      	ldr	r5, [r3, #0]
 8085bde:	469a      	mov	sl, r3
 8085be0:	b13d      	cbz	r5, 8085bf2 <_findenv_r+0x26>
 8085be2:	465c      	mov	r4, fp
 8085be4:	4623      	mov	r3, r4
 8085be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8085bea:	b142      	cbz	r2, 8085bfe <_findenv_r+0x32>
 8085bec:	2a3d      	cmp	r2, #61	; 0x3d
 8085bee:	461c      	mov	r4, r3
 8085bf0:	d1f8      	bne.n	8085be4 <_findenv_r+0x18>
 8085bf2:	4638      	mov	r0, r7
 8085bf4:	f000 f8c9 	bl	8085d8a <__env_unlock>
 8085bf8:	2000      	movs	r0, #0
 8085bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085bfe:	ebcb 0404 	rsb	r4, fp, r4
 8085c02:	46a9      	mov	r9, r5
 8085c04:	f859 0b04 	ldr.w	r0, [r9], #4
 8085c08:	2800      	cmp	r0, #0
 8085c0a:	d0f2      	beq.n	8085bf2 <_findenv_r+0x26>
 8085c0c:	4622      	mov	r2, r4
 8085c0e:	4659      	mov	r1, fp
 8085c10:	f7ff fc7f 	bl	8085512 <strncmp>
 8085c14:	b988      	cbnz	r0, 8085c3a <_findenv_r+0x6e>
 8085c16:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8085c1a:	191e      	adds	r6, r3, r4
 8085c1c:	5d1b      	ldrb	r3, [r3, r4]
 8085c1e:	2b3d      	cmp	r3, #61	; 0x3d
 8085c20:	d10b      	bne.n	8085c3a <_findenv_r+0x6e>
 8085c22:	f8da 3000 	ldr.w	r3, [sl]
 8085c26:	4638      	mov	r0, r7
 8085c28:	1aed      	subs	r5, r5, r3
 8085c2a:	10ad      	asrs	r5, r5, #2
 8085c2c:	f8c8 5000 	str.w	r5, [r8]
 8085c30:	f000 f8ab 	bl	8085d8a <__env_unlock>
 8085c34:	1c70      	adds	r0, r6, #1
 8085c36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085c3a:	464d      	mov	r5, r9
 8085c3c:	e7e1      	b.n	8085c02 <_findenv_r+0x36>
 8085c3e:	bf00      	nop
 8085c40:	20000130 	.word	0x20000130

08085c44 <_getenv_r>:
 8085c44:	b507      	push	{r0, r1, r2, lr}
 8085c46:	aa01      	add	r2, sp, #4
 8085c48:	f7ff ffc0 	bl	8085bcc <_findenv_r>
 8085c4c:	b003      	add	sp, #12
 8085c4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08085c54 <__gettzinfo>:
 8085c54:	4800      	ldr	r0, [pc, #0]	; (8085c58 <__gettzinfo+0x4>)
 8085c56:	4770      	bx	lr
 8085c58:	200000f0 	.word	0x200000f0

08085c5c <gmtime_r>:
 8085c5c:	6802      	ldr	r2, [r0, #0]
 8085c5e:	4b46      	ldr	r3, [pc, #280]	; (8085d78 <gmtime_r+0x11c>)
 8085c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085c62:	fb92 f4f3 	sdiv	r4, r2, r3
 8085c66:	fb03 2214 	mls	r2, r3, r4, r2
 8085c6a:	2a00      	cmp	r2, #0
 8085c6c:	bfbc      	itt	lt
 8085c6e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8085c72:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8085c76:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8085c7a:	fb92 f3f0 	sdiv	r3, r2, r0
 8085c7e:	fb00 2213 	mls	r2, r0, r3, r2
 8085c82:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8085c86:	608b      	str	r3, [r1, #8]
 8085c88:	fb92 f3f0 	sdiv	r3, r2, r0
 8085c8c:	fb00 2213 	mls	r2, r0, r3, r2
 8085c90:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8085c94:	bfac      	ite	ge
 8085c96:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8085c9a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8085c9e:	604b      	str	r3, [r1, #4]
 8085ca0:	600a      	str	r2, [r1, #0]
 8085ca2:	2307      	movs	r3, #7
 8085ca4:	1ce2      	adds	r2, r4, #3
 8085ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8085caa:	4d34      	ldr	r5, [pc, #208]	; (8085d7c <gmtime_r+0x120>)
 8085cac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085cb0:	fb94 f5f5 	sdiv	r5, r4, r5
 8085cb4:	1ad3      	subs	r3, r2, r3
 8085cb6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8085cba:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8085cbe:	618b      	str	r3, [r1, #24]
 8085cc0:	4b2f      	ldr	r3, [pc, #188]	; (8085d80 <gmtime_r+0x124>)
 8085cc2:	4830      	ldr	r0, [pc, #192]	; (8085d84 <gmtime_r+0x128>)
 8085cc4:	fb03 4405 	mla	r4, r3, r5, r4
 8085cc8:	fbb4 f2f2 	udiv	r2, r4, r2
 8085ccc:	fbb4 f3f7 	udiv	r3, r4, r7
 8085cd0:	fbb4 f0f0 	udiv	r0, r4, r0
 8085cd4:	4422      	add	r2, r4
 8085cd6:	1ad2      	subs	r2, r2, r3
 8085cd8:	f648 6694 	movw	r6, #36500	; 0x8e94
 8085cdc:	1a13      	subs	r3, r2, r0
 8085cde:	f240 126d 	movw	r2, #365	; 0x16d
 8085ce2:	fbb3 f6f6 	udiv	r6, r3, r6
 8085ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8085cea:	fbb3 f3f7 	udiv	r3, r3, r7
 8085cee:	4434      	add	r4, r6
 8085cf0:	1ae3      	subs	r3, r4, r3
 8085cf2:	fb02 3310 	mls	r3, r2, r0, r3
 8085cf6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8085cfa:	2499      	movs	r4, #153	; 0x99
 8085cfc:	3202      	adds	r2, #2
 8085cfe:	fbb2 f2f4 	udiv	r2, r2, r4
 8085d02:	4354      	muls	r4, r2
 8085d04:	1ca6      	adds	r6, r4, #2
 8085d06:	2405      	movs	r4, #5
 8085d08:	fbb6 f4f4 	udiv	r4, r6, r4
 8085d0c:	2a0a      	cmp	r2, #10
 8085d0e:	bf34      	ite	cc
 8085d10:	2602      	movcc	r6, #2
 8085d12:	f06f 0609 	mvncs.w	r6, #9
 8085d16:	4416      	add	r6, r2
 8085d18:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085d1c:	fb02 0505 	mla	r5, r2, r5, r0
 8085d20:	1c5f      	adds	r7, r3, #1
 8085d22:	2e01      	cmp	r6, #1
 8085d24:	bf98      	it	ls
 8085d26:	3501      	addls	r5, #1
 8085d28:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8085d2c:	eba7 0704 	sub.w	r7, r7, r4
 8085d30:	d302      	bcc.n	8085d38 <gmtime_r+0xdc>
 8085d32:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8085d36:	e014      	b.n	8085d62 <gmtime_r+0x106>
 8085d38:	0782      	lsls	r2, r0, #30
 8085d3a:	d105      	bne.n	8085d48 <gmtime_r+0xec>
 8085d3c:	2464      	movs	r4, #100	; 0x64
 8085d3e:	fbb0 f2f4 	udiv	r2, r0, r4
 8085d42:	fb04 0212 	mls	r2, r4, r2, r0
 8085d46:	b94a      	cbnz	r2, 8085d5c <gmtime_r+0x100>
 8085d48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085d4c:	fbb0 f4f2 	udiv	r4, r0, r2
 8085d50:	fb02 0014 	mls	r0, r2, r4, r0
 8085d54:	fab0 f280 	clz	r2, r0
 8085d58:	0952      	lsrs	r2, r2, #5
 8085d5a:	e000      	b.n	8085d5e <gmtime_r+0x102>
 8085d5c:	2201      	movs	r2, #1
 8085d5e:	333b      	adds	r3, #59	; 0x3b
 8085d60:	441a      	add	r2, r3
 8085d62:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8085d66:	2300      	movs	r3, #0
 8085d68:	61ca      	str	r2, [r1, #28]
 8085d6a:	614d      	str	r5, [r1, #20]
 8085d6c:	610e      	str	r6, [r1, #16]
 8085d6e:	60cf      	str	r7, [r1, #12]
 8085d70:	620b      	str	r3, [r1, #32]
 8085d72:	4608      	mov	r0, r1
 8085d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085d76:	bf00      	nop
 8085d78:	00015180 	.word	0x00015180
 8085d7c:	00023ab1 	.word	0x00023ab1
 8085d80:	fffdc54f 	.word	0xfffdc54f
 8085d84:	00023ab0 	.word	0x00023ab0

08085d88 <__env_lock>:
 8085d88:	4770      	bx	lr

08085d8a <__env_unlock>:
 8085d8a:	4770      	bx	lr

08085d8c <dynalib_user>:
 8085d8c:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8085d9c:	0000 0000                                   ....

08085da0 <_ZTV5Timer>:
	...
 8085da8:	0285 0808 02d9 0808 011d 0808               ............

08085db4 <_ZTV8MB85RC64>:
	...
 8085dbc:	0129 0808 013d 0808 1c8d 0808 1d39 0808     )...=.......9...
 8085dcc:	1db3 0808 6207 0808 6242 0808 6247 0808     .....b..Bb..Gb..
 8085ddc:	624c 0808 6250 0808 6255 0808 625a 0808     Lb..Pb..Ub..Zb..
 8085dec:	625e 0808 6269 0808 6274 0808 6207 0808     ^b..ib..tb...b..
 8085dfc:	620f 0808 6213 0808 621c 0808 6224 0808     .b...b...b..$b..
 8085e0c:	6230 0808 6236 0808                         0b..6b..

08085e14 <_ZL17FRAMversionNumber>:
 8085e14:	0001 0000 6925 252f 2c69 2520 2c69 2520     ....%i/%i, %i, %
 8085e24:	2c69 2520 0069 202c 4400 7461 2c65 4420     i, %i., .Date, D
 8085e34:	6961 796c 202c 6142 7474 614d 2c78 4220     aily, BattMax, B
 8085e44:	7461 4d74 6e69 202c 3231 2c61 6131 322c     attMin, 12a,1a,2
 8085e54:	2c61 6133 342c 2c61 6135 362c 2c61 6137     a,3a,4a,5a,6a,7a
 8085e64:	382c 2c61 6139 312c 6130 312c 6131 312c     ,8a,9a,10a,11a,1
 8085e74:	7032 312c 2c70 7032 332c 2c70 7034 352c     2p,1p,2p,3p,4p,5
 8085e84:	2c70 7036 372c 2c70 7038 392c 2c70 3031     p,6p,7p,8p,9p,10
 8085e94:	2c70 3131 0070 7325 5320 253a 2e32 6630     p,11p.%s S:%2.0f
 8085ea4:	2525 202c 3a51 3225 302e 2566 2025 4100     %%, Q:%2.0f%% .A
 8085eb4:	2b54 4643 4e55 313d 0d36 000a 7250 7365     T+CFUN=16...Pres
 8085ec4:	7573 6572 5320 6e65 6f73 0072 6c41 206c     sure Sensor.All 
 8085ed4:	6f63 6e75 7374 7220 7365 7465 4800 7261     counts reset.Har
 8085ee4:	2064 6552 6573 2074 6e69 3220 7320 6365     d Reset in 2 sec
 8085ef4:	6e6f 7364 4300 6168 676e 6e69 2067 6564     onds.Changing de
 8085f04:	6976 6563 7420 206f 6964 6373 6e6f 656e     vice to disconne
 8085f14:	7463 6465 6d20 646f 2065 202d 7355 7265     cted mode - User
 8085f24:	2f20 5220 7365 7465 7420 206f 6572 6f63      / Reset to reco
 8085f34:	6576 0072 0030 6843 6e61 6967 676e 6420     ver.0.Changing d
 8085f44:	7665 6369 2065 6f74 6320 6e6f 656e 7463     evice to connect
 8085f54:	6465 6d20 646f 2065 202d 7355 7265 2f20     ed mode - User /
 8085f64:	5220 7365 7465 7420 206f 6572 6f63 6576      Reset to recove
 8085f74:	0072 6553 2074 6f53 616c 2072 6f50 6577     r.Set Solar Powe
 8085f84:	6572 2064 6f4d 6564 4300 656c 7261 6465     red Mode.Cleared
 8085f94:	5320 6c6f 7261 5020 776f 7265 6465 4d20      Solar Powered M
 8085fa4:	646f 0065 6553 2074 6553 736e 726f 4d20     ode.Set Sensor M
 8085fb4:	646f 2065 6f74 5020 6572 7373 7275 0065     ode to Pressure.
 8085fc4:	4950 2052 6553 736e 726f 5300 7465 5320     PIR Sensor.Set S
 8085fd4:	6e65 6f73 2072 6f4d 6564 7420 206f 4950     ensor Mode to PI
 8085fe4:	0052 0032 654c 6167 7963 5320 6e65 6f73     R.2.Legacy Senso
 8085ff4:	0072 6553 2074 6553 736e 726f 4d20 646f     r.Set Sensor Mod
 8086004:	2065 6f74 4c20 6765 6361 0079 6553 2074     e to Legacy.Set 
 8086014:	6556 6272 736f 2065 6f4d 6564 4300 656c     Verbose Mode.Cle
 8086024:	7261 6465 5620 7265 6f62 6573 4d20 646f     ared Verbose Mod
 8086034:	0065 3225 312e 2066 5455 0043 6954 656d     e.%2.1f UTC.Time
 8086044:	7a20 6e6f 2065 666f 7366 7465 2520 0069      zone offset %i.
 8086054:	704f 6e65 7420 6d69 2065 6573 2074 6f74     Open time set to
 8086064:	2520 0069 6c43 736f 6e69 2067 6974 656d      %i.Closing time
 8086074:	7320 7465 7420 206f 6925 4c00 776f 5020      set to %i.Low P
 8086084:	776f 7265 4d20 646f 0065 7254 6575 4e00     ower Mode.True.N
 8086094:	726f 616d 206c 704f 7265 7461 6f69 736e     ormal Operations
 80860a4:	4600 6c61 6573 4c00 616f 6964 676e 5320     .False.Loading S
 80860b4:	7379 6574 206d 6544 6166 6c75 7374 4600     ystem Defaults.F
 80860c4:	6f72 206d 7325 7420 206f 7325 5300 6174     rom %s to %s.Sta
 80860d4:	6574 5420 6172 736e 7469 6f69 006e 7245     te Transition.Er
 80860e4:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
 80860f4:	0074 7453 7461 0065 7245 6f72 2072 7453     t.State.Error St
 8086104:	7461 2065 202d 7546 6c6c 4d20 646f 6d65     ate - Full Modem
 8086114:	5220 7365 7465 4400 5453 6f20 6666 6573      Reset.DST offse
 8086124:	2074 3225 312e 0066 6f48 7275 796c 6f43     t %2.1f.HourlyCo
 8086134:	6e75 0074 6144 6c69 4379 756f 746e 5300     unt.DailyCount.S
 8086144:	6769 616e 006c 6552 656c 7361 0065 7473     ignal.Release.st
 8086154:	7461 4f65 4366 6768 4300 6f6c 6573 6954     ateOfChg.CloseTi
 8086164:	656d 4100 656c 7472 0073 6954 656d 664f     me.Alerts.TimeOf
 8086174:	7366 7465 4200 7461 6574 7972 6f43 746e     fset.BatteryCont
 8086184:	7865 0074 6553 736e 726f 7453 7461 7375     ext.SensorStatus
 8086194:	7200 7365 7465 5246 4d41 7200 7365 7465     .resetFRAM.reset
 80861a4:	6f43 6e75 7374 4800 7261 5264 7365 7465     Counts.HardReset
 80861b4:	5300 7465 542d 6d69 7a65 6e6f 0065 6553     .Set-Timezone.Se
 80861c4:	2d74 5344 4f54 6666 6573 0074 6553 2d74     t-DSTOffset.Set-
 80861d4:	704f 6e65 6954 656d 5300 7465 432d 6f6c     OpenTime.Set-Clo
 80861e4:	6573 5300 7465 532d 6e65 6f73 5472 7079     se.Set-SensorTyp
 80861f4:	0065 6553 2d74 6944 6373 6e6f 656e 7463     e.Set-Disconnect
 8086204:	6465 5500 6b6e 6f6e 6e77 4e00 746f 4320     ed.Unknown.Not C
 8086214:	6168 6772 6e69 0067 6843 7261 6567 0064     harging.Charged.
 8086224:	6944 6373 6168 6772 6e69 0067 6146 6c75     Discharging.Faul
 8086234:	0074 6944 6f63 6e6e 6365 6574 0064 6f4e     t.Diconnected.No
 8086244:	656e 5700 4669 0069 5347 004d 4d55 5354     ne.WiFi.GSM.UMTS
 8086254:	4300 4d44 0041 544c 0045 4549 4545 3038     .CDMA.LTE.IEEE80
 8086264:	3132 3435 4c00 4554 435f 5441 4d5f 0031     2154.LTE_CAT_M1.
 8086274:	544c 5f45 4143 5f54 424e 0031 7277 7469     LTE_CAT_NB1.writ
 8086284:	4465 7461 2061 6166 6c69 6465 6420 7275     eData failed dur
 8086294:	6e69 2067 7265 7361 2065 7266 6d61 6441     ing erase framAd
 80862a4:	7264 253d 0075 6572 6461 7320 7465 6120     dr=%u.read set a
 80862b4:	6464 6572 7373 6620 6961 656c 2064 6425     ddress failed %d
 80862c4:	6400 6469 276e 2074 6572 6563 7669 2065     .didn't receive 
 80862d4:	6e65 756f 6867 6220 7479 7365 6320 756f     enough bytes cou
 80862e4:	746e 253d 0075 7277 7469 2065 6166 6c69     nt=%u.write fail
 80862f4:	6465 2520 0064 0000                         ed %d...

080862fc <_ZTV6MB85RC>:
	...
 8086304:	1bad 0808 1baf 0808 1c8d 0808 1d39 0808     ............9...
 8086314:	1db3 0808                                   ....

08086318 <_ZTVN5spark13CellularClassE>:
	...
 8086320:	25dd 0808 25d3 0808 25c9 0808 253b 0808     .%...%...%..;%..
 8086330:	25bd 0808 25b1 0808 25a5 0808 259d 0808     .%...%...%...%..
 8086340:	2593 0808 2589 0808 2545 0808               .%...%..E%..

0808634c <_ZTV14CellularSignal>:
	...
 8086354:	268d 0808 26dd 0808 268f 0808 271d 0808     .&...&...&...'..
 8086364:	2695 0808 26ed 0808 26b9 0808 27a3 0808     .&...&...&...'..
 8086374:	fffc ffff 0000 0000 27cd 0808               .........'..

08086380 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8086388:	27d5 0808 27db 0808 281f 0808 27e9 0808     .'...'...(...'..
 8086398:	27d7 0808                                   .'..

0808639c <_ZTV7TwoWire>:
	...
 80863a4:	2de5 0808 2e2f 0808 2e07 0808 2de7 0808     .-../........-..
 80863b4:	2e0f 0808 2e17 0808 2e1f 0808 2e27 0808     ............'...

080863c4 <_ZTV9IPAddress>:
	...
 80863cc:	2fa1 0808 2f91 0808 2f93 0808 6162 6475     ./.../.../..baud
 80863dc:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80863ec:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80863fc:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 808640c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 808641c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 808642c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 808643c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 808644c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 808645c:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 808646c:	6564 6174 6c69 2073 203d 6c00 006e 6e66     details = .ln.fn
 808647c:	6300 646f 0065 6564 6174 6c69 6e00 6e6f     .code.detail.non
 808648c:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
 808649c:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
 80864ac:	006c 0000                                   l...

080864b0 <_ZTVN5spark12NetworkClassE>:
	...
 80864b8:	3041 0808 304b 0808 3055 0808 305f 0808     A0..K0..U0.._0..
 80864c8:	3069 0808 3075 0808 3081 0808 308d 0808     i0..u0...0...0..
 80864d8:	3095 0808 309f 0808 30a9 0808 6977 6972     .0...0...0..wiri
 80864e8:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
 80864f8:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
 8086508:	6920 766e 6c61 6469 002e 2b25 3330 3a64      invalid..%+03d:
 8086518:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8086528:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8086538:	0000 0000                                   ....

0808653c <_ZTV11USARTSerial>:
	...
 8086544:	3929 0808 3979 0808 3987 0808 3251 0808     )9..y9...9..Q2..
 8086554:	393d 0808 395f 0808 394b 0808 3973 0808     =9.._9..K9..s9..
 8086564:	392b 0808 392f 0808                         +9../9..

0808656c <_ZTV9USBSerial>:
	...
 8086574:	3a3d 0808 3a8d 0808 3a9b 0808 3251 0808     =:...:...:..Q2..
 8086584:	3a79 0808 3a3f 0808 3a55 0808 3a87 0808     y:..?:..U:...:..
 8086594:	3a6b 0808 3a39 0808                         k:..9:..

0808659c <_ZSt7nothrow>:
	...

0808659d <day_name.4723>:
 808659d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80865ad:	6972 6153 4a74                                   riSat

080865b2 <mon_name.4724>:
 80865b2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80865c2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80865d2:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80865e2:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80865f2:	6425 000a                                   %d..

080865f6 <_ctype_>:
 80865f6:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8086606:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8086616:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8086626:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8086636:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8086646:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8086656:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8086666:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8086676:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080866f8 <__sf_fake_stdin>:
	...

08086718 <__sf_fake_stdout>:
	...

08086738 <__sf_fake_stderr>:
	...

08086758 <__month_lengths>:
 8086758:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8086768:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8086778:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8086788:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8086798:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80867a8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80867b8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80867c8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80867d8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80867e8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080867f4 <link_const_variable_data_end>:
 80867f4:	08081a45 	.word	0x08081a45
 80867f8:	08081e65 	.word	0x08081e65
 80867fc:	0808265d 	.word	0x0808265d
 8086800:	08083031 	.word	0x08083031
 8086804:	080830f5 	.word	0x080830f5
 8086808:	08083319 	.word	0x08083319
 808680c:	08083685 	.word	0x08083685
 8086810:	08083915 	.word	0x08083915
 8086814:	0808400d 	.word	0x0808400d
 8086818:	08084085 	.word	0x08084085
 808681c:	08084149 	.word	0x08084149
 8086820:	080841cd 	.word	0x080841cd
 8086824:	08084251 	.word	0x08084251

08086828 <link_constructors_end>:
	...
